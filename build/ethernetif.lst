ARM GAS  /tmp/ccJW5Vt8.s 			page 1


   1              		.cpu cortex-m7
   2              		.arch armv7e-m
   3              		.fpu fpv5-d16
   4              		.eabi_attribute 28, 1
   5              		.eabi_attribute 20, 1
   6              		.eabi_attribute 21, 1
   7              		.eabi_attribute 23, 3
   8              		.eabi_attribute 24, 1
   9              		.eabi_attribute 25, 1
  10              		.eabi_attribute 26, 1
  11              		.eabi_attribute 30, 1
  12              		.eabi_attribute 34, 1
  13              		.eabi_attribute 18, 4
  14              		.file	"ethernetif.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.ETH_PHY_IO_DeInit,"ax",%progbits
  19              		.align	1
  20              		.global	ETH_PHY_IO_DeInit
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  25              	ETH_PHY_IO_DeInit:
  26              	.LFB178:
  27              		.file 1 "LWIP/Target/ethernetif.c"
   1:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN Header */
   2:LWIP/Target/ethernetif.c **** /**
   3:LWIP/Target/ethernetif.c ****   ******************************************************************************
   4:LWIP/Target/ethernetif.c ****   * File Name          : ethernetif.c
   5:LWIP/Target/ethernetif.c ****   * Description        : This file provides code for the configuration
   6:LWIP/Target/ethernetif.c ****   *                      of the ethernetif.c MiddleWare.
   7:LWIP/Target/ethernetif.c ****   ******************************************************************************
   8:LWIP/Target/ethernetif.c ****   * @attention
   9:LWIP/Target/ethernetif.c ****   *
  10:LWIP/Target/ethernetif.c ****   * Copyright (c) 2023 STMicroelectronics.
  11:LWIP/Target/ethernetif.c ****   * All rights reserved.
  12:LWIP/Target/ethernetif.c ****   *
  13:LWIP/Target/ethernetif.c ****   * This software is licensed under terms that can be found in the LICENSE file
  14:LWIP/Target/ethernetif.c ****   * in the root directory of this software component.
  15:LWIP/Target/ethernetif.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:LWIP/Target/ethernetif.c ****   *
  17:LWIP/Target/ethernetif.c ****   ******************************************************************************
  18:LWIP/Target/ethernetif.c ****   */
  19:LWIP/Target/ethernetif.c **** /* USER CODE END Header */
  20:LWIP/Target/ethernetif.c **** 
  21:LWIP/Target/ethernetif.c **** /* Includes ------------------------------------------------------------------*/
  22:LWIP/Target/ethernetif.c **** #include "main.h"
  23:LWIP/Target/ethernetif.c **** #include "lwip/opt.h"
  24:LWIP/Target/ethernetif.c **** #include "lwip/mem.h"
  25:LWIP/Target/ethernetif.c **** #include "lwip/memp.h"
  26:LWIP/Target/ethernetif.c **** #include "lwip/timeouts.h"
  27:LWIP/Target/ethernetif.c **** #include "netif/ethernet.h"
  28:LWIP/Target/ethernetif.c **** #include "netif/etharp.h"
  29:LWIP/Target/ethernetif.c **** #include "lwip/ethip6.h"
  30:LWIP/Target/ethernetif.c **** #include "ethernetif.h"
  31:LWIP/Target/ethernetif.c **** #include "lan8742.h"
ARM GAS  /tmp/ccJW5Vt8.s 			page 2


  32:LWIP/Target/ethernetif.c **** #include <string.h>
  33:LWIP/Target/ethernetif.c **** 
  34:LWIP/Target/ethernetif.c **** /* Within 'USER CODE' section, code will be kept by default at each generation */
  35:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN 0 */
  36:LWIP/Target/ethernetif.c **** 
  37:LWIP/Target/ethernetif.c **** /* USER CODE END 0 */
  38:LWIP/Target/ethernetif.c **** 
  39:LWIP/Target/ethernetif.c **** /* Private define ------------------------------------------------------------*/
  40:LWIP/Target/ethernetif.c **** 
  41:LWIP/Target/ethernetif.c **** /* Network interface name */
  42:LWIP/Target/ethernetif.c **** #define IFNAME0 's'
  43:LWIP/Target/ethernetif.c **** #define IFNAME1 't'
  44:LWIP/Target/ethernetif.c **** 
  45:LWIP/Target/ethernetif.c **** /* ETH Setting  */
  46:LWIP/Target/ethernetif.c **** #define ETH_DMA_TRANSMIT_TIMEOUT               ( 20U )
  47:LWIP/Target/ethernetif.c **** #define ETH_TX_BUFFER_MAX             ((ETH_TX_DESC_CNT) * 2U)
  48:LWIP/Target/ethernetif.c **** 
  49:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN 1 */
  50:LWIP/Target/ethernetif.c **** 
  51:LWIP/Target/ethernetif.c **** /* USER CODE END 1 */
  52:LWIP/Target/ethernetif.c **** 
  53:LWIP/Target/ethernetif.c **** /* Private variables ---------------------------------------------------------*/
  54:LWIP/Target/ethernetif.c **** /*
  55:LWIP/Target/ethernetif.c **** @Note: This interface is implemented to operate in zero-copy mode only:
  56:LWIP/Target/ethernetif.c ****         - Rx buffers will be allocated from LwIP stack memory heap,
  57:LWIP/Target/ethernetif.c ****           then passed to ETH HAL driver.
  58:LWIP/Target/ethernetif.c ****         - Tx buffers will be allocated from LwIP stack memory heap,
  59:LWIP/Target/ethernetif.c ****           then passed to ETH HAL driver.
  60:LWIP/Target/ethernetif.c **** 
  61:LWIP/Target/ethernetif.c **** @Notes:
  62:LWIP/Target/ethernetif.c ****   1.a. ETH DMA Rx descriptors must be contiguous, the default count is 4,
  63:LWIP/Target/ethernetif.c ****        to customize it please redefine ETH_RX_DESC_CNT in ETH GUI (Rx Descriptor Length)
  64:LWIP/Target/ethernetif.c ****        so that updated value will be generated in stm32xxxx_hal_conf.h
  65:LWIP/Target/ethernetif.c ****   1.b. ETH DMA Tx descriptors must be contiguous, the default count is 4,
  66:LWIP/Target/ethernetif.c ****        to customize it please redefine ETH_TX_DESC_CNT in ETH GUI (Tx Descriptor Length)
  67:LWIP/Target/ethernetif.c ****        so that updated value will be generated in stm32xxxx_hal_conf.h
  68:LWIP/Target/ethernetif.c **** 
  69:LWIP/Target/ethernetif.c ****   2.a. Rx Buffers number must be between ETH_RX_DESC_CNT and 2*ETH_RX_DESC_CNT
  70:LWIP/Target/ethernetif.c ****   2.b. Rx Buffers must have the same size: ETH_RX_BUF_SIZE, this value must
  71:LWIP/Target/ethernetif.c ****        passed to ETH DMA in the init field (heth.Init.RxBuffLen)
  72:LWIP/Target/ethernetif.c ****   2.c  The RX Ruffers addresses and sizes must be properly defined to be aligned
  73:LWIP/Target/ethernetif.c ****        to L1-CACHE line size (32 bytes).
  74:LWIP/Target/ethernetif.c **** */
  75:LWIP/Target/ethernetif.c **** 
  76:LWIP/Target/ethernetif.c **** /* Data Type Definitions */
  77:LWIP/Target/ethernetif.c **** typedef enum
  78:LWIP/Target/ethernetif.c **** {
  79:LWIP/Target/ethernetif.c ****   RX_ALLOC_OK       = 0x00,
  80:LWIP/Target/ethernetif.c ****   RX_ALLOC_ERROR    = 0x01
  81:LWIP/Target/ethernetif.c **** } RxAllocStatusTypeDef;
  82:LWIP/Target/ethernetif.c **** 
  83:LWIP/Target/ethernetif.c **** typedef struct
  84:LWIP/Target/ethernetif.c **** {
  85:LWIP/Target/ethernetif.c ****   struct pbuf_custom pbuf_custom;
  86:LWIP/Target/ethernetif.c ****   uint8_t buff[(ETH_RX_BUF_SIZE + 31) & ~31] __ALIGNED(32);
  87:LWIP/Target/ethernetif.c **** } RxBuff_t;
  88:LWIP/Target/ethernetif.c **** 
ARM GAS  /tmp/ccJW5Vt8.s 			page 3


  89:LWIP/Target/ethernetif.c **** /* Memory Pool Declaration */
  90:LWIP/Target/ethernetif.c **** #define ETH_RX_BUFFER_CNT             12U
  91:LWIP/Target/ethernetif.c **** LWIP_MEMPOOL_DECLARE(RX_POOL, ETH_RX_BUFFER_CNT, sizeof(RxBuff_t), "Zero-copy RX PBUF pool");
  92:LWIP/Target/ethernetif.c **** 
  93:LWIP/Target/ethernetif.c **** /* Variable Definitions */
  94:LWIP/Target/ethernetif.c **** static uint8_t RxAllocStatus;
  95:LWIP/Target/ethernetif.c **** 
  96:LWIP/Target/ethernetif.c **** #if defined ( __ICCARM__ ) /*!< IAR Compiler */
  97:LWIP/Target/ethernetif.c **** 
  98:LWIP/Target/ethernetif.c **** #pragma location=0x2007c000
  99:LWIP/Target/ethernetif.c **** ETH_DMADescTypeDef  DMARxDscrTab[ETH_RX_DESC_CNT]; /* Ethernet Rx DMA Descriptors */
 100:LWIP/Target/ethernetif.c **** #pragma location=0x2007c0a0
 101:LWIP/Target/ethernetif.c **** ETH_DMADescTypeDef  DMATxDscrTab[ETH_TX_DESC_CNT]; /* Ethernet Tx DMA Descriptors */
 102:LWIP/Target/ethernetif.c **** 
 103:LWIP/Target/ethernetif.c **** #elif defined ( __CC_ARM )  /* MDK ARM Compiler */
 104:LWIP/Target/ethernetif.c **** 
 105:LWIP/Target/ethernetif.c **** __attribute__((at(0x2007c000))) ETH_DMADescTypeDef  DMARxDscrTab[ETH_RX_DESC_CNT]; /* Ethernet Rx D
 106:LWIP/Target/ethernetif.c **** __attribute__((at(0x2007c0a0))) ETH_DMADescTypeDef  DMATxDscrTab[ETH_TX_DESC_CNT]; /* Ethernet Tx D
 107:LWIP/Target/ethernetif.c **** 
 108:LWIP/Target/ethernetif.c **** #elif defined ( __GNUC__ ) /* GNU Compiler */
 109:LWIP/Target/ethernetif.c **** 
 110:LWIP/Target/ethernetif.c **** ETH_DMADescTypeDef DMARxDscrTab[ETH_RX_DESC_CNT] __attribute__((section(".RxDecripSection"))); /* E
 111:LWIP/Target/ethernetif.c **** ETH_DMADescTypeDef DMATxDscrTab[ETH_TX_DESC_CNT] __attribute__((section(".TxDecripSection")));   /*
 112:LWIP/Target/ethernetif.c **** 
 113:LWIP/Target/ethernetif.c **** #endif
 114:LWIP/Target/ethernetif.c **** 
 115:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN 2 */
 116:LWIP/Target/ethernetif.c **** 
 117:LWIP/Target/ethernetif.c **** /* USER CODE END 2 */
 118:LWIP/Target/ethernetif.c **** 
 119:LWIP/Target/ethernetif.c **** /* Global Ethernet handle */
 120:LWIP/Target/ethernetif.c **** ETH_HandleTypeDef heth;
 121:LWIP/Target/ethernetif.c **** ETH_TxPacketConfig TxConfig;
 122:LWIP/Target/ethernetif.c **** 
 123:LWIP/Target/ethernetif.c **** /* Private function prototypes -----------------------------------------------*/
 124:LWIP/Target/ethernetif.c **** int32_t ETH_PHY_IO_Init(void);
 125:LWIP/Target/ethernetif.c **** int32_t ETH_PHY_IO_DeInit (void);
 126:LWIP/Target/ethernetif.c **** int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal);
 127:LWIP/Target/ethernetif.c **** int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal);
 128:LWIP/Target/ethernetif.c **** int32_t ETH_PHY_IO_GetTick(void);
 129:LWIP/Target/ethernetif.c **** 
 130:LWIP/Target/ethernetif.c **** lan8742_Object_t LAN8742;
 131:LWIP/Target/ethernetif.c **** lan8742_IOCtx_t  LAN8742_IOCtx = {ETH_PHY_IO_Init,
 132:LWIP/Target/ethernetif.c ****                                   ETH_PHY_IO_DeInit,
 133:LWIP/Target/ethernetif.c ****                                   ETH_PHY_IO_WriteReg,
 134:LWIP/Target/ethernetif.c ****                                   ETH_PHY_IO_ReadReg,
 135:LWIP/Target/ethernetif.c ****                                   ETH_PHY_IO_GetTick};
 136:LWIP/Target/ethernetif.c **** 
 137:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN 3 */
 138:LWIP/Target/ethernetif.c **** 
 139:LWIP/Target/ethernetif.c **** /* USER CODE END 3 */
 140:LWIP/Target/ethernetif.c **** 
 141:LWIP/Target/ethernetif.c **** /* Private functions ---------------------------------------------------------*/
 142:LWIP/Target/ethernetif.c **** void pbuf_free_custom(struct pbuf *p);
 143:LWIP/Target/ethernetif.c **** 
 144:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN 4 */
 145:LWIP/Target/ethernetif.c **** 
ARM GAS  /tmp/ccJW5Vt8.s 			page 4


 146:LWIP/Target/ethernetif.c **** /* USER CODE END 4 */
 147:LWIP/Target/ethernetif.c **** 
 148:LWIP/Target/ethernetif.c **** /*******************************************************************************
 149:LWIP/Target/ethernetif.c ****                        LL Driver Interface ( LwIP stack --> ETH)
 150:LWIP/Target/ethernetif.c **** *******************************************************************************/
 151:LWIP/Target/ethernetif.c **** /**
 152:LWIP/Target/ethernetif.c ****  * @brief In this function, the hardware should be initialized.
 153:LWIP/Target/ethernetif.c ****  * Called from ethernetif_init().
 154:LWIP/Target/ethernetif.c ****  *
 155:LWIP/Target/ethernetif.c ****  * @param netif the already initialized lwip network interface structure
 156:LWIP/Target/ethernetif.c ****  *        for this ethernetif
 157:LWIP/Target/ethernetif.c ****  */
 158:LWIP/Target/ethernetif.c **** static void low_level_init(struct netif *netif)
 159:LWIP/Target/ethernetif.c **** {
 160:LWIP/Target/ethernetif.c ****   HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 161:LWIP/Target/ethernetif.c ****   /* Start ETH HAL Init */
 162:LWIP/Target/ethernetif.c **** 
 163:LWIP/Target/ethernetif.c ****    uint8_t MACAddr[6] ;
 164:LWIP/Target/ethernetif.c ****   heth.Instance = ETH;
 165:LWIP/Target/ethernetif.c ****   MACAddr[0] = 0x00;
 166:LWIP/Target/ethernetif.c ****   MACAddr[1] = 0x80;
 167:LWIP/Target/ethernetif.c ****   MACAddr[2] = 0xE1;
 168:LWIP/Target/ethernetif.c ****   MACAddr[3] = 0x00;
 169:LWIP/Target/ethernetif.c ****   MACAddr[4] = 0x00;
 170:LWIP/Target/ethernetif.c ****   MACAddr[5] = 0x00;
 171:LWIP/Target/ethernetif.c ****   heth.Init.MACAddr = &MACAddr[0];
 172:LWIP/Target/ethernetif.c ****   heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 173:LWIP/Target/ethernetif.c ****   heth.Init.TxDesc = DMATxDscrTab;
 174:LWIP/Target/ethernetif.c ****   heth.Init.RxDesc = DMARxDscrTab;
 175:LWIP/Target/ethernetif.c ****   heth.Init.RxBuffLen = 1536;
 176:LWIP/Target/ethernetif.c **** 
 177:LWIP/Target/ethernetif.c ****   /* USER CODE BEGIN MACADDRESS */
 178:LWIP/Target/ethernetif.c **** 
 179:LWIP/Target/ethernetif.c ****   /* USER CODE END MACADDRESS */
 180:LWIP/Target/ethernetif.c **** 
 181:LWIP/Target/ethernetif.c ****   hal_eth_init_status = HAL_ETH_Init(&heth);
 182:LWIP/Target/ethernetif.c **** 
 183:LWIP/Target/ethernetif.c ****   memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 184:LWIP/Target/ethernetif.c ****   TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 185:LWIP/Target/ethernetif.c ****   TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 186:LWIP/Target/ethernetif.c ****   TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 187:LWIP/Target/ethernetif.c **** 
 188:LWIP/Target/ethernetif.c ****   /* End ETH HAL Init */
 189:LWIP/Target/ethernetif.c **** 
 190:LWIP/Target/ethernetif.c ****   /* Initialize the RX POOL */
 191:LWIP/Target/ethernetif.c ****   LWIP_MEMPOOL_INIT(RX_POOL);
 192:LWIP/Target/ethernetif.c **** 
 193:LWIP/Target/ethernetif.c **** #if LWIP_ARP || LWIP_ETHERNET
 194:LWIP/Target/ethernetif.c **** 
 195:LWIP/Target/ethernetif.c ****   /* set MAC hardware address length */
 196:LWIP/Target/ethernetif.c ****   netif->hwaddr_len = ETH_HWADDR_LEN;
 197:LWIP/Target/ethernetif.c **** 
 198:LWIP/Target/ethernetif.c ****   /* set MAC hardware address */
 199:LWIP/Target/ethernetif.c ****   netif->hwaddr[0] =  heth.Init.MACAddr[0];
 200:LWIP/Target/ethernetif.c ****   netif->hwaddr[1] =  heth.Init.MACAddr[1];
 201:LWIP/Target/ethernetif.c ****   netif->hwaddr[2] =  heth.Init.MACAddr[2];
 202:LWIP/Target/ethernetif.c ****   netif->hwaddr[3] =  heth.Init.MACAddr[3];
ARM GAS  /tmp/ccJW5Vt8.s 			page 5


 203:LWIP/Target/ethernetif.c ****   netif->hwaddr[4] =  heth.Init.MACAddr[4];
 204:LWIP/Target/ethernetif.c ****   netif->hwaddr[5] =  heth.Init.MACAddr[5];
 205:LWIP/Target/ethernetif.c **** 
 206:LWIP/Target/ethernetif.c ****   /* maximum transfer unit */
 207:LWIP/Target/ethernetif.c ****   netif->mtu = ETH_MAX_PAYLOAD;
 208:LWIP/Target/ethernetif.c **** 
 209:LWIP/Target/ethernetif.c ****   /* Accept broadcast address and ARP traffic */
 210:LWIP/Target/ethernetif.c ****   /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
 211:LWIP/Target/ethernetif.c ****   #if LWIP_ARP
 212:LWIP/Target/ethernetif.c ****     netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 213:LWIP/Target/ethernetif.c ****   #else
 214:LWIP/Target/ethernetif.c ****     netif->flags |= NETIF_FLAG_BROADCAST;
 215:LWIP/Target/ethernetif.c ****   #endif /* LWIP_ARP */
 216:LWIP/Target/ethernetif.c **** 
 217:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN PHY_PRE_CONFIG */
 218:LWIP/Target/ethernetif.c **** 
 219:LWIP/Target/ethernetif.c **** /* USER CODE END PHY_PRE_CONFIG */
 220:LWIP/Target/ethernetif.c ****   /* Set PHY IO functions */
 221:LWIP/Target/ethernetif.c ****   LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 222:LWIP/Target/ethernetif.c **** 
 223:LWIP/Target/ethernetif.c ****   /* Initialize the LAN8742 ETH PHY */
 224:LWIP/Target/ethernetif.c ****   LAN8742_Init(&LAN8742);
 225:LWIP/Target/ethernetif.c **** 
 226:LWIP/Target/ethernetif.c ****   if (hal_eth_init_status == HAL_OK)
 227:LWIP/Target/ethernetif.c ****   {
 228:LWIP/Target/ethernetif.c ****   /* Get link state */
 229:LWIP/Target/ethernetif.c ****   ethernet_link_check_state(netif);
 230:LWIP/Target/ethernetif.c ****   }
 231:LWIP/Target/ethernetif.c ****   else
 232:LWIP/Target/ethernetif.c ****   {
 233:LWIP/Target/ethernetif.c ****     Error_Handler();
 234:LWIP/Target/ethernetif.c ****   }
 235:LWIP/Target/ethernetif.c **** #endif /* LWIP_ARP || LWIP_ETHERNET */
 236:LWIP/Target/ethernetif.c **** 
 237:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN LOW_LEVEL_INIT */
 238:LWIP/Target/ethernetif.c **** 
 239:LWIP/Target/ethernetif.c **** /* USER CODE END LOW_LEVEL_INIT */
 240:LWIP/Target/ethernetif.c **** }
 241:LWIP/Target/ethernetif.c **** 
 242:LWIP/Target/ethernetif.c **** /**
 243:LWIP/Target/ethernetif.c ****  * @brief This function should do the actual transmission of the packet. The packet is
 244:LWIP/Target/ethernetif.c ****  * contained in the pbuf that is passed to the function. This pbuf
 245:LWIP/Target/ethernetif.c ****  * might be chained.
 246:LWIP/Target/ethernetif.c ****  *
 247:LWIP/Target/ethernetif.c ****  * @param netif the lwip network interface structure for this ethernetif
 248:LWIP/Target/ethernetif.c ****  * @param p the MAC packet to send (e.g. IP packet including MAC addresses and type)
 249:LWIP/Target/ethernetif.c ****  * @return ERR_OK if the packet could be sent
 250:LWIP/Target/ethernetif.c ****  *         an err_t value if the packet couldn't be sent
 251:LWIP/Target/ethernetif.c ****  *
 252:LWIP/Target/ethernetif.c ****  * @note Returning ERR_MEM here if a DMA queue of your MAC is full can lead to
 253:LWIP/Target/ethernetif.c ****  *       strange results. You might consider waiting for space in the DMA queue
 254:LWIP/Target/ethernetif.c ****  *       to become available since the stack doesn't retry to send a packet
 255:LWIP/Target/ethernetif.c ****  *       dropped because of memory failure (except for the TCP timers).
 256:LWIP/Target/ethernetif.c ****  */
 257:LWIP/Target/ethernetif.c **** 
 258:LWIP/Target/ethernetif.c **** static err_t low_level_output(struct netif *netif, struct pbuf *p)
 259:LWIP/Target/ethernetif.c **** {
ARM GAS  /tmp/ccJW5Vt8.s 			page 6


 260:LWIP/Target/ethernetif.c ****   uint32_t i = 0U;
 261:LWIP/Target/ethernetif.c ****   struct pbuf *q = NULL;
 262:LWIP/Target/ethernetif.c ****   err_t errval = ERR_OK;
 263:LWIP/Target/ethernetif.c ****   ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 264:LWIP/Target/ethernetif.c **** 
 265:LWIP/Target/ethernetif.c ****   memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 266:LWIP/Target/ethernetif.c **** 
 267:LWIP/Target/ethernetif.c ****   for(q = p; q != NULL; q = q->next)
 268:LWIP/Target/ethernetif.c ****   {
 269:LWIP/Target/ethernetif.c ****     if(i >= ETH_TX_DESC_CNT)
 270:LWIP/Target/ethernetif.c ****       return ERR_IF;
 271:LWIP/Target/ethernetif.c **** 
 272:LWIP/Target/ethernetif.c ****     Txbuffer[i].buffer = q->payload;
 273:LWIP/Target/ethernetif.c ****     Txbuffer[i].len = q->len;
 274:LWIP/Target/ethernetif.c **** 
 275:LWIP/Target/ethernetif.c ****     if(i>0)
 276:LWIP/Target/ethernetif.c ****     {
 277:LWIP/Target/ethernetif.c ****       Txbuffer[i-1].next = &Txbuffer[i];
 278:LWIP/Target/ethernetif.c ****     }
 279:LWIP/Target/ethernetif.c **** 
 280:LWIP/Target/ethernetif.c ****     if(q->next == NULL)
 281:LWIP/Target/ethernetif.c ****     {
 282:LWIP/Target/ethernetif.c ****       Txbuffer[i].next = NULL;
 283:LWIP/Target/ethernetif.c ****     }
 284:LWIP/Target/ethernetif.c **** 
 285:LWIP/Target/ethernetif.c ****     i++;
 286:LWIP/Target/ethernetif.c ****   }
 287:LWIP/Target/ethernetif.c **** 
 288:LWIP/Target/ethernetif.c ****   TxConfig.Length = p->tot_len;
 289:LWIP/Target/ethernetif.c ****   TxConfig.TxBuffer = Txbuffer;
 290:LWIP/Target/ethernetif.c ****   TxConfig.pData = p;
 291:LWIP/Target/ethernetif.c **** 
 292:LWIP/Target/ethernetif.c ****   HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 293:LWIP/Target/ethernetif.c **** 
 294:LWIP/Target/ethernetif.c ****   return errval;
 295:LWIP/Target/ethernetif.c **** }
 296:LWIP/Target/ethernetif.c **** 
 297:LWIP/Target/ethernetif.c **** /**
 298:LWIP/Target/ethernetif.c ****  * @brief Should allocate a pbuf and transfer the bytes of the incoming
 299:LWIP/Target/ethernetif.c ****  * packet from the interface into the pbuf.
 300:LWIP/Target/ethernetif.c ****  *
 301:LWIP/Target/ethernetif.c ****  * @param netif the lwip network interface structure for this ethernetif
 302:LWIP/Target/ethernetif.c ****  * @return a pbuf filled with the received packet (including MAC header)
 303:LWIP/Target/ethernetif.c ****  *         NULL on memory error
 304:LWIP/Target/ethernetif.c ****    */
 305:LWIP/Target/ethernetif.c **** static struct pbuf * low_level_input(struct netif *netif)
 306:LWIP/Target/ethernetif.c **** {
 307:LWIP/Target/ethernetif.c ****   struct pbuf *p = NULL;
 308:LWIP/Target/ethernetif.c **** 
 309:LWIP/Target/ethernetif.c ****   if(RxAllocStatus == RX_ALLOC_OK)
 310:LWIP/Target/ethernetif.c ****   {
 311:LWIP/Target/ethernetif.c ****     HAL_ETH_ReadData(&heth, (void **)&p);
 312:LWIP/Target/ethernetif.c ****   }
 313:LWIP/Target/ethernetif.c **** 
 314:LWIP/Target/ethernetif.c ****   return p;
 315:LWIP/Target/ethernetif.c **** }
 316:LWIP/Target/ethernetif.c **** 
ARM GAS  /tmp/ccJW5Vt8.s 			page 7


 317:LWIP/Target/ethernetif.c **** /**
 318:LWIP/Target/ethernetif.c ****  * @brief This function should be called when a packet is ready to be read
 319:LWIP/Target/ethernetif.c ****  * from the interface. It uses the function low_level_input() that
 320:LWIP/Target/ethernetif.c ****  * should handle the actual reception of bytes from the network
 321:LWIP/Target/ethernetif.c ****  * interface. Then the type of the received packet is determined and
 322:LWIP/Target/ethernetif.c ****  * the appropriate input function is called.
 323:LWIP/Target/ethernetif.c ****  *
 324:LWIP/Target/ethernetif.c ****  * @param netif the lwip network interface structure for this ethernetif
 325:LWIP/Target/ethernetif.c ****  */
 326:LWIP/Target/ethernetif.c **** void ethernetif_input(struct netif *netif)
 327:LWIP/Target/ethernetif.c **** {
 328:LWIP/Target/ethernetif.c ****   struct pbuf *p = NULL;
 329:LWIP/Target/ethernetif.c **** 
 330:LWIP/Target/ethernetif.c ****   do
 331:LWIP/Target/ethernetif.c ****   {
 332:LWIP/Target/ethernetif.c ****     p = low_level_input( netif );
 333:LWIP/Target/ethernetif.c ****     if (p != NULL)
 334:LWIP/Target/ethernetif.c ****     {
 335:LWIP/Target/ethernetif.c ****       if (netif->input( p, netif) != ERR_OK )
 336:LWIP/Target/ethernetif.c ****       {
 337:LWIP/Target/ethernetif.c ****         pbuf_free(p);
 338:LWIP/Target/ethernetif.c ****       }
 339:LWIP/Target/ethernetif.c ****     }
 340:LWIP/Target/ethernetif.c ****   } while(p!=NULL);
 341:LWIP/Target/ethernetif.c **** }
 342:LWIP/Target/ethernetif.c **** 
 343:LWIP/Target/ethernetif.c **** #if !LWIP_ARP
 344:LWIP/Target/ethernetif.c **** /**
 345:LWIP/Target/ethernetif.c ****  * This function has to be completed by user in case of ARP OFF.
 346:LWIP/Target/ethernetif.c ****  *
 347:LWIP/Target/ethernetif.c ****  * @param netif the lwip network interface structure for this ethernetif
 348:LWIP/Target/ethernetif.c ****  * @return ERR_OK if ...
 349:LWIP/Target/ethernetif.c ****  */
 350:LWIP/Target/ethernetif.c **** static err_t low_level_output_arp_off(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr
 351:LWIP/Target/ethernetif.c **** {
 352:LWIP/Target/ethernetif.c ****   err_t errval;
 353:LWIP/Target/ethernetif.c ****   errval = ERR_OK;
 354:LWIP/Target/ethernetif.c **** 
 355:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN 5 */
 356:LWIP/Target/ethernetif.c **** 
 357:LWIP/Target/ethernetif.c **** /* USER CODE END 5 */
 358:LWIP/Target/ethernetif.c **** 
 359:LWIP/Target/ethernetif.c ****   return errval;
 360:LWIP/Target/ethernetif.c **** 
 361:LWIP/Target/ethernetif.c **** }
 362:LWIP/Target/ethernetif.c **** #endif /* LWIP_ARP */
 363:LWIP/Target/ethernetif.c **** 
 364:LWIP/Target/ethernetif.c **** /**
 365:LWIP/Target/ethernetif.c ****  * @brief Should be called at the beginning of the program to set up the
 366:LWIP/Target/ethernetif.c ****  * network interface. It calls the function low_level_init() to do the
 367:LWIP/Target/ethernetif.c ****  * actual setup of the hardware.
 368:LWIP/Target/ethernetif.c ****  *
 369:LWIP/Target/ethernetif.c ****  * This function should be passed as a parameter to netif_add().
 370:LWIP/Target/ethernetif.c ****  *
 371:LWIP/Target/ethernetif.c ****  * @param netif the lwip network interface structure for this ethernetif
 372:LWIP/Target/ethernetif.c ****  * @return ERR_OK if the loopif is initialized
 373:LWIP/Target/ethernetif.c ****  *         ERR_MEM if private data couldn't be allocated
ARM GAS  /tmp/ccJW5Vt8.s 			page 8


 374:LWIP/Target/ethernetif.c ****  *         any other err_t on error
 375:LWIP/Target/ethernetif.c ****  */
 376:LWIP/Target/ethernetif.c **** err_t ethernetif_init(struct netif *netif)
 377:LWIP/Target/ethernetif.c **** {
 378:LWIP/Target/ethernetif.c ****   LWIP_ASSERT("netif != NULL", (netif != NULL));
 379:LWIP/Target/ethernetif.c **** 
 380:LWIP/Target/ethernetif.c **** #if LWIP_NETIF_HOSTNAME
 381:LWIP/Target/ethernetif.c ****   /* Initialize interface hostname */
 382:LWIP/Target/ethernetif.c ****   netif->hostname = "lwip";
 383:LWIP/Target/ethernetif.c **** #endif /* LWIP_NETIF_HOSTNAME */
 384:LWIP/Target/ethernetif.c **** 
 385:LWIP/Target/ethernetif.c ****   /*
 386:LWIP/Target/ethernetif.c ****    * Initialize the snmp variables and counters inside the struct netif.
 387:LWIP/Target/ethernetif.c ****    * The last argument should be replaced with your link speed, in units
 388:LWIP/Target/ethernetif.c ****    * of bits per second.
 389:LWIP/Target/ethernetif.c ****    */
 390:LWIP/Target/ethernetif.c ****   // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);
 391:LWIP/Target/ethernetif.c **** 
 392:LWIP/Target/ethernetif.c ****   netif->name[0] = IFNAME0;
 393:LWIP/Target/ethernetif.c ****   netif->name[1] = IFNAME1;
 394:LWIP/Target/ethernetif.c ****   /* We directly use etharp_output() here to save a function call.
 395:LWIP/Target/ethernetif.c ****    * You can instead declare your own function an call etharp_output()
 396:LWIP/Target/ethernetif.c ****    * from it if you have to do some checks before sending (e.g. if link
 397:LWIP/Target/ethernetif.c ****    * is available...) */
 398:LWIP/Target/ethernetif.c **** 
 399:LWIP/Target/ethernetif.c **** #if LWIP_IPV4
 400:LWIP/Target/ethernetif.c **** #if LWIP_ARP || LWIP_ETHERNET
 401:LWIP/Target/ethernetif.c **** #if LWIP_ARP
 402:LWIP/Target/ethernetif.c ****   netif->output = etharp_output;
 403:LWIP/Target/ethernetif.c **** #else
 404:LWIP/Target/ethernetif.c ****   /* The user should write its own code in low_level_output_arp_off function */
 405:LWIP/Target/ethernetif.c ****   netif->output = low_level_output_arp_off;
 406:LWIP/Target/ethernetif.c **** #endif /* LWIP_ARP */
 407:LWIP/Target/ethernetif.c **** #endif /* LWIP_ARP || LWIP_ETHERNET */
 408:LWIP/Target/ethernetif.c **** #endif /* LWIP_IPV4 */
 409:LWIP/Target/ethernetif.c **** 
 410:LWIP/Target/ethernetif.c **** #if LWIP_IPV6
 411:LWIP/Target/ethernetif.c ****   netif->output_ip6 = ethip6_output;
 412:LWIP/Target/ethernetif.c **** #endif /* LWIP_IPV6 */
 413:LWIP/Target/ethernetif.c **** 
 414:LWIP/Target/ethernetif.c ****   netif->linkoutput = low_level_output;
 415:LWIP/Target/ethernetif.c **** 
 416:LWIP/Target/ethernetif.c ****   /* initialize the hardware */
 417:LWIP/Target/ethernetif.c ****   low_level_init(netif);
 418:LWIP/Target/ethernetif.c **** 
 419:LWIP/Target/ethernetif.c ****   return ERR_OK;
 420:LWIP/Target/ethernetif.c **** }
 421:LWIP/Target/ethernetif.c **** 
 422:LWIP/Target/ethernetif.c **** /**
 423:LWIP/Target/ethernetif.c ****   * @brief  Custom Rx pbuf free callback
 424:LWIP/Target/ethernetif.c ****   * @param  pbuf: pbuf to be freed
 425:LWIP/Target/ethernetif.c ****   * @retval None
 426:LWIP/Target/ethernetif.c ****   */
 427:LWIP/Target/ethernetif.c **** void pbuf_free_custom(struct pbuf *p)
 428:LWIP/Target/ethernetif.c **** {
 429:LWIP/Target/ethernetif.c ****   struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 430:LWIP/Target/ethernetif.c ****   LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
ARM GAS  /tmp/ccJW5Vt8.s 			page 9


 431:LWIP/Target/ethernetif.c **** 
 432:LWIP/Target/ethernetif.c ****   /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
 433:LWIP/Target/ethernetif.c ****    * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */
 434:LWIP/Target/ethernetif.c **** 
 435:LWIP/Target/ethernetif.c ****   if (RxAllocStatus == RX_ALLOC_ERROR)
 436:LWIP/Target/ethernetif.c ****   {
 437:LWIP/Target/ethernetif.c ****     RxAllocStatus = RX_ALLOC_OK;
 438:LWIP/Target/ethernetif.c ****   }
 439:LWIP/Target/ethernetif.c **** }
 440:LWIP/Target/ethernetif.c **** 
 441:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN 6 */
 442:LWIP/Target/ethernetif.c **** 
 443:LWIP/Target/ethernetif.c **** /**
 444:LWIP/Target/ethernetif.c **** * @brief  Returns the current time in milliseconds
 445:LWIP/Target/ethernetif.c **** *         when LWIP_TIMERS == 1 and NO_SYS == 1
 446:LWIP/Target/ethernetif.c **** * @param  None
 447:LWIP/Target/ethernetif.c **** * @retval Time
 448:LWIP/Target/ethernetif.c **** */
 449:LWIP/Target/ethernetif.c **** u32_t sys_jiffies(void)
 450:LWIP/Target/ethernetif.c **** {
 451:LWIP/Target/ethernetif.c ****   return HAL_GetTick();
 452:LWIP/Target/ethernetif.c **** }
 453:LWIP/Target/ethernetif.c **** 
 454:LWIP/Target/ethernetif.c **** /**
 455:LWIP/Target/ethernetif.c **** * @brief  Returns the current time in milliseconds
 456:LWIP/Target/ethernetif.c **** *         when LWIP_TIMERS == 1 and NO_SYS == 1
 457:LWIP/Target/ethernetif.c **** * @param  None
 458:LWIP/Target/ethernetif.c **** * @retval Time
 459:LWIP/Target/ethernetif.c **** */
 460:LWIP/Target/ethernetif.c **** u32_t sys_now(void)
 461:LWIP/Target/ethernetif.c **** {
 462:LWIP/Target/ethernetif.c ****   return HAL_GetTick();
 463:LWIP/Target/ethernetif.c **** }
 464:LWIP/Target/ethernetif.c **** 
 465:LWIP/Target/ethernetif.c **** /* USER CODE END 6 */
 466:LWIP/Target/ethernetif.c **** 
 467:LWIP/Target/ethernetif.c **** /**
 468:LWIP/Target/ethernetif.c ****   * @brief  Initializes the ETH MSP.
 469:LWIP/Target/ethernetif.c ****   * @param  ethHandle: ETH handle
 470:LWIP/Target/ethernetif.c ****   * @retval None
 471:LWIP/Target/ethernetif.c ****   */
 472:LWIP/Target/ethernetif.c **** 
 473:LWIP/Target/ethernetif.c **** void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
 474:LWIP/Target/ethernetif.c **** {
 475:LWIP/Target/ethernetif.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 476:LWIP/Target/ethernetif.c ****   if(ethHandle->Instance==ETH)
 477:LWIP/Target/ethernetif.c ****   {
 478:LWIP/Target/ethernetif.c ****   /* USER CODE BEGIN ETH_MspInit 0 */
 479:LWIP/Target/ethernetif.c **** 
 480:LWIP/Target/ethernetif.c ****   /* USER CODE END ETH_MspInit 0 */
 481:LWIP/Target/ethernetif.c ****     /* Enable Peripheral clock */
 482:LWIP/Target/ethernetif.c ****     __HAL_RCC_ETH_CLK_ENABLE();
 483:LWIP/Target/ethernetif.c **** 
 484:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOC_CLK_ENABLE();
 485:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOA_CLK_ENABLE();
 486:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 487:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOG_CLK_ENABLE();
ARM GAS  /tmp/ccJW5Vt8.s 			page 10


 488:LWIP/Target/ethernetif.c ****     /**ETH GPIO Configuration
 489:LWIP/Target/ethernetif.c ****     PC1     ------> ETH_MDC
 490:LWIP/Target/ethernetif.c ****     PA1     ------> ETH_REF_CLK
 491:LWIP/Target/ethernetif.c ****     PA2     ------> ETH_MDIO
 492:LWIP/Target/ethernetif.c ****     PA7     ------> ETH_CRS_DV
 493:LWIP/Target/ethernetif.c ****     PC4     ------> ETH_RXD0
 494:LWIP/Target/ethernetif.c ****     PC5     ------> ETH_RXD1
 495:LWIP/Target/ethernetif.c ****     PB13     ------> ETH_TXD1
 496:LWIP/Target/ethernetif.c ****     PG11     ------> ETH_TX_EN
 497:LWIP/Target/ethernetif.c ****     PG13     ------> ETH_TXD0
 498:LWIP/Target/ethernetif.c ****     */
 499:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 500:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 501:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 502:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 503:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 504:LWIP/Target/ethernetif.c ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 505:LWIP/Target/ethernetif.c **** 
 506:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 507:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 508:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 509:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 510:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 511:LWIP/Target/ethernetif.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 512:LWIP/Target/ethernetif.c **** 
 513:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pin = GPIO_PIN_13;
 514:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 515:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 516:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 517:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 518:LWIP/Target/ethernetif.c ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 519:LWIP/Target/ethernetif.c **** 
 520:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 521:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 522:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 523:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 524:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 525:LWIP/Target/ethernetif.c ****     HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 526:LWIP/Target/ethernetif.c **** 
 527:LWIP/Target/ethernetif.c ****     /* Peripheral interrupt init */
 528:LWIP/Target/ethernetif.c ****     HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 529:LWIP/Target/ethernetif.c ****     HAL_NVIC_EnableIRQ(ETH_IRQn);
 530:LWIP/Target/ethernetif.c ****   /* USER CODE BEGIN ETH_MspInit 1 */
 531:LWIP/Target/ethernetif.c **** 
 532:LWIP/Target/ethernetif.c ****   /* USER CODE END ETH_MspInit 1 */
 533:LWIP/Target/ethernetif.c ****   }
 534:LWIP/Target/ethernetif.c **** }
 535:LWIP/Target/ethernetif.c **** 
 536:LWIP/Target/ethernetif.c **** void HAL_ETH_MspDeInit(ETH_HandleTypeDef* ethHandle)
 537:LWIP/Target/ethernetif.c **** {
 538:LWIP/Target/ethernetif.c ****   if(ethHandle->Instance==ETH)
 539:LWIP/Target/ethernetif.c ****   {
 540:LWIP/Target/ethernetif.c ****   /* USER CODE BEGIN ETH_MspDeInit 0 */
 541:LWIP/Target/ethernetif.c **** 
 542:LWIP/Target/ethernetif.c ****   /* USER CODE END ETH_MspDeInit 0 */
 543:LWIP/Target/ethernetif.c ****     /* Peripheral clock disable */
 544:LWIP/Target/ethernetif.c ****     __HAL_RCC_ETH_CLK_DISABLE();
ARM GAS  /tmp/ccJW5Vt8.s 			page 11


 545:LWIP/Target/ethernetif.c **** 
 546:LWIP/Target/ethernetif.c ****     /**ETH GPIO Configuration
 547:LWIP/Target/ethernetif.c ****     PC1     ------> ETH_MDC
 548:LWIP/Target/ethernetif.c ****     PA1     ------> ETH_REF_CLK
 549:LWIP/Target/ethernetif.c ****     PA2     ------> ETH_MDIO
 550:LWIP/Target/ethernetif.c ****     PA7     ------> ETH_CRS_DV
 551:LWIP/Target/ethernetif.c ****     PC4     ------> ETH_RXD0
 552:LWIP/Target/ethernetif.c ****     PC5     ------> ETH_RXD1
 553:LWIP/Target/ethernetif.c ****     PB13     ------> ETH_TXD1
 554:LWIP/Target/ethernetif.c ****     PG11     ------> ETH_TX_EN
 555:LWIP/Target/ethernetif.c ****     PG13     ------> ETH_TXD0
 556:LWIP/Target/ethernetif.c ****     */
 557:LWIP/Target/ethernetif.c ****     HAL_GPIO_DeInit(GPIOC, GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5);
 558:LWIP/Target/ethernetif.c **** 
 559:LWIP/Target/ethernetif.c ****     HAL_GPIO_DeInit(GPIOA, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7);
 560:LWIP/Target/ethernetif.c **** 
 561:LWIP/Target/ethernetif.c ****     HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13);
 562:LWIP/Target/ethernetif.c **** 
 563:LWIP/Target/ethernetif.c ****     HAL_GPIO_DeInit(GPIOG, GPIO_PIN_11|GPIO_PIN_13);
 564:LWIP/Target/ethernetif.c **** 
 565:LWIP/Target/ethernetif.c ****     /* Peripheral interrupt Deinit*/
 566:LWIP/Target/ethernetif.c ****     HAL_NVIC_DisableIRQ(ETH_IRQn);
 567:LWIP/Target/ethernetif.c **** 
 568:LWIP/Target/ethernetif.c ****   /* USER CODE BEGIN ETH_MspDeInit 1 */
 569:LWIP/Target/ethernetif.c **** 
 570:LWIP/Target/ethernetif.c ****   /* USER CODE END ETH_MspDeInit 1 */
 571:LWIP/Target/ethernetif.c ****   }
 572:LWIP/Target/ethernetif.c **** }
 573:LWIP/Target/ethernetif.c **** 
 574:LWIP/Target/ethernetif.c **** /*******************************************************************************
 575:LWIP/Target/ethernetif.c ****                        PHI IO Functions
 576:LWIP/Target/ethernetif.c **** *******************************************************************************/
 577:LWIP/Target/ethernetif.c **** /**
 578:LWIP/Target/ethernetif.c ****   * @brief  Initializes the MDIO interface GPIO and clocks.
 579:LWIP/Target/ethernetif.c ****   * @param  None
 580:LWIP/Target/ethernetif.c ****   * @retval 0 if OK, -1 if ERROR
 581:LWIP/Target/ethernetif.c ****   */
 582:LWIP/Target/ethernetif.c **** int32_t ETH_PHY_IO_Init(void)
 583:LWIP/Target/ethernetif.c **** {
 584:LWIP/Target/ethernetif.c ****   /* We assume that MDIO GPIO configuration is already done
 585:LWIP/Target/ethernetif.c ****      in the ETH_MspInit() else it should be done here
 586:LWIP/Target/ethernetif.c ****   */
 587:LWIP/Target/ethernetif.c **** 
 588:LWIP/Target/ethernetif.c ****   /* Configure the MDIO Clock */
 589:LWIP/Target/ethernetif.c ****   HAL_ETH_SetMDIOClockRange(&heth);
 590:LWIP/Target/ethernetif.c **** 
 591:LWIP/Target/ethernetif.c ****   return 0;
 592:LWIP/Target/ethernetif.c **** }
 593:LWIP/Target/ethernetif.c **** 
 594:LWIP/Target/ethernetif.c **** /**
 595:LWIP/Target/ethernetif.c ****   * @brief  De-Initializes the MDIO interface .
 596:LWIP/Target/ethernetif.c ****   * @param  None
 597:LWIP/Target/ethernetif.c ****   * @retval 0 if OK, -1 if ERROR
 598:LWIP/Target/ethernetif.c ****   */
 599:LWIP/Target/ethernetif.c **** int32_t ETH_PHY_IO_DeInit (void)
 600:LWIP/Target/ethernetif.c **** {
  28              		.loc 1 600 1 view -0
ARM GAS  /tmp/ccJW5Vt8.s 			page 12


  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 601:LWIP/Target/ethernetif.c ****   return 0;
  33              		.loc 1 601 3 view .LVU1
 602:LWIP/Target/ethernetif.c **** }
  34              		.loc 1 602 1 is_stmt 0 view .LVU2
  35 0000 0020     		movs	r0, #0
  36 0002 7047     		bx	lr
  37              		.cfi_endproc
  38              	.LFE178:
  40              		.section	.text.low_level_input,"ax",%progbits
  41              		.align	1
  42              		.syntax unified
  43              		.thumb
  44              		.thumb_func
  46              	low_level_input:
  47              	.LVL0:
  48              	.LFB169:
 306:LWIP/Target/ethernetif.c ****   struct pbuf *p = NULL;
  49              		.loc 1 306 1 is_stmt 1 view -0
  50              		.cfi_startproc
  51              		@ args = 0, pretend = 0, frame = 8
  52              		@ frame_needed = 0, uses_anonymous_args = 0
 306:LWIP/Target/ethernetif.c ****   struct pbuf *p = NULL;
  53              		.loc 1 306 1 is_stmt 0 view .LVU4
  54 0000 00B5     		push	{lr}
  55              	.LCFI0:
  56              		.cfi_def_cfa_offset 4
  57              		.cfi_offset 14, -4
  58 0002 83B0     		sub	sp, sp, #12
  59              	.LCFI1:
  60              		.cfi_def_cfa_offset 16
 307:LWIP/Target/ethernetif.c **** 
  61              		.loc 1 307 3 is_stmt 1 view .LVU5
 307:LWIP/Target/ethernetif.c **** 
  62              		.loc 1 307 16 is_stmt 0 view .LVU6
  63 0004 0023     		movs	r3, #0
  64 0006 0193     		str	r3, [sp, #4]
 309:LWIP/Target/ethernetif.c ****   {
  65              		.loc 1 309 3 is_stmt 1 view .LVU7
 309:LWIP/Target/ethernetif.c ****   {
  66              		.loc 1 309 20 is_stmt 0 view .LVU8
  67 0008 054B     		ldr	r3, .L6
  68 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 309:LWIP/Target/ethernetif.c ****   {
  69              		.loc 1 309 5 view .LVU9
  70 000c 1BB1     		cbz	r3, .L5
  71              	.LVL1:
  72              	.L3:
 314:LWIP/Target/ethernetif.c **** }
  73              		.loc 1 314 3 is_stmt 1 view .LVU10
 315:LWIP/Target/ethernetif.c **** 
  74              		.loc 1 315 1 is_stmt 0 view .LVU11
  75 000e 0198     		ldr	r0, [sp, #4]
  76 0010 03B0     		add	sp, sp, #12
ARM GAS  /tmp/ccJW5Vt8.s 			page 13


  77              	.LCFI2:
  78              		.cfi_remember_state
  79              		.cfi_def_cfa_offset 4
  80              		@ sp needed
  81 0012 5DF804FB 		ldr	pc, [sp], #4
  82              	.LVL2:
  83              	.L5:
  84              	.LCFI3:
  85              		.cfi_restore_state
 311:LWIP/Target/ethernetif.c ****   }
  86              		.loc 1 311 5 is_stmt 1 view .LVU12
  87 0016 01A9     		add	r1, sp, #4
  88 0018 0248     		ldr	r0, .L6+4
  89              	.LVL3:
 311:LWIP/Target/ethernetif.c ****   }
  90              		.loc 1 311 5 is_stmt 0 view .LVU13
  91 001a FFF7FEFF 		bl	HAL_ETH_ReadData
  92              	.LVL4:
  93 001e F6E7     		b	.L3
  94              	.L7:
  95              		.align	2
  96              	.L6:
  97 0020 00000000 		.word	.LANCHOR0
  98 0024 00000000 		.word	.LANCHOR1
  99              		.cfi_endproc
 100              	.LFE169:
 102              		.section	.text.low_level_output,"ax",%progbits
 103              		.align	1
 104              		.syntax unified
 105              		.thumb
 106              		.thumb_func
 108              	low_level_output:
 109              	.LVL5:
 110              	.LFB168:
 259:LWIP/Target/ethernetif.c ****   uint32_t i = 0U;
 111              		.loc 1 259 1 is_stmt 1 view -0
 112              		.cfi_startproc
 113              		@ args = 0, pretend = 0, frame = 48
 114              		@ frame_needed = 0, uses_anonymous_args = 0
 259:LWIP/Target/ethernetif.c ****   uint32_t i = 0U;
 115              		.loc 1 259 1 is_stmt 0 view .LVU15
 116 0000 30B5     		push	{r4, r5, lr}
 117              	.LCFI4:
 118              		.cfi_def_cfa_offset 12
 119              		.cfi_offset 4, -12
 120              		.cfi_offset 5, -8
 121              		.cfi_offset 14, -4
 122 0002 8DB0     		sub	sp, sp, #52
 123              	.LCFI5:
 124              		.cfi_def_cfa_offset 64
 125 0004 0C46     		mov	r4, r1
 260:LWIP/Target/ethernetif.c ****   struct pbuf *q = NULL;
 126              		.loc 1 260 3 is_stmt 1 view .LVU16
 127              	.LVL6:
 261:LWIP/Target/ethernetif.c ****   err_t errval = ERR_OK;
 128              		.loc 1 261 3 view .LVU17
 262:LWIP/Target/ethernetif.c ****   ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
ARM GAS  /tmp/ccJW5Vt8.s 			page 14


 129              		.loc 1 262 3 view .LVU18
 263:LWIP/Target/ethernetif.c **** 
 130              		.loc 1 263 3 view .LVU19
 263:LWIP/Target/ethernetif.c **** 
 131              		.loc 1 263 21 is_stmt 0 view .LVU20
 132 0006 3025     		movs	r5, #48
 133 0008 2A46     		mov	r2, r5
 134 000a 0021     		movs	r1, #0
 135              	.LVL7:
 263:LWIP/Target/ethernetif.c **** 
 136              		.loc 1 263 21 view .LVU21
 137 000c 6846     		mov	r0, sp
 138              	.LVL8:
 263:LWIP/Target/ethernetif.c **** 
 139              		.loc 1 263 21 view .LVU22
 140 000e FFF7FEFF 		bl	memset
 141              	.LVL9:
 265:LWIP/Target/ethernetif.c **** 
 142              		.loc 1 265 3 is_stmt 1 view .LVU23
 143 0012 2A46     		mov	r2, r5
 144 0014 0021     		movs	r1, #0
 145 0016 6846     		mov	r0, sp
 146 0018 FFF7FEFF 		bl	memset
 147              	.LVL10:
 267:LWIP/Target/ethernetif.c ****   {
 148              		.loc 1 267 3 view .LVU24
 267:LWIP/Target/ethernetif.c ****   {
 149              		.loc 1 267 9 is_stmt 0 view .LVU25
 150 001c 2246     		mov	r2, r4
 260:LWIP/Target/ethernetif.c ****   struct pbuf *q = NULL;
 151              		.loc 1 260 12 view .LVU26
 152 001e 0023     		movs	r3, #0
 267:LWIP/Target/ethernetif.c ****   {
 153              		.loc 1 267 3 view .LVU27
 154 0020 03E0     		b	.L9
 155              	.LVL11:
 156              	.L11:
 280:LWIP/Target/ethernetif.c ****     {
 157              		.loc 1 280 5 is_stmt 1 view .LVU28
 280:LWIP/Target/ethernetif.c ****     {
 158              		.loc 1 280 9 is_stmt 0 view .LVU29
 159 0022 1168     		ldr	r1, [r2]
 280:LWIP/Target/ethernetif.c ****     {
 160              		.loc 1 280 7 view .LVU30
 161 0024 E9B1     		cbz	r1, .L16
 162              	.L12:
 285:LWIP/Target/ethernetif.c ****   }
 163              		.loc 1 285 5 is_stmt 1 discriminator 2 view .LVU31
 285:LWIP/Target/ethernetif.c ****   }
 164              		.loc 1 285 6 is_stmt 0 discriminator 2 view .LVU32
 165 0026 0133     		adds	r3, r3, #1
 166              	.LVL12:
 267:LWIP/Target/ethernetif.c ****   {
 167              		.loc 1 267 25 is_stmt 1 discriminator 2 view .LVU33
 267:LWIP/Target/ethernetif.c ****   {
 168              		.loc 1 267 27 is_stmt 0 discriminator 2 view .LVU34
 169 0028 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccJW5Vt8.s 			page 15


 170              	.LVL13:
 171              	.L9:
 267:LWIP/Target/ethernetif.c ****   {
 172              		.loc 1 267 14 is_stmt 1 discriminator 1 view .LVU35
 267:LWIP/Target/ethernetif.c ****   {
 173              		.loc 1 267 3 is_stmt 0 discriminator 1 view .LVU36
 174 002a 1AB3     		cbz	r2, .L17
 269:LWIP/Target/ethernetif.c ****       return ERR_IF;
 175              		.loc 1 269 5 is_stmt 1 view .LVU37
 269:LWIP/Target/ethernetif.c ****       return ERR_IF;
 176              		.loc 1 269 7 is_stmt 0 view .LVU38
 177 002c 032B     		cmp	r3, #3
 178 002e 2DD8     		bhi	.L14
 272:LWIP/Target/ethernetif.c ****     Txbuffer[i].len = q->len;
 179              		.loc 1 272 5 is_stmt 1 view .LVU39
 272:LWIP/Target/ethernetif.c ****     Txbuffer[i].len = q->len;
 180              		.loc 1 272 27 is_stmt 0 view .LVU40
 181 0030 5168     		ldr	r1, [r2, #4]
 272:LWIP/Target/ethernetif.c ****     Txbuffer[i].len = q->len;
 182              		.loc 1 272 24 view .LVU41
 183 0032 03EB4300 		add	r0, r3, r3, lsl #1
 184 0036 0CAD     		add	r5, sp, #48
 185 0038 05EB8000 		add	r0, r5, r0, lsl #2
 186 003c 40F8301C 		str	r1, [r0, #-48]
 273:LWIP/Target/ethernetif.c **** 
 187              		.loc 1 273 5 is_stmt 1 view .LVU42
 273:LWIP/Target/ethernetif.c **** 
 188              		.loc 1 273 24 is_stmt 0 view .LVU43
 189 0040 5189     		ldrh	r1, [r2, #10]
 273:LWIP/Target/ethernetif.c **** 
 190              		.loc 1 273 21 view .LVU44
 191 0042 40F82C1C 		str	r1, [r0, #-44]
 275:LWIP/Target/ethernetif.c ****     {
 192              		.loc 1 275 5 is_stmt 1 view .LVU45
 275:LWIP/Target/ethernetif.c ****     {
 193              		.loc 1 275 7 is_stmt 0 view .LVU46
 194 0046 002B     		cmp	r3, #0
 195 0048 EBD0     		beq	.L11
 277:LWIP/Target/ethernetif.c ****     }
 196              		.loc 1 277 7 is_stmt 1 view .LVU47
 277:LWIP/Target/ethernetif.c ****     }
 197              		.loc 1 277 17 is_stmt 0 view .LVU48
 198 004a 581E     		subs	r0, r3, #1
 277:LWIP/Target/ethernetif.c ****     }
 199              		.loc 1 277 28 view .LVU49
 200 004c 03EB4301 		add	r1, r3, r3, lsl #1
 201 0050 0DEB8101 		add	r1, sp, r1, lsl #2
 277:LWIP/Target/ethernetif.c ****     }
 202              		.loc 1 277 26 view .LVU50
 203 0054 00EB4000 		add	r0, r0, r0, lsl #1
 204 0058 05EB8000 		add	r0, r5, r0, lsl #2
 205 005c 40F8281C 		str	r1, [r0, #-40]
 206 0060 DFE7     		b	.L11
 207              	.L16:
 282:LWIP/Target/ethernetif.c ****     }
 208              		.loc 1 282 7 is_stmt 1 view .LVU51
 282:LWIP/Target/ethernetif.c ****     }
ARM GAS  /tmp/ccJW5Vt8.s 			page 16


 209              		.loc 1 282 24 is_stmt 0 view .LVU52
 210 0062 03EB4301 		add	r1, r3, r3, lsl #1
 211 0066 0CA8     		add	r0, sp, #48
 212 0068 00EB8101 		add	r1, r0, r1, lsl #2
 213 006c 0020     		movs	r0, #0
 214 006e 41F8280C 		str	r0, [r1, #-40]
 215 0072 D8E7     		b	.L12
 216              	.L17:
 288:LWIP/Target/ethernetif.c ****   TxConfig.TxBuffer = Txbuffer;
 217              		.loc 1 288 3 is_stmt 1 view .LVU53
 288:LWIP/Target/ethernetif.c ****   TxConfig.TxBuffer = Txbuffer;
 218              		.loc 1 288 22 is_stmt 0 view .LVU54
 219 0074 2389     		ldrh	r3, [r4, #8]
 220              	.LVL14:
 288:LWIP/Target/ethernetif.c ****   TxConfig.TxBuffer = Txbuffer;
 221              		.loc 1 288 19 view .LVU55
 222 0076 0749     		ldr	r1, .L18
 223 0078 4B60     		str	r3, [r1, #4]
 289:LWIP/Target/ethernetif.c ****   TxConfig.pData = p;
 224              		.loc 1 289 3 is_stmt 1 view .LVU56
 289:LWIP/Target/ethernetif.c ****   TxConfig.pData = p;
 225              		.loc 1 289 21 is_stmt 0 view .LVU57
 226 007a C1F808D0 		str	sp, [r1, #8]
 290:LWIP/Target/ethernetif.c **** 
 227              		.loc 1 290 3 is_stmt 1 view .LVU58
 290:LWIP/Target/ethernetif.c **** 
 228              		.loc 1 290 18 is_stmt 0 view .LVU59
 229 007e 4C63     		str	r4, [r1, #52]
 292:LWIP/Target/ethernetif.c **** 
 230              		.loc 1 292 3 is_stmt 1 view .LVU60
 231 0080 1422     		movs	r2, #20
 232              	.LVL15:
 292:LWIP/Target/ethernetif.c **** 
 233              		.loc 1 292 3 is_stmt 0 view .LVU61
 234 0082 0548     		ldr	r0, .L18+4
 235 0084 FFF7FEFF 		bl	HAL_ETH_Transmit
 236              	.LVL16:
 294:LWIP/Target/ethernetif.c **** }
 237              		.loc 1 294 3 is_stmt 1 view .LVU62
 294:LWIP/Target/ethernetif.c **** }
 238              		.loc 1 294 10 is_stmt 0 view .LVU63
 239 0088 0020     		movs	r0, #0
 240 008a 01E0     		b	.L10
 241              	.LVL17:
 242              	.L14:
 270:LWIP/Target/ethernetif.c **** 
 243              		.loc 1 270 14 view .LVU64
 244 008c 6FF00B00 		mvn	r0, #11
 245              	.LVL18:
 246              	.L10:
 295:LWIP/Target/ethernetif.c **** 
 247              		.loc 1 295 1 view .LVU65
 248 0090 0DB0     		add	sp, sp, #52
 249              	.LCFI6:
 250              		.cfi_def_cfa_offset 12
 251              		@ sp needed
 252 0092 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/ccJW5Vt8.s 			page 17


 253              	.LVL19:
 254              	.L19:
 295:LWIP/Target/ethernetif.c **** 
 255              		.loc 1 295 1 view .LVU66
 256              		.align	2
 257              	.L18:
 258 0094 00000000 		.word	.LANCHOR2
 259 0098 00000000 		.word	.LANCHOR1
 260              		.cfi_endproc
 261              	.LFE168:
 263              		.section	.text.pbuf_free_custom,"ax",%progbits
 264              		.align	1
 265              		.global	pbuf_free_custom
 266              		.syntax unified
 267              		.thumb
 268              		.thumb_func
 270              	pbuf_free_custom:
 271              	.LVL20:
 272              	.LFB172:
 428:LWIP/Target/ethernetif.c ****   struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 273              		.loc 1 428 1 is_stmt 1 view -0
 274              		.cfi_startproc
 275              		@ args = 0, pretend = 0, frame = 0
 276              		@ frame_needed = 0, uses_anonymous_args = 0
 428:LWIP/Target/ethernetif.c ****   struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 277              		.loc 1 428 1 is_stmt 0 view .LVU68
 278 0000 08B5     		push	{r3, lr}
 279              	.LCFI7:
 280              		.cfi_def_cfa_offset 8
 281              		.cfi_offset 3, -8
 282              		.cfi_offset 14, -4
 283 0002 0146     		mov	r1, r0
 429:LWIP/Target/ethernetif.c ****   LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 284              		.loc 1 429 3 is_stmt 1 view .LVU69
 285              	.LVL21:
 430:LWIP/Target/ethernetif.c **** 
 286              		.loc 1 430 3 view .LVU70
 287 0004 0548     		ldr	r0, .L24
 288              	.LVL22:
 430:LWIP/Target/ethernetif.c **** 
 289              		.loc 1 430 3 is_stmt 0 view .LVU71
 290 0006 FFF7FEFF 		bl	memp_free_pool
 291              	.LVL23:
 435:LWIP/Target/ethernetif.c ****   {
 292              		.loc 1 435 3 is_stmt 1 view .LVU72
 435:LWIP/Target/ethernetif.c ****   {
 293              		.loc 1 435 21 is_stmt 0 view .LVU73
 294 000a 054B     		ldr	r3, .L24+4
 295 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 435:LWIP/Target/ethernetif.c ****   {
 296              		.loc 1 435 6 view .LVU74
 297 000e 012B     		cmp	r3, #1
 298 0010 00D0     		beq	.L23
 299              	.L20:
 439:LWIP/Target/ethernetif.c **** 
 300              		.loc 1 439 1 view .LVU75
 301 0012 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccJW5Vt8.s 			page 18


 302              	.L23:
 437:LWIP/Target/ethernetif.c ****   }
 303              		.loc 1 437 5 is_stmt 1 view .LVU76
 437:LWIP/Target/ethernetif.c ****   }
 304              		.loc 1 437 19 is_stmt 0 view .LVU77
 305 0014 024B     		ldr	r3, .L24+4
 306 0016 0022     		movs	r2, #0
 307 0018 1A70     		strb	r2, [r3]
 439:LWIP/Target/ethernetif.c **** 
 308              		.loc 1 439 1 view .LVU78
 309 001a FAE7     		b	.L20
 310              	.L25:
 311              		.align	2
 312              	.L24:
 313 001c 00000000 		.word	.LANCHOR3
 314 0020 00000000 		.word	.LANCHOR0
 315              		.cfi_endproc
 316              	.LFE172:
 318              		.section	.text.ETH_PHY_IO_GetTick,"ax",%progbits
 319              		.align	1
 320              		.global	ETH_PHY_IO_GetTick
 321              		.syntax unified
 322              		.thumb
 323              		.thumb_func
 325              	ETH_PHY_IO_GetTick:
 326              	.LFB181:
 603:LWIP/Target/ethernetif.c **** 
 604:LWIP/Target/ethernetif.c **** /**
 605:LWIP/Target/ethernetif.c ****   * @brief  Read a PHY register through the MDIO interface.
 606:LWIP/Target/ethernetif.c ****   * @param  DevAddr: PHY port address
 607:LWIP/Target/ethernetif.c ****   * @param  RegAddr: PHY register address
 608:LWIP/Target/ethernetif.c ****   * @param  pRegVal: pointer to hold the register value
 609:LWIP/Target/ethernetif.c ****   * @retval 0 if OK -1 if Error
 610:LWIP/Target/ethernetif.c ****   */
 611:LWIP/Target/ethernetif.c **** int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
 612:LWIP/Target/ethernetif.c **** {
 613:LWIP/Target/ethernetif.c ****   if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 614:LWIP/Target/ethernetif.c ****   {
 615:LWIP/Target/ethernetif.c ****     return -1;
 616:LWIP/Target/ethernetif.c ****   }
 617:LWIP/Target/ethernetif.c **** 
 618:LWIP/Target/ethernetif.c ****   return 0;
 619:LWIP/Target/ethernetif.c **** }
 620:LWIP/Target/ethernetif.c **** 
 621:LWIP/Target/ethernetif.c **** /**
 622:LWIP/Target/ethernetif.c ****   * @brief  Write a value to a PHY register through the MDIO interface.
 623:LWIP/Target/ethernetif.c ****   * @param  DevAddr: PHY port address
 624:LWIP/Target/ethernetif.c ****   * @param  RegAddr: PHY register address
 625:LWIP/Target/ethernetif.c ****   * @param  RegVal: Value to be written
 626:LWIP/Target/ethernetif.c ****   * @retval 0 if OK -1 if Error
 627:LWIP/Target/ethernetif.c ****   */
 628:LWIP/Target/ethernetif.c **** int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
 629:LWIP/Target/ethernetif.c **** {
 630:LWIP/Target/ethernetif.c ****   if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 631:LWIP/Target/ethernetif.c ****   {
 632:LWIP/Target/ethernetif.c ****     return -1;
 633:LWIP/Target/ethernetif.c ****   }
ARM GAS  /tmp/ccJW5Vt8.s 			page 19


 634:LWIP/Target/ethernetif.c **** 
 635:LWIP/Target/ethernetif.c ****   return 0;
 636:LWIP/Target/ethernetif.c **** }
 637:LWIP/Target/ethernetif.c **** 
 638:LWIP/Target/ethernetif.c **** /**
 639:LWIP/Target/ethernetif.c ****   * @brief  Get the time in millisecons used for internal PHY driver process.
 640:LWIP/Target/ethernetif.c ****   * @retval Time value
 641:LWIP/Target/ethernetif.c ****   */
 642:LWIP/Target/ethernetif.c **** int32_t ETH_PHY_IO_GetTick(void)
 643:LWIP/Target/ethernetif.c **** {
 327              		.loc 1 643 1 is_stmt 1 view -0
 328              		.cfi_startproc
 329              		@ args = 0, pretend = 0, frame = 0
 330              		@ frame_needed = 0, uses_anonymous_args = 0
 331 0000 08B5     		push	{r3, lr}
 332              	.LCFI8:
 333              		.cfi_def_cfa_offset 8
 334              		.cfi_offset 3, -8
 335              		.cfi_offset 14, -4
 644:LWIP/Target/ethernetif.c ****   return HAL_GetTick();
 336              		.loc 1 644 3 view .LVU80
 337              		.loc 1 644 10 is_stmt 0 view .LVU81
 338 0002 FFF7FEFF 		bl	HAL_GetTick
 339              	.LVL24:
 645:LWIP/Target/ethernetif.c **** }
 340              		.loc 1 645 1 view .LVU82
 341 0006 08BD     		pop	{r3, pc}
 342              		.cfi_endproc
 343              	.LFE181:
 345              		.section	.text.ETH_PHY_IO_Init,"ax",%progbits
 346              		.align	1
 347              		.global	ETH_PHY_IO_Init
 348              		.syntax unified
 349              		.thumb
 350              		.thumb_func
 352              	ETH_PHY_IO_Init:
 353              	.LFB177:
 583:LWIP/Target/ethernetif.c ****   /* We assume that MDIO GPIO configuration is already done
 354              		.loc 1 583 1 is_stmt 1 view -0
 355              		.cfi_startproc
 356              		@ args = 0, pretend = 0, frame = 0
 357              		@ frame_needed = 0, uses_anonymous_args = 0
 358 0000 08B5     		push	{r3, lr}
 359              	.LCFI9:
 360              		.cfi_def_cfa_offset 8
 361              		.cfi_offset 3, -8
 362              		.cfi_offset 14, -4
 589:LWIP/Target/ethernetif.c **** 
 363              		.loc 1 589 3 view .LVU84
 364 0002 0248     		ldr	r0, .L30
 365 0004 FFF7FEFF 		bl	HAL_ETH_SetMDIOClockRange
 366              	.LVL25:
 591:LWIP/Target/ethernetif.c **** }
 367              		.loc 1 591 3 view .LVU85
 592:LWIP/Target/ethernetif.c **** 
 368              		.loc 1 592 1 is_stmt 0 view .LVU86
 369 0008 0020     		movs	r0, #0
ARM GAS  /tmp/ccJW5Vt8.s 			page 20


 370 000a 08BD     		pop	{r3, pc}
 371              	.L31:
 372              		.align	2
 373              	.L30:
 374 000c 00000000 		.word	.LANCHOR1
 375              		.cfi_endproc
 376              	.LFE177:
 378              		.section	.text.ETH_PHY_IO_ReadReg,"ax",%progbits
 379              		.align	1
 380              		.global	ETH_PHY_IO_ReadReg
 381              		.syntax unified
 382              		.thumb
 383              		.thumb_func
 385              	ETH_PHY_IO_ReadReg:
 386              	.LVL26:
 387              	.LFB179:
 612:LWIP/Target/ethernetif.c ****   if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 388              		.loc 1 612 1 is_stmt 1 view -0
 389              		.cfi_startproc
 390              		@ args = 0, pretend = 0, frame = 0
 391              		@ frame_needed = 0, uses_anonymous_args = 0
 612:LWIP/Target/ethernetif.c ****   if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 392              		.loc 1 612 1 is_stmt 0 view .LVU88
 393 0000 08B5     		push	{r3, lr}
 394              	.LCFI10:
 395              		.cfi_def_cfa_offset 8
 396              		.cfi_offset 3, -8
 397              		.cfi_offset 14, -4
 398 0002 1346     		mov	r3, r2
 613:LWIP/Target/ethernetif.c ****   {
 399              		.loc 1 613 3 is_stmt 1 view .LVU89
 613:LWIP/Target/ethernetif.c ****   {
 400              		.loc 1 613 6 is_stmt 0 view .LVU90
 401 0004 0A46     		mov	r2, r1
 402              	.LVL27:
 613:LWIP/Target/ethernetif.c ****   {
 403              		.loc 1 613 6 view .LVU91
 404 0006 0146     		mov	r1, r0
 405              	.LVL28:
 613:LWIP/Target/ethernetif.c ****   {
 406              		.loc 1 613 6 view .LVU92
 407 0008 0348     		ldr	r0, .L37
 408              	.LVL29:
 613:LWIP/Target/ethernetif.c ****   {
 409              		.loc 1 613 6 view .LVU93
 410 000a FFF7FEFF 		bl	HAL_ETH_ReadPHYRegister
 411              	.LVL30:
 613:LWIP/Target/ethernetif.c ****   {
 412              		.loc 1 613 5 view .LVU94
 413 000e 00B9     		cbnz	r0, .L36
 414              	.L32:
 619:LWIP/Target/ethernetif.c **** 
 415              		.loc 1 619 1 view .LVU95
 416 0010 08BD     		pop	{r3, pc}
 417              	.L36:
 615:LWIP/Target/ethernetif.c ****   }
 418              		.loc 1 615 12 view .LVU96
ARM GAS  /tmp/ccJW5Vt8.s 			page 21


 419 0012 4FF0FF30 		mov	r0, #-1
 420 0016 FBE7     		b	.L32
 421              	.L38:
 422              		.align	2
 423              	.L37:
 424 0018 00000000 		.word	.LANCHOR1
 425              		.cfi_endproc
 426              	.LFE179:
 428              		.section	.text.ETH_PHY_IO_WriteReg,"ax",%progbits
 429              		.align	1
 430              		.global	ETH_PHY_IO_WriteReg
 431              		.syntax unified
 432              		.thumb
 433              		.thumb_func
 435              	ETH_PHY_IO_WriteReg:
 436              	.LVL31:
 437              	.LFB180:
 629:LWIP/Target/ethernetif.c ****   if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 438              		.loc 1 629 1 is_stmt 1 view -0
 439              		.cfi_startproc
 440              		@ args = 0, pretend = 0, frame = 0
 441              		@ frame_needed = 0, uses_anonymous_args = 0
 629:LWIP/Target/ethernetif.c ****   if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 442              		.loc 1 629 1 is_stmt 0 view .LVU98
 443 0000 08B5     		push	{r3, lr}
 444              	.LCFI11:
 445              		.cfi_def_cfa_offset 8
 446              		.cfi_offset 3, -8
 447              		.cfi_offset 14, -4
 448 0002 1346     		mov	r3, r2
 630:LWIP/Target/ethernetif.c ****   {
 449              		.loc 1 630 3 is_stmt 1 view .LVU99
 630:LWIP/Target/ethernetif.c ****   {
 450              		.loc 1 630 6 is_stmt 0 view .LVU100
 451 0004 0A46     		mov	r2, r1
 452              	.LVL32:
 630:LWIP/Target/ethernetif.c ****   {
 453              		.loc 1 630 6 view .LVU101
 454 0006 0146     		mov	r1, r0
 455              	.LVL33:
 630:LWIP/Target/ethernetif.c ****   {
 456              		.loc 1 630 6 view .LVU102
 457 0008 0348     		ldr	r0, .L44
 458              	.LVL34:
 630:LWIP/Target/ethernetif.c ****   {
 459              		.loc 1 630 6 view .LVU103
 460 000a FFF7FEFF 		bl	HAL_ETH_WritePHYRegister
 461              	.LVL35:
 630:LWIP/Target/ethernetif.c ****   {
 462              		.loc 1 630 5 view .LVU104
 463 000e 00B9     		cbnz	r0, .L43
 464              	.L39:
 636:LWIP/Target/ethernetif.c **** 
 465              		.loc 1 636 1 view .LVU105
 466 0010 08BD     		pop	{r3, pc}
 467              	.L43:
 632:LWIP/Target/ethernetif.c ****   }
ARM GAS  /tmp/ccJW5Vt8.s 			page 22


 468              		.loc 1 632 12 view .LVU106
 469 0012 4FF0FF30 		mov	r0, #-1
 470 0016 FBE7     		b	.L39
 471              	.L45:
 472              		.align	2
 473              	.L44:
 474 0018 00000000 		.word	.LANCHOR1
 475              		.cfi_endproc
 476              	.LFE180:
 478              		.section	.text.ethernetif_input,"ax",%progbits
 479              		.align	1
 480              		.global	ethernetif_input
 481              		.syntax unified
 482              		.thumb
 483              		.thumb_func
 485              	ethernetif_input:
 486              	.LVL36:
 487              	.LFB170:
 327:LWIP/Target/ethernetif.c ****   struct pbuf *p = NULL;
 488              		.loc 1 327 1 is_stmt 1 view -0
 489              		.cfi_startproc
 490              		@ args = 0, pretend = 0, frame = 0
 491              		@ frame_needed = 0, uses_anonymous_args = 0
 327:LWIP/Target/ethernetif.c ****   struct pbuf *p = NULL;
 492              		.loc 1 327 1 is_stmt 0 view .LVU108
 493 0000 38B5     		push	{r3, r4, r5, lr}
 494              	.LCFI12:
 495              		.cfi_def_cfa_offset 16
 496              		.cfi_offset 3, -16
 497              		.cfi_offset 4, -12
 498              		.cfi_offset 5, -8
 499              		.cfi_offset 14, -4
 500 0002 0546     		mov	r5, r0
 328:LWIP/Target/ethernetif.c **** 
 501              		.loc 1 328 3 is_stmt 1 view .LVU109
 502              	.LVL37:
 328:LWIP/Target/ethernetif.c **** 
 503              		.loc 1 328 3 is_stmt 0 view .LVU110
 504 0004 00E0     		b	.L48
 505              	.LVL38:
 506              	.L47:
 340:LWIP/Target/ethernetif.c **** }
 507              		.loc 1 340 10 is_stmt 1 view .LVU111
 340:LWIP/Target/ethernetif.c **** }
 508              		.loc 1 340 3 is_stmt 0 view .LVU112
 509 0006 74B1     		cbz	r4, .L50
 510              	.LVL39:
 511              	.L48:
 330:LWIP/Target/ethernetif.c ****   {
 512              		.loc 1 330 3 is_stmt 1 view .LVU113
 332:LWIP/Target/ethernetif.c ****     if (p != NULL)
 513              		.loc 1 332 5 view .LVU114
 332:LWIP/Target/ethernetif.c ****     if (p != NULL)
 514              		.loc 1 332 9 is_stmt 0 view .LVU115
 515 0008 2846     		mov	r0, r5
 516 000a FFF7FEFF 		bl	low_level_input
 517              	.LVL40:
ARM GAS  /tmp/ccJW5Vt8.s 			page 23


 333:LWIP/Target/ethernetif.c ****     {
 518              		.loc 1 333 5 is_stmt 1 view .LVU116
 333:LWIP/Target/ethernetif.c ****     {
 519              		.loc 1 333 8 is_stmt 0 view .LVU117
 520 000e 0446     		mov	r4, r0
 521 0010 0028     		cmp	r0, #0
 522 0012 F8D0     		beq	.L47
 335:LWIP/Target/ethernetif.c ****       {
 523              		.loc 1 335 7 is_stmt 1 view .LVU118
 335:LWIP/Target/ethernetif.c ****       {
 524              		.loc 1 335 16 is_stmt 0 view .LVU119
 525 0014 2B69     		ldr	r3, [r5, #16]
 335:LWIP/Target/ethernetif.c ****       {
 526              		.loc 1 335 11 view .LVU120
 527 0016 2946     		mov	r1, r5
 528 0018 9847     		blx	r3
 529              	.LVL41:
 335:LWIP/Target/ethernetif.c ****       {
 530              		.loc 1 335 10 view .LVU121
 531 001a 0028     		cmp	r0, #0
 532 001c F3D0     		beq	.L47
 337:LWIP/Target/ethernetif.c ****       }
 533              		.loc 1 337 9 is_stmt 1 view .LVU122
 534 001e 2046     		mov	r0, r4
 535 0020 FFF7FEFF 		bl	pbuf_free
 536              	.LVL42:
 537 0024 EFE7     		b	.L47
 538              	.L50:
 341:LWIP/Target/ethernetif.c **** 
 539              		.loc 1 341 1 is_stmt 0 view .LVU123
 540 0026 38BD     		pop	{r3, r4, r5, pc}
 341:LWIP/Target/ethernetif.c **** 
 541              		.loc 1 341 1 view .LVU124
 542              		.cfi_endproc
 543              	.LFE170:
 545              		.section	.text.sys_jiffies,"ax",%progbits
 546              		.align	1
 547              		.global	sys_jiffies
 548              		.syntax unified
 549              		.thumb
 550              		.thumb_func
 552              	sys_jiffies:
 553              	.LFB173:
 450:LWIP/Target/ethernetif.c ****   return HAL_GetTick();
 554              		.loc 1 450 1 is_stmt 1 view -0
 555              		.cfi_startproc
 556              		@ args = 0, pretend = 0, frame = 0
 557              		@ frame_needed = 0, uses_anonymous_args = 0
 558 0000 08B5     		push	{r3, lr}
 559              	.LCFI13:
 560              		.cfi_def_cfa_offset 8
 561              		.cfi_offset 3, -8
 562              		.cfi_offset 14, -4
 451:LWIP/Target/ethernetif.c **** }
 563              		.loc 1 451 3 view .LVU126
 451:LWIP/Target/ethernetif.c **** }
 564              		.loc 1 451 10 is_stmt 0 view .LVU127
ARM GAS  /tmp/ccJW5Vt8.s 			page 24


 565 0002 FFF7FEFF 		bl	HAL_GetTick
 566              	.LVL43:
 452:LWIP/Target/ethernetif.c **** 
 567              		.loc 1 452 1 view .LVU128
 568 0006 08BD     		pop	{r3, pc}
 569              		.cfi_endproc
 570              	.LFE173:
 572              		.section	.text.sys_now,"ax",%progbits
 573              		.align	1
 574              		.global	sys_now
 575              		.syntax unified
 576              		.thumb
 577              		.thumb_func
 579              	sys_now:
 580              	.LFB174:
 461:LWIP/Target/ethernetif.c ****   return HAL_GetTick();
 581              		.loc 1 461 1 is_stmt 1 view -0
 582              		.cfi_startproc
 583              		@ args = 0, pretend = 0, frame = 0
 584              		@ frame_needed = 0, uses_anonymous_args = 0
 585 0000 08B5     		push	{r3, lr}
 586              	.LCFI14:
 587              		.cfi_def_cfa_offset 8
 588              		.cfi_offset 3, -8
 589              		.cfi_offset 14, -4
 462:LWIP/Target/ethernetif.c **** }
 590              		.loc 1 462 3 view .LVU130
 462:LWIP/Target/ethernetif.c **** }
 591              		.loc 1 462 10 is_stmt 0 view .LVU131
 592 0002 FFF7FEFF 		bl	HAL_GetTick
 593              	.LVL44:
 463:LWIP/Target/ethernetif.c **** 
 594              		.loc 1 463 1 view .LVU132
 595 0006 08BD     		pop	{r3, pc}
 596              		.cfi_endproc
 597              	.LFE174:
 599              		.section	.text.HAL_ETH_MspInit,"ax",%progbits
 600              		.align	1
 601              		.global	HAL_ETH_MspInit
 602              		.syntax unified
 603              		.thumb
 604              		.thumb_func
 606              	HAL_ETH_MspInit:
 607              	.LVL45:
 608              	.LFB175:
 474:LWIP/Target/ethernetif.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 609              		.loc 1 474 1 is_stmt 1 view -0
 610              		.cfi_startproc
 611              		@ args = 0, pretend = 0, frame = 48
 612              		@ frame_needed = 0, uses_anonymous_args = 0
 474:LWIP/Target/ethernetif.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
 613              		.loc 1 474 1 is_stmt 0 view .LVU134
 614 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 615              	.LCFI15:
 616              		.cfi_def_cfa_offset 20
 617              		.cfi_offset 4, -20
 618              		.cfi_offset 5, -16
ARM GAS  /tmp/ccJW5Vt8.s 			page 25


 619              		.cfi_offset 6, -12
 620              		.cfi_offset 7, -8
 621              		.cfi_offset 14, -4
 622 0002 8DB0     		sub	sp, sp, #52
 623              	.LCFI16:
 624              		.cfi_def_cfa_offset 72
 475:LWIP/Target/ethernetif.c ****   if(ethHandle->Instance==ETH)
 625              		.loc 1 475 3 is_stmt 1 view .LVU135
 475:LWIP/Target/ethernetif.c ****   if(ethHandle->Instance==ETH)
 626              		.loc 1 475 20 is_stmt 0 view .LVU136
 627 0004 0023     		movs	r3, #0
 628 0006 0793     		str	r3, [sp, #28]
 629 0008 0893     		str	r3, [sp, #32]
 630 000a 0993     		str	r3, [sp, #36]
 631 000c 0A93     		str	r3, [sp, #40]
 632 000e 0B93     		str	r3, [sp, #44]
 476:LWIP/Target/ethernetif.c ****   {
 633              		.loc 1 476 3 is_stmt 1 view .LVU137
 476:LWIP/Target/ethernetif.c ****   {
 634              		.loc 1 476 15 is_stmt 0 view .LVU138
 635 0010 0268     		ldr	r2, [r0]
 476:LWIP/Target/ethernetif.c ****   {
 636              		.loc 1 476 5 view .LVU139
 637 0012 3E4B     		ldr	r3, .L59
 638 0014 9A42     		cmp	r2, r3
 639 0016 01D0     		beq	.L58
 640              	.LVL46:
 641              	.L55:
 534:LWIP/Target/ethernetif.c **** 
 642              		.loc 1 534 1 view .LVU140
 643 0018 0DB0     		add	sp, sp, #52
 644              	.LCFI17:
 645              		.cfi_remember_state
 646              		.cfi_def_cfa_offset 20
 647              		@ sp needed
 648 001a F0BD     		pop	{r4, r5, r6, r7, pc}
 649              	.LVL47:
 650              	.L58:
 651              	.LCFI18:
 652              		.cfi_restore_state
 482:LWIP/Target/ethernetif.c **** 
 653              		.loc 1 482 5 is_stmt 1 view .LVU141
 482:LWIP/Target/ethernetif.c **** 
 654              		.loc 1 482 5 view .LVU142
 655              	.LBB16:
 482:LWIP/Target/ethernetif.c **** 
 656              		.loc 1 482 5 view .LVU143
 482:LWIP/Target/ethernetif.c **** 
 657              		.loc 1 482 5 view .LVU144
 658 001c A3F59043 		sub	r3, r3, #18432
 659 0020 1A6B     		ldr	r2, [r3, #48]
 660 0022 42F00072 		orr	r2, r2, #33554432
 661 0026 1A63     		str	r2, [r3, #48]
 482:LWIP/Target/ethernetif.c **** 
 662              		.loc 1 482 5 view .LVU145
 663 0028 1A6B     		ldr	r2, [r3, #48]
 664 002a 02F00072 		and	r2, r2, #33554432
ARM GAS  /tmp/ccJW5Vt8.s 			page 26


 665 002e 0092     		str	r2, [sp]
 482:LWIP/Target/ethernetif.c **** 
 666              		.loc 1 482 5 view .LVU146
 667 0030 009A     		ldr	r2, [sp]
 668              	.LBE16:
 482:LWIP/Target/ethernetif.c **** 
 669              		.loc 1 482 5 view .LVU147
 482:LWIP/Target/ethernetif.c **** 
 670              		.loc 1 482 5 view .LVU148
 671              	.LBB17:
 482:LWIP/Target/ethernetif.c **** 
 672              		.loc 1 482 5 view .LVU149
 482:LWIP/Target/ethernetif.c **** 
 673              		.loc 1 482 5 view .LVU150
 674 0032 1A6B     		ldr	r2, [r3, #48]
 675 0034 42F08062 		orr	r2, r2, #67108864
 676 0038 1A63     		str	r2, [r3, #48]
 482:LWIP/Target/ethernetif.c **** 
 677              		.loc 1 482 5 view .LVU151
 678 003a 1A6B     		ldr	r2, [r3, #48]
 679 003c 02F08062 		and	r2, r2, #67108864
 680 0040 0192     		str	r2, [sp, #4]
 482:LWIP/Target/ethernetif.c **** 
 681              		.loc 1 482 5 view .LVU152
 682 0042 019A     		ldr	r2, [sp, #4]
 683              	.LBE17:
 482:LWIP/Target/ethernetif.c **** 
 684              		.loc 1 482 5 view .LVU153
 482:LWIP/Target/ethernetif.c **** 
 685              		.loc 1 482 5 view .LVU154
 686              	.LBB18:
 482:LWIP/Target/ethernetif.c **** 
 687              		.loc 1 482 5 view .LVU155
 482:LWIP/Target/ethernetif.c **** 
 688              		.loc 1 482 5 view .LVU156
 689 0044 1A6B     		ldr	r2, [r3, #48]
 690 0046 42F00062 		orr	r2, r2, #134217728
 691 004a 1A63     		str	r2, [r3, #48]
 482:LWIP/Target/ethernetif.c **** 
 692              		.loc 1 482 5 view .LVU157
 693 004c 1A6B     		ldr	r2, [r3, #48]
 694 004e 02F00062 		and	r2, r2, #134217728
 695 0052 0292     		str	r2, [sp, #8]
 482:LWIP/Target/ethernetif.c **** 
 696              		.loc 1 482 5 view .LVU158
 697 0054 029A     		ldr	r2, [sp, #8]
 698              	.LBE18:
 482:LWIP/Target/ethernetif.c **** 
 699              		.loc 1 482 5 view .LVU159
 482:LWIP/Target/ethernetif.c **** 
 700              		.loc 1 482 5 view .LVU160
 484:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOA_CLK_ENABLE();
 701              		.loc 1 484 5 view .LVU161
 702              	.LBB19:
 484:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOA_CLK_ENABLE();
 703              		.loc 1 484 5 view .LVU162
 484:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOA_CLK_ENABLE();
ARM GAS  /tmp/ccJW5Vt8.s 			page 27


 704              		.loc 1 484 5 view .LVU163
 705 0056 1A6B     		ldr	r2, [r3, #48]
 706 0058 42F00402 		orr	r2, r2, #4
 707 005c 1A63     		str	r2, [r3, #48]
 484:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOA_CLK_ENABLE();
 708              		.loc 1 484 5 view .LVU164
 709 005e 1A6B     		ldr	r2, [r3, #48]
 710 0060 02F00402 		and	r2, r2, #4
 711 0064 0392     		str	r2, [sp, #12]
 484:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOA_CLK_ENABLE();
 712              		.loc 1 484 5 view .LVU165
 713 0066 039A     		ldr	r2, [sp, #12]
 714              	.LBE19:
 484:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOA_CLK_ENABLE();
 715              		.loc 1 484 5 view .LVU166
 485:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 716              		.loc 1 485 5 view .LVU167
 717              	.LBB20:
 485:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 718              		.loc 1 485 5 view .LVU168
 485:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 719              		.loc 1 485 5 view .LVU169
 720 0068 1A6B     		ldr	r2, [r3, #48]
 721 006a 42F00102 		orr	r2, r2, #1
 722 006e 1A63     		str	r2, [r3, #48]
 485:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 723              		.loc 1 485 5 view .LVU170
 724 0070 1A6B     		ldr	r2, [r3, #48]
 725 0072 02F00102 		and	r2, r2, #1
 726 0076 0492     		str	r2, [sp, #16]
 485:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 727              		.loc 1 485 5 view .LVU171
 728 0078 049A     		ldr	r2, [sp, #16]
 729              	.LBE20:
 485:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOB_CLK_ENABLE();
 730              		.loc 1 485 5 view .LVU172
 486:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOG_CLK_ENABLE();
 731              		.loc 1 486 5 view .LVU173
 732              	.LBB21:
 486:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOG_CLK_ENABLE();
 733              		.loc 1 486 5 view .LVU174
 486:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOG_CLK_ENABLE();
 734              		.loc 1 486 5 view .LVU175
 735 007a 1A6B     		ldr	r2, [r3, #48]
 736 007c 42F00202 		orr	r2, r2, #2
 737 0080 1A63     		str	r2, [r3, #48]
 486:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOG_CLK_ENABLE();
 738              		.loc 1 486 5 view .LVU176
 739 0082 1A6B     		ldr	r2, [r3, #48]
 740 0084 02F00202 		and	r2, r2, #2
 741 0088 0592     		str	r2, [sp, #20]
 486:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOG_CLK_ENABLE();
 742              		.loc 1 486 5 view .LVU177
 743 008a 059A     		ldr	r2, [sp, #20]
 744              	.LBE21:
 486:LWIP/Target/ethernetif.c ****     __HAL_RCC_GPIOG_CLK_ENABLE();
 745              		.loc 1 486 5 view .LVU178
ARM GAS  /tmp/ccJW5Vt8.s 			page 28


 487:LWIP/Target/ethernetif.c ****     /**ETH GPIO Configuration
 746              		.loc 1 487 5 view .LVU179
 747              	.LBB22:
 487:LWIP/Target/ethernetif.c ****     /**ETH GPIO Configuration
 748              		.loc 1 487 5 view .LVU180
 487:LWIP/Target/ethernetif.c ****     /**ETH GPIO Configuration
 749              		.loc 1 487 5 view .LVU181
 750 008c 1A6B     		ldr	r2, [r3, #48]
 751 008e 42F04002 		orr	r2, r2, #64
 752 0092 1A63     		str	r2, [r3, #48]
 487:LWIP/Target/ethernetif.c ****     /**ETH GPIO Configuration
 753              		.loc 1 487 5 view .LVU182
 754 0094 1B6B     		ldr	r3, [r3, #48]
 755 0096 03F04003 		and	r3, r3, #64
 756 009a 0693     		str	r3, [sp, #24]
 487:LWIP/Target/ethernetif.c ****     /**ETH GPIO Configuration
 757              		.loc 1 487 5 view .LVU183
 758 009c 069B     		ldr	r3, [sp, #24]
 759              	.LBE22:
 487:LWIP/Target/ethernetif.c ****     /**ETH GPIO Configuration
 760              		.loc 1 487 5 view .LVU184
 499:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 761              		.loc 1 499 5 view .LVU185
 499:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 762              		.loc 1 499 25 is_stmt 0 view .LVU186
 763 009e 3223     		movs	r3, #50
 764 00a0 0793     		str	r3, [sp, #28]
 500:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 765              		.loc 1 500 5 is_stmt 1 view .LVU187
 500:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 766              		.loc 1 500 26 is_stmt 0 view .LVU188
 767 00a2 0227     		movs	r7, #2
 768 00a4 0897     		str	r7, [sp, #32]
 501:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 769              		.loc 1 501 5 is_stmt 1 view .LVU189
 502:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 770              		.loc 1 502 5 view .LVU190
 502:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 771              		.loc 1 502 27 is_stmt 0 view .LVU191
 772 00a6 0326     		movs	r6, #3
 773 00a8 0A96     		str	r6, [sp, #40]
 503:LWIP/Target/ethernetif.c ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 774              		.loc 1 503 5 is_stmt 1 view .LVU192
 503:LWIP/Target/ethernetif.c ****     HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 775              		.loc 1 503 31 is_stmt 0 view .LVU193
 776 00aa 0B25     		movs	r5, #11
 777 00ac 0B95     		str	r5, [sp, #44]
 504:LWIP/Target/ethernetif.c **** 
 778              		.loc 1 504 5 is_stmt 1 view .LVU194
 779 00ae 07A9     		add	r1, sp, #28
 780 00b0 1748     		ldr	r0, .L59+4
 781              	.LVL48:
 504:LWIP/Target/ethernetif.c **** 
 782              		.loc 1 504 5 is_stmt 0 view .LVU195
 783 00b2 FFF7FEFF 		bl	HAL_GPIO_Init
 784              	.LVL49:
 506:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
ARM GAS  /tmp/ccJW5Vt8.s 			page 29


 785              		.loc 1 506 5 is_stmt 1 view .LVU196
 506:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 786              		.loc 1 506 25 is_stmt 0 view .LVU197
 787 00b6 8623     		movs	r3, #134
 788 00b8 0793     		str	r3, [sp, #28]
 507:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 789              		.loc 1 507 5 is_stmt 1 view .LVU198
 507:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 790              		.loc 1 507 26 is_stmt 0 view .LVU199
 791 00ba 0897     		str	r7, [sp, #32]
 508:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 792              		.loc 1 508 5 is_stmt 1 view .LVU200
 508:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 793              		.loc 1 508 26 is_stmt 0 view .LVU201
 794 00bc 0024     		movs	r4, #0
 795 00be 0994     		str	r4, [sp, #36]
 509:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 796              		.loc 1 509 5 is_stmt 1 view .LVU202
 509:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 797              		.loc 1 509 27 is_stmt 0 view .LVU203
 798 00c0 0A96     		str	r6, [sp, #40]
 510:LWIP/Target/ethernetif.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 799              		.loc 1 510 5 is_stmt 1 view .LVU204
 510:LWIP/Target/ethernetif.c ****     HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800              		.loc 1 510 31 is_stmt 0 view .LVU205
 801 00c2 0B95     		str	r5, [sp, #44]
 511:LWIP/Target/ethernetif.c **** 
 802              		.loc 1 511 5 is_stmt 1 view .LVU206
 803 00c4 07A9     		add	r1, sp, #28
 804 00c6 1348     		ldr	r0, .L59+8
 805 00c8 FFF7FEFF 		bl	HAL_GPIO_Init
 806              	.LVL50:
 513:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 807              		.loc 1 513 5 view .LVU207
 513:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 808              		.loc 1 513 25 is_stmt 0 view .LVU208
 809 00cc 4FF40053 		mov	r3, #8192
 810 00d0 0793     		str	r3, [sp, #28]
 514:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 811              		.loc 1 514 5 is_stmt 1 view .LVU209
 514:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 812              		.loc 1 514 26 is_stmt 0 view .LVU210
 813 00d2 0897     		str	r7, [sp, #32]
 515:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 814              		.loc 1 515 5 is_stmt 1 view .LVU211
 515:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 815              		.loc 1 515 26 is_stmt 0 view .LVU212
 816 00d4 0994     		str	r4, [sp, #36]
 516:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 817              		.loc 1 516 5 is_stmt 1 view .LVU213
 516:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 818              		.loc 1 516 27 is_stmt 0 view .LVU214
 819 00d6 0A96     		str	r6, [sp, #40]
 517:LWIP/Target/ethernetif.c ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 820              		.loc 1 517 5 is_stmt 1 view .LVU215
 517:LWIP/Target/ethernetif.c ****     HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 821              		.loc 1 517 31 is_stmt 0 view .LVU216
ARM GAS  /tmp/ccJW5Vt8.s 			page 30


 822 00d8 0B95     		str	r5, [sp, #44]
 518:LWIP/Target/ethernetif.c **** 
 823              		.loc 1 518 5 is_stmt 1 view .LVU217
 824 00da 07A9     		add	r1, sp, #28
 825 00dc 0E48     		ldr	r0, .L59+12
 826 00de FFF7FEFF 		bl	HAL_GPIO_Init
 827              	.LVL51:
 520:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 828              		.loc 1 520 5 view .LVU218
 520:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 829              		.loc 1 520 25 is_stmt 0 view .LVU219
 830 00e2 4FF42053 		mov	r3, #10240
 831 00e6 0793     		str	r3, [sp, #28]
 521:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 832              		.loc 1 521 5 is_stmt 1 view .LVU220
 521:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Pull = GPIO_NOPULL;
 833              		.loc 1 521 26 is_stmt 0 view .LVU221
 834 00e8 0897     		str	r7, [sp, #32]
 522:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 835              		.loc 1 522 5 is_stmt 1 view .LVU222
 522:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 836              		.loc 1 522 26 is_stmt 0 view .LVU223
 837 00ea 0994     		str	r4, [sp, #36]
 523:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 838              		.loc 1 523 5 is_stmt 1 view .LVU224
 523:LWIP/Target/ethernetif.c ****     GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 839              		.loc 1 523 27 is_stmt 0 view .LVU225
 840 00ec 0A96     		str	r6, [sp, #40]
 524:LWIP/Target/ethernetif.c ****     HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 841              		.loc 1 524 5 is_stmt 1 view .LVU226
 524:LWIP/Target/ethernetif.c ****     HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 842              		.loc 1 524 31 is_stmt 0 view .LVU227
 843 00ee 0B95     		str	r5, [sp, #44]
 525:LWIP/Target/ethernetif.c **** 
 844              		.loc 1 525 5 is_stmt 1 view .LVU228
 845 00f0 07A9     		add	r1, sp, #28
 846 00f2 0A48     		ldr	r0, .L59+16
 847 00f4 FFF7FEFF 		bl	HAL_GPIO_Init
 848              	.LVL52:
 528:LWIP/Target/ethernetif.c ****     HAL_NVIC_EnableIRQ(ETH_IRQn);
 849              		.loc 1 528 5 view .LVU229
 850 00f8 2246     		mov	r2, r4
 851 00fa 2146     		mov	r1, r4
 852 00fc 3D20     		movs	r0, #61
 853 00fe FFF7FEFF 		bl	HAL_NVIC_SetPriority
 854              	.LVL53:
 529:LWIP/Target/ethernetif.c ****   /* USER CODE BEGIN ETH_MspInit 1 */
 855              		.loc 1 529 5 view .LVU230
 856 0102 3D20     		movs	r0, #61
 857 0104 FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 858              	.LVL54:
 534:LWIP/Target/ethernetif.c **** 
 859              		.loc 1 534 1 is_stmt 0 view .LVU231
 860 0108 86E7     		b	.L55
 861              	.L60:
 862 010a 00BF     		.align	2
 863              	.L59:
ARM GAS  /tmp/ccJW5Vt8.s 			page 31


 864 010c 00800240 		.word	1073905664
 865 0110 00080240 		.word	1073874944
 866 0114 00000240 		.word	1073872896
 867 0118 00040240 		.word	1073873920
 868 011c 00180240 		.word	1073879040
 869              		.cfi_endproc
 870              	.LFE175:
 872              		.section	.text.HAL_ETH_MspDeInit,"ax",%progbits
 873              		.align	1
 874              		.global	HAL_ETH_MspDeInit
 875              		.syntax unified
 876              		.thumb
 877              		.thumb_func
 879              	HAL_ETH_MspDeInit:
 880              	.LVL55:
 881              	.LFB176:
 537:LWIP/Target/ethernetif.c ****   if(ethHandle->Instance==ETH)
 882              		.loc 1 537 1 is_stmt 1 view -0
 883              		.cfi_startproc
 884              		@ args = 0, pretend = 0, frame = 0
 885              		@ frame_needed = 0, uses_anonymous_args = 0
 537:LWIP/Target/ethernetif.c ****   if(ethHandle->Instance==ETH)
 886              		.loc 1 537 1 is_stmt 0 view .LVU233
 887 0000 08B5     		push	{r3, lr}
 888              	.LCFI19:
 889              		.cfi_def_cfa_offset 8
 890              		.cfi_offset 3, -8
 891              		.cfi_offset 14, -4
 538:LWIP/Target/ethernetif.c ****   {
 892              		.loc 1 538 3 is_stmt 1 view .LVU234
 538:LWIP/Target/ethernetif.c ****   {
 893              		.loc 1 538 15 is_stmt 0 view .LVU235
 894 0002 0268     		ldr	r2, [r0]
 538:LWIP/Target/ethernetif.c ****   {
 895              		.loc 1 538 5 view .LVU236
 896 0004 134B     		ldr	r3, .L65
 897 0006 9A42     		cmp	r2, r3
 898 0008 00D0     		beq	.L64
 899              	.LVL56:
 900              	.L61:
 572:LWIP/Target/ethernetif.c **** 
 901              		.loc 1 572 1 view .LVU237
 902 000a 08BD     		pop	{r3, pc}
 903              	.LVL57:
 904              	.L64:
 544:LWIP/Target/ethernetif.c **** 
 905              		.loc 1 544 5 is_stmt 1 view .LVU238
 544:LWIP/Target/ethernetif.c **** 
 906              		.loc 1 544 5 view .LVU239
 907 000c A3F59043 		sub	r3, r3, #18432
 908 0010 1A6B     		ldr	r2, [r3, #48]
 909 0012 22F08062 		bic	r2, r2, #67108864
 910 0016 1A63     		str	r2, [r3, #48]
 544:LWIP/Target/ethernetif.c **** 
 911              		.loc 1 544 5 view .LVU240
 912 0018 1A6B     		ldr	r2, [r3, #48]
 913 001a 22F00062 		bic	r2, r2, #134217728
ARM GAS  /tmp/ccJW5Vt8.s 			page 32


 914 001e 1A63     		str	r2, [r3, #48]
 544:LWIP/Target/ethernetif.c **** 
 915              		.loc 1 544 5 view .LVU241
 916 0020 1A6B     		ldr	r2, [r3, #48]
 917 0022 22F00072 		bic	r2, r2, #33554432
 918 0026 1A63     		str	r2, [r3, #48]
 544:LWIP/Target/ethernetif.c **** 
 919              		.loc 1 544 5 view .LVU242
 557:LWIP/Target/ethernetif.c **** 
 920              		.loc 1 557 5 view .LVU243
 921 0028 3221     		movs	r1, #50
 922 002a 0B48     		ldr	r0, .L65+4
 923              	.LVL58:
 557:LWIP/Target/ethernetif.c **** 
 924              		.loc 1 557 5 is_stmt 0 view .LVU244
 925 002c FFF7FEFF 		bl	HAL_GPIO_DeInit
 926              	.LVL59:
 559:LWIP/Target/ethernetif.c **** 
 927              		.loc 1 559 5 is_stmt 1 view .LVU245
 928 0030 8621     		movs	r1, #134
 929 0032 0A48     		ldr	r0, .L65+8
 930 0034 FFF7FEFF 		bl	HAL_GPIO_DeInit
 931              	.LVL60:
 561:LWIP/Target/ethernetif.c **** 
 932              		.loc 1 561 5 view .LVU246
 933 0038 4FF40051 		mov	r1, #8192
 934 003c 0848     		ldr	r0, .L65+12
 935 003e FFF7FEFF 		bl	HAL_GPIO_DeInit
 936              	.LVL61:
 563:LWIP/Target/ethernetif.c **** 
 937              		.loc 1 563 5 view .LVU247
 938 0042 4FF42051 		mov	r1, #10240
 939 0046 0748     		ldr	r0, .L65+16
 940 0048 FFF7FEFF 		bl	HAL_GPIO_DeInit
 941              	.LVL62:
 566:LWIP/Target/ethernetif.c **** 
 942              		.loc 1 566 5 view .LVU248
 943 004c 3D20     		movs	r0, #61
 944 004e FFF7FEFF 		bl	HAL_NVIC_DisableIRQ
 945              	.LVL63:
 572:LWIP/Target/ethernetif.c **** 
 946              		.loc 1 572 1 is_stmt 0 view .LVU249
 947 0052 DAE7     		b	.L61
 948              	.L66:
 949              		.align	2
 950              	.L65:
 951 0054 00800240 		.word	1073905664
 952 0058 00080240 		.word	1073874944
 953 005c 00000240 		.word	1073872896
 954 0060 00040240 		.word	1073873920
 955 0064 00180240 		.word	1073879040
 956              		.cfi_endproc
 957              	.LFE176:
 959              		.section	.text.ethernet_link_check_state,"ax",%progbits
 960              		.align	1
 961              		.global	ethernet_link_check_state
 962              		.syntax unified
ARM GAS  /tmp/ccJW5Vt8.s 			page 33


 963              		.thumb
 964              		.thumb_func
 966              	ethernet_link_check_state:
 967              	.LVL64:
 968              	.LFB182:
 646:LWIP/Target/ethernetif.c **** 
 647:LWIP/Target/ethernetif.c **** /**
 648:LWIP/Target/ethernetif.c ****   * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
 649:LWIP/Target/ethernetif.c ****   * @retval None
 650:LWIP/Target/ethernetif.c ****   */
 651:LWIP/Target/ethernetif.c **** void ethernet_link_check_state(struct netif *netif)
 652:LWIP/Target/ethernetif.c **** {
 969              		.loc 1 652 1 is_stmt 1 view -0
 970              		.cfi_startproc
 971              		@ args = 0, pretend = 0, frame = 104
 972              		@ frame_needed = 0, uses_anonymous_args = 0
 973              		.loc 1 652 1 is_stmt 0 view .LVU251
 974 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 975              	.LCFI20:
 976              		.cfi_def_cfa_offset 20
 977              		.cfi_offset 4, -20
 978              		.cfi_offset 5, -16
 979              		.cfi_offset 6, -12
 980              		.cfi_offset 7, -8
 981              		.cfi_offset 14, -4
 982 0002 9BB0     		sub	sp, sp, #108
 983              	.LCFI21:
 984              		.cfi_def_cfa_offset 128
 985 0004 0446     		mov	r4, r0
 653:LWIP/Target/ethernetif.c ****   ETH_MACConfigTypeDef MACConf = {0};
 986              		.loc 1 653 3 is_stmt 1 view .LVU252
 987              		.loc 1 653 24 is_stmt 0 view .LVU253
 988 0006 6422     		movs	r2, #100
 989 0008 0021     		movs	r1, #0
 990 000a 01A8     		add	r0, sp, #4
 991              	.LVL65:
 992              		.loc 1 653 24 view .LVU254
 993 000c FFF7FEFF 		bl	memset
 994              	.LVL66:
 654:LWIP/Target/ethernetif.c ****   int32_t PHYLinkState = 0;
 995              		.loc 1 654 3 is_stmt 1 view .LVU255
 655:LWIP/Target/ethernetif.c ****   uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 996              		.loc 1 655 3 view .LVU256
 656:LWIP/Target/ethernetif.c **** 
 657:LWIP/Target/ethernetif.c ****   PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 997              		.loc 1 657 3 view .LVU257
 998              		.loc 1 657 18 is_stmt 0 view .LVU258
 999 0010 2748     		ldr	r0, .L80
 1000 0012 FFF7FEFF 		bl	LAN8742_GetLinkState
 1001              	.LVL67:
 658:LWIP/Target/ethernetif.c **** 
 659:LWIP/Target/ethernetif.c ****   if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 1002              		.loc 1 659 3 is_stmt 1 view .LVU259
 1003              		.loc 1 659 6 is_stmt 0 view .LVU260
 1004 0016 94F82D30 		ldrb	r3, [r4, #45]	@ zero_extendqisi2
 1005              		.loc 1 659 5 view .LVU261
 1006 001a 13F0040F 		tst	r3, #4
ARM GAS  /tmp/ccJW5Vt8.s 			page 34


 1007 001e 01D0     		beq	.L68
 1008              		.loc 1 659 30 discriminator 1 view .LVU262
 1009 0020 0128     		cmp	r0, #1
 1010 0022 0BDD     		ble	.L78
 1011              	.L68:
 660:LWIP/Target/ethernetif.c ****   {
 661:LWIP/Target/ethernetif.c ****     HAL_ETH_Stop(&heth);
 662:LWIP/Target/ethernetif.c ****     netif_set_down(netif);
 663:LWIP/Target/ethernetif.c ****     netif_set_link_down(netif);
 664:LWIP/Target/ethernetif.c ****   }
 665:LWIP/Target/ethernetif.c ****   else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 1012              		.loc 1 665 8 is_stmt 1 view .LVU263
 1013              		.loc 1 665 10 is_stmt 0 view .LVU264
 1014 0024 13F0040F 		tst	r3, #4
 1015 0028 2AD1     		bne	.L67
 1016              		.loc 1 665 36 discriminator 1 view .LVU265
 1017 002a 0128     		cmp	r0, #1
 1018 002c 28DD     		ble	.L67
 666:LWIP/Target/ethernetif.c ****   {
 667:LWIP/Target/ethernetif.c ****     switch (PHYLinkState)
 1019              		.loc 1 667 5 is_stmt 1 view .LVU266
 1020 002e 831E     		subs	r3, r0, #2
 1021 0030 032B     		cmp	r3, #3
 1022 0032 0DD8     		bhi	.L70
 1023 0034 DFE803F0 		tbb	[pc, r3]
 1024              	.L72:
 1025 0038 1E       		.byte	(.L76-.L72)/2
 1026 0039 10       		.byte	(.L74-.L72)/2
 1027 003a 15       		.byte	(.L73-.L72)/2
 1028 003b 1A       		.byte	(.L71-.L72)/2
 1029              		.p2align 1
 1030              	.L78:
 661:LWIP/Target/ethernetif.c ****     netif_set_down(netif);
 1031              		.loc 1 661 5 view .LVU267
 1032 003c 1D48     		ldr	r0, .L80+4
 1033              	.LVL68:
 661:LWIP/Target/ethernetif.c ****     netif_set_down(netif);
 1034              		.loc 1 661 5 is_stmt 0 view .LVU268
 1035 003e FFF7FEFF 		bl	HAL_ETH_Stop
 1036              	.LVL69:
 662:LWIP/Target/ethernetif.c ****     netif_set_link_down(netif);
 1037              		.loc 1 662 5 is_stmt 1 view .LVU269
 1038 0042 2046     		mov	r0, r4
 1039 0044 FFF7FEFF 		bl	netif_set_down
 1040              	.LVL70:
 663:LWIP/Target/ethernetif.c ****   }
 1041              		.loc 1 663 5 view .LVU270
 1042 0048 2046     		mov	r0, r4
 1043 004a FFF7FEFF 		bl	netif_set_link_down
 1044              	.LVL71:
 1045 004e 17E0     		b	.L67
 1046              	.LVL72:
 1047              	.L70:
 1048              		.loc 1 667 5 is_stmt 0 view .LVU271
 1049 0050 0025     		movs	r5, #0
 1050 0052 2F46     		mov	r7, r5
 1051 0054 2B46     		mov	r3, r5
ARM GAS  /tmp/ccJW5Vt8.s 			page 35


 1052 0056 12E0     		b	.L75
 1053              	.L74:
 668:LWIP/Target/ethernetif.c ****     {
 669:LWIP/Target/ethernetif.c ****     case LAN8742_STATUS_100MBITS_FULLDUPLEX:
 670:LWIP/Target/ethernetif.c ****       duplex = ETH_FULLDUPLEX_MODE;
 671:LWIP/Target/ethernetif.c ****       speed = ETH_SPEED_100M;
 672:LWIP/Target/ethernetif.c ****       linkchanged = 1;
 673:LWIP/Target/ethernetif.c ****       break;
 674:LWIP/Target/ethernetif.c ****     case LAN8742_STATUS_100MBITS_HALFDUPLEX:
 675:LWIP/Target/ethernetif.c ****       duplex = ETH_HALFDUPLEX_MODE;
 1054              		.loc 1 675 7 is_stmt 1 view .LVU272
 676:LWIP/Target/ethernetif.c ****       speed = ETH_SPEED_100M;
 1055              		.loc 1 676 7 view .LVU273
 1056              	.LVL73:
 677:LWIP/Target/ethernetif.c ****       linkchanged = 1;
 1057              		.loc 1 677 7 view .LVU274
 678:LWIP/Target/ethernetif.c ****       break;
 1058              		.loc 1 678 7 view .LVU275
 675:LWIP/Target/ethernetif.c ****       speed = ETH_SPEED_100M;
 1059              		.loc 1 675 14 is_stmt 0 view .LVU276
 1060 0058 0025     		movs	r5, #0
 676:LWIP/Target/ethernetif.c ****       linkchanged = 1;
 1061              		.loc 1 676 13 view .LVU277
 1062 005a 4FF48047 		mov	r7, #16384
 677:LWIP/Target/ethernetif.c ****       break;
 1063              		.loc 1 677 19 view .LVU278
 1064 005e 0123     		movs	r3, #1
 1065              		.loc 1 678 7 view .LVU279
 1066 0060 0DE0     		b	.L75
 1067              	.LVL74:
 1068              	.L73:
 679:LWIP/Target/ethernetif.c ****     case LAN8742_STATUS_10MBITS_FULLDUPLEX:
 680:LWIP/Target/ethernetif.c ****       duplex = ETH_FULLDUPLEX_MODE;
 1069              		.loc 1 680 7 is_stmt 1 view .LVU280
 681:LWIP/Target/ethernetif.c ****       speed = ETH_SPEED_10M;
 1070              		.loc 1 681 7 view .LVU281
 682:LWIP/Target/ethernetif.c ****       linkchanged = 1;
 1071              		.loc 1 682 7 view .LVU282
 683:LWIP/Target/ethernetif.c ****       break;
 1072              		.loc 1 683 7 view .LVU283
 680:LWIP/Target/ethernetif.c ****       speed = ETH_SPEED_10M;
 1073              		.loc 1 680 14 is_stmt 0 view .LVU284
 1074 0062 4FF40065 		mov	r5, #2048
 681:LWIP/Target/ethernetif.c ****       linkchanged = 1;
 1075              		.loc 1 681 13 view .LVU285
 1076 0066 0027     		movs	r7, #0
 682:LWIP/Target/ethernetif.c ****       break;
 1077              		.loc 1 682 19 view .LVU286
 1078 0068 0123     		movs	r3, #1
 1079              		.loc 1 683 7 view .LVU287
 1080 006a 08E0     		b	.L75
 1081              	.LVL75:
 1082              	.L71:
 684:LWIP/Target/ethernetif.c ****     case LAN8742_STATUS_10MBITS_HALFDUPLEX:
 685:LWIP/Target/ethernetif.c ****       duplex = ETH_HALFDUPLEX_MODE;
 1083              		.loc 1 685 7 is_stmt 1 view .LVU288
 686:LWIP/Target/ethernetif.c ****       speed = ETH_SPEED_10M;
ARM GAS  /tmp/ccJW5Vt8.s 			page 36


 1084              		.loc 1 686 7 view .LVU289
 687:LWIP/Target/ethernetif.c ****       linkchanged = 1;
 1085              		.loc 1 687 7 view .LVU290
 688:LWIP/Target/ethernetif.c ****       break;
 1086              		.loc 1 688 7 view .LVU291
 685:LWIP/Target/ethernetif.c ****       speed = ETH_SPEED_10M;
 1087              		.loc 1 685 14 is_stmt 0 view .LVU292
 1088 006c 0025     		movs	r5, #0
 686:LWIP/Target/ethernetif.c ****       linkchanged = 1;
 1089              		.loc 1 686 13 view .LVU293
 1090 006e 2F46     		mov	r7, r5
 687:LWIP/Target/ethernetif.c ****       break;
 1091              		.loc 1 687 19 view .LVU294
 1092 0070 0123     		movs	r3, #1
 1093              		.loc 1 688 7 view .LVU295
 1094 0072 04E0     		b	.L75
 1095              	.LVL76:
 1096              	.L76:
 670:LWIP/Target/ethernetif.c ****       speed = ETH_SPEED_100M;
 1097              		.loc 1 670 14 view .LVU296
 1098 0074 4FF40065 		mov	r5, #2048
 671:LWIP/Target/ethernetif.c ****       linkchanged = 1;
 1099              		.loc 1 671 13 view .LVU297
 1100 0078 4FF48047 		mov	r7, #16384
 672:LWIP/Target/ethernetif.c ****       break;
 1101              		.loc 1 672 19 view .LVU298
 1102 007c 0123     		movs	r3, #1
 1103              	.LVL77:
 1104              	.L75:
 689:LWIP/Target/ethernetif.c ****     default:
 690:LWIP/Target/ethernetif.c ****       break;
 691:LWIP/Target/ethernetif.c ****     }
 692:LWIP/Target/ethernetif.c **** 
 693:LWIP/Target/ethernetif.c ****     if(linkchanged)
 1105              		.loc 1 693 5 is_stmt 1 view .LVU299
 1106              		.loc 1 693 7 is_stmt 0 view .LVU300
 1107 007e 0BB9     		cbnz	r3, .L79
 1108              	.LVL78:
 1109              	.L67:
 694:LWIP/Target/ethernetif.c ****     {
 695:LWIP/Target/ethernetif.c ****       /* Get MAC Config MAC */
 696:LWIP/Target/ethernetif.c ****       HAL_ETH_GetMACConfig(&heth, &MACConf);
 697:LWIP/Target/ethernetif.c ****       MACConf.DuplexMode = duplex;
 698:LWIP/Target/ethernetif.c ****       MACConf.Speed = speed;
 699:LWIP/Target/ethernetif.c ****       HAL_ETH_SetMACConfig(&heth, &MACConf);
 700:LWIP/Target/ethernetif.c ****       HAL_ETH_Start(&heth);
 701:LWIP/Target/ethernetif.c ****       netif_set_up(netif);
 702:LWIP/Target/ethernetif.c ****       netif_set_link_up(netif);
 703:LWIP/Target/ethernetif.c ****     }
 704:LWIP/Target/ethernetif.c ****   }
 705:LWIP/Target/ethernetif.c **** 
 706:LWIP/Target/ethernetif.c **** }
 1110              		.loc 1 706 1 view .LVU301
 1111 0080 1BB0     		add	sp, sp, #108
 1112              	.LCFI22:
 1113              		.cfi_remember_state
 1114              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/ccJW5Vt8.s 			page 37


 1115              		@ sp needed
 1116 0082 F0BD     		pop	{r4, r5, r6, r7, pc}
 1117              	.LVL79:
 1118              	.L79:
 1119              	.LCFI23:
 1120              		.cfi_restore_state
 696:LWIP/Target/ethernetif.c ****       MACConf.DuplexMode = duplex;
 1121              		.loc 1 696 7 is_stmt 1 view .LVU302
 1122 0084 0B4E     		ldr	r6, .L80+4
 1123 0086 01A9     		add	r1, sp, #4
 1124 0088 3046     		mov	r0, r6
 1125              	.LVL80:
 696:LWIP/Target/ethernetif.c ****       MACConf.DuplexMode = duplex;
 1126              		.loc 1 696 7 is_stmt 0 view .LVU303
 1127 008a FFF7FEFF 		bl	HAL_ETH_GetMACConfig
 1128              	.LVL81:
 697:LWIP/Target/ethernetif.c ****       MACConf.Speed = speed;
 1129              		.loc 1 697 7 is_stmt 1 view .LVU304
 697:LWIP/Target/ethernetif.c ****       MACConf.Speed = speed;
 1130              		.loc 1 697 26 is_stmt 0 view .LVU305
 1131 008e 0795     		str	r5, [sp, #28]
 698:LWIP/Target/ethernetif.c ****       HAL_ETH_SetMACConfig(&heth, &MACConf);
 1132              		.loc 1 698 7 is_stmt 1 view .LVU306
 698:LWIP/Target/ethernetif.c ****       HAL_ETH_SetMACConfig(&heth, &MACConf);
 1133              		.loc 1 698 21 is_stmt 0 view .LVU307
 1134 0090 0697     		str	r7, [sp, #24]
 699:LWIP/Target/ethernetif.c ****       HAL_ETH_Start(&heth);
 1135              		.loc 1 699 7 is_stmt 1 view .LVU308
 1136 0092 01A9     		add	r1, sp, #4
 1137 0094 3046     		mov	r0, r6
 1138 0096 FFF7FEFF 		bl	HAL_ETH_SetMACConfig
 1139              	.LVL82:
 700:LWIP/Target/ethernetif.c ****       netif_set_up(netif);
 1140              		.loc 1 700 7 view .LVU309
 1141 009a 3046     		mov	r0, r6
 1142 009c FFF7FEFF 		bl	HAL_ETH_Start
 1143              	.LVL83:
 701:LWIP/Target/ethernetif.c ****       netif_set_link_up(netif);
 1144              		.loc 1 701 7 view .LVU310
 1145 00a0 2046     		mov	r0, r4
 1146 00a2 FFF7FEFF 		bl	netif_set_up
 1147              	.LVL84:
 702:LWIP/Target/ethernetif.c ****     }
 1148              		.loc 1 702 7 view .LVU311
 1149 00a6 2046     		mov	r0, r4
 1150 00a8 FFF7FEFF 		bl	netif_set_link_up
 1151              	.LVL85:
 1152              		.loc 1 706 1 is_stmt 0 view .LVU312
 1153 00ac E8E7     		b	.L67
 1154              	.L81:
 1155 00ae 00BF     		.align	2
 1156              	.L80:
 1157 00b0 00000000 		.word	.LANCHOR4
 1158 00b4 00000000 		.word	.LANCHOR1
 1159              		.cfi_endproc
 1160              	.LFE182:
 1162              		.section	.text.low_level_init,"ax",%progbits
ARM GAS  /tmp/ccJW5Vt8.s 			page 38


 1163              		.align	1
 1164              		.syntax unified
 1165              		.thumb
 1166              		.thumb_func
 1168              	low_level_init:
 1169              	.LVL86:
 1170              	.LFB167:
 159:LWIP/Target/ethernetif.c ****   HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 1171              		.loc 1 159 1 is_stmt 1 view -0
 1172              		.cfi_startproc
 1173              		@ args = 0, pretend = 0, frame = 8
 1174              		@ frame_needed = 0, uses_anonymous_args = 0
 159:LWIP/Target/ethernetif.c ****   HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 1175              		.loc 1 159 1 is_stmt 0 view .LVU314
 1176 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 1177              	.LCFI24:
 1178              		.cfi_def_cfa_offset 24
 1179              		.cfi_offset 4, -24
 1180              		.cfi_offset 5, -20
 1181              		.cfi_offset 6, -16
 1182              		.cfi_offset 7, -12
 1183              		.cfi_offset 8, -8
 1184              		.cfi_offset 14, -4
 1185 0004 82B0     		sub	sp, sp, #8
 1186              	.LCFI25:
 1187              		.cfi_def_cfa_offset 32
 1188 0006 0446     		mov	r4, r0
 160:LWIP/Target/ethernetif.c ****   /* Start ETH HAL Init */
 1189              		.loc 1 160 3 is_stmt 1 view .LVU315
 1190              	.LVL87:
 163:LWIP/Target/ethernetif.c ****   heth.Instance = ETH;
 1191              		.loc 1 163 4 view .LVU316
 164:LWIP/Target/ethernetif.c ****   MACAddr[0] = 0x00;
 1192              		.loc 1 164 3 view .LVU317
 164:LWIP/Target/ethernetif.c ****   MACAddr[0] = 0x00;
 1193              		.loc 1 164 17 is_stmt 0 view .LVU318
 1194 0008 314D     		ldr	r5, .L86
 1195 000a 324B     		ldr	r3, .L86+4
 1196 000c 2B60     		str	r3, [r5]
 165:LWIP/Target/ethernetif.c ****   MACAddr[1] = 0x80;
 1197              		.loc 1 165 3 is_stmt 1 view .LVU319
 165:LWIP/Target/ethernetif.c ****   MACAddr[1] = 0x80;
 1198              		.loc 1 165 14 is_stmt 0 view .LVU320
 1199 000e 0026     		movs	r6, #0
 1200 0010 8DF80060 		strb	r6, [sp]
 166:LWIP/Target/ethernetif.c ****   MACAddr[2] = 0xE1;
 1201              		.loc 1 166 3 is_stmt 1 view .LVU321
 166:LWIP/Target/ethernetif.c ****   MACAddr[2] = 0xE1;
 1202              		.loc 1 166 14 is_stmt 0 view .LVU322
 1203 0014 8023     		movs	r3, #128
 1204 0016 8DF80130 		strb	r3, [sp, #1]
 167:LWIP/Target/ethernetif.c ****   MACAddr[3] = 0x00;
 1205              		.loc 1 167 3 is_stmt 1 view .LVU323
 167:LWIP/Target/ethernetif.c ****   MACAddr[3] = 0x00;
 1206              		.loc 1 167 14 is_stmt 0 view .LVU324
 1207 001a E123     		movs	r3, #225
 1208 001c 8DF80230 		strb	r3, [sp, #2]
ARM GAS  /tmp/ccJW5Vt8.s 			page 39


 168:LWIP/Target/ethernetif.c ****   MACAddr[4] = 0x00;
 1209              		.loc 1 168 3 is_stmt 1 view .LVU325
 168:LWIP/Target/ethernetif.c ****   MACAddr[4] = 0x00;
 1210              		.loc 1 168 14 is_stmt 0 view .LVU326
 1211 0020 8DF80360 		strb	r6, [sp, #3]
 169:LWIP/Target/ethernetif.c ****   MACAddr[5] = 0x00;
 1212              		.loc 1 169 3 is_stmt 1 view .LVU327
 169:LWIP/Target/ethernetif.c ****   MACAddr[5] = 0x00;
 1213              		.loc 1 169 14 is_stmt 0 view .LVU328
 1214 0024 8DF80460 		strb	r6, [sp, #4]
 170:LWIP/Target/ethernetif.c ****   heth.Init.MACAddr = &MACAddr[0];
 1215              		.loc 1 170 3 is_stmt 1 view .LVU329
 170:LWIP/Target/ethernetif.c ****   heth.Init.MACAddr = &MACAddr[0];
 1216              		.loc 1 170 14 is_stmt 0 view .LVU330
 1217 0028 8DF80560 		strb	r6, [sp, #5]
 171:LWIP/Target/ethernetif.c ****   heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 1218              		.loc 1 171 3 is_stmt 1 view .LVU331
 171:LWIP/Target/ethernetif.c ****   heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 1219              		.loc 1 171 21 is_stmt 0 view .LVU332
 1220 002c C5F804D0 		str	sp, [r5, #4]
 172:LWIP/Target/ethernetif.c ****   heth.Init.TxDesc = DMATxDscrTab;
 1221              		.loc 1 172 3 is_stmt 1 view .LVU333
 172:LWIP/Target/ethernetif.c ****   heth.Init.TxDesc = DMATxDscrTab;
 1222              		.loc 1 172 28 is_stmt 0 view .LVU334
 1223 0030 4FF40003 		mov	r3, #8388608
 1224 0034 AB60     		str	r3, [r5, #8]
 173:LWIP/Target/ethernetif.c ****   heth.Init.RxDesc = DMARxDscrTab;
 1225              		.loc 1 173 3 is_stmt 1 view .LVU335
 173:LWIP/Target/ethernetif.c ****   heth.Init.RxDesc = DMARxDscrTab;
 1226              		.loc 1 173 20 is_stmt 0 view .LVU336
 1227 0036 284B     		ldr	r3, .L86+8
 1228 0038 EB60     		str	r3, [r5, #12]
 174:LWIP/Target/ethernetif.c ****   heth.Init.RxBuffLen = 1536;
 1229              		.loc 1 174 3 is_stmt 1 view .LVU337
 174:LWIP/Target/ethernetif.c ****   heth.Init.RxBuffLen = 1536;
 1230              		.loc 1 174 20 is_stmt 0 view .LVU338
 1231 003a 284B     		ldr	r3, .L86+12
 1232 003c 2B61     		str	r3, [r5, #16]
 175:LWIP/Target/ethernetif.c **** 
 1233              		.loc 1 175 3 is_stmt 1 view .LVU339
 175:LWIP/Target/ethernetif.c **** 
 1234              		.loc 1 175 23 is_stmt 0 view .LVU340
 1235 003e 4FF4C063 		mov	r3, #1536
 1236 0042 6B61     		str	r3, [r5, #20]
 181:LWIP/Target/ethernetif.c **** 
 1237              		.loc 1 181 3 is_stmt 1 view .LVU341
 181:LWIP/Target/ethernetif.c **** 
 1238              		.loc 1 181 25 is_stmt 0 view .LVU342
 1239 0044 2846     		mov	r0, r5
 1240              	.LVL88:
 181:LWIP/Target/ethernetif.c **** 
 1241              		.loc 1 181 25 view .LVU343
 1242 0046 FFF7FEFF 		bl	HAL_ETH_Init
 1243              	.LVL89:
 1244 004a 0746     		mov	r7, r0
 1245              	.LVL90:
 183:LWIP/Target/ethernetif.c ****   TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
ARM GAS  /tmp/ccJW5Vt8.s 			page 40


 1246              		.loc 1 183 3 is_stmt 1 view .LVU344
 1247 004c DFF89C80 		ldr	r8, .L86+28
 1248 0050 3822     		movs	r2, #56
 1249 0052 3146     		mov	r1, r6
 1250 0054 4046     		mov	r0, r8
 1251 0056 FFF7FEFF 		bl	memset
 1252              	.LVL91:
 184:LWIP/Target/ethernetif.c ****   TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 1253              		.loc 1 184 3 view .LVU345
 184:LWIP/Target/ethernetif.c ****   TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 1254              		.loc 1 184 23 is_stmt 0 view .LVU346
 1255 005a 2123     		movs	r3, #33
 1256 005c C8F80030 		str	r3, [r8]
 185:LWIP/Target/ethernetif.c ****   TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 1257              		.loc 1 185 3 is_stmt 1 view .LVU347
 185:LWIP/Target/ethernetif.c ****   TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 1258              		.loc 1 185 25 is_stmt 0 view .LVU348
 1259 0060 4FF44003 		mov	r3, #12582912
 1260 0064 C8F81430 		str	r3, [r8, #20]
 186:LWIP/Target/ethernetif.c **** 
 1261              		.loc 1 186 3 is_stmt 1 view .LVU349
 191:LWIP/Target/ethernetif.c **** 
 1262              		.loc 1 191 3 view .LVU350
 1263 0068 1D48     		ldr	r0, .L86+16
 1264 006a FFF7FEFF 		bl	memp_init_pool
 1265              	.LVL92:
 196:LWIP/Target/ethernetif.c **** 
 1266              		.loc 1 196 3 view .LVU351
 196:LWIP/Target/ethernetif.c **** 
 1267              		.loc 1 196 21 is_stmt 0 view .LVU352
 1268 006e 0623     		movs	r3, #6
 1269 0070 84F82C30 		strb	r3, [r4, #44]
 199:LWIP/Target/ethernetif.c ****   netif->hwaddr[1] =  heth.Init.MACAddr[1];
 1270              		.loc 1 199 3 is_stmt 1 view .LVU353
 199:LWIP/Target/ethernetif.c ****   netif->hwaddr[1] =  heth.Init.MACAddr[1];
 1271              		.loc 1 199 32 is_stmt 0 view .LVU354
 1272 0074 6B68     		ldr	r3, [r5, #4]
 199:LWIP/Target/ethernetif.c ****   netif->hwaddr[1] =  heth.Init.MACAddr[1];
 1273              		.loc 1 199 40 view .LVU355
 1274 0076 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 199:LWIP/Target/ethernetif.c ****   netif->hwaddr[1] =  heth.Init.MACAddr[1];
 1275              		.loc 1 199 20 view .LVU356
 1276 0078 84F82620 		strb	r2, [r4, #38]
 200:LWIP/Target/ethernetif.c ****   netif->hwaddr[2] =  heth.Init.MACAddr[2];
 1277              		.loc 1 200 3 is_stmt 1 view .LVU357
 200:LWIP/Target/ethernetif.c ****   netif->hwaddr[2] =  heth.Init.MACAddr[2];
 1278              		.loc 1 200 20 is_stmt 0 view .LVU358
 1279 007c 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 1280 007e 84F82720 		strb	r2, [r4, #39]
 201:LWIP/Target/ethernetif.c ****   netif->hwaddr[3] =  heth.Init.MACAddr[3];
 1281              		.loc 1 201 3 is_stmt 1 view .LVU359
 201:LWIP/Target/ethernetif.c ****   netif->hwaddr[3] =  heth.Init.MACAddr[3];
 1282              		.loc 1 201 20 is_stmt 0 view .LVU360
 1283 0082 9A78     		ldrb	r2, [r3, #2]	@ zero_extendqisi2
 1284 0084 84F82820 		strb	r2, [r4, #40]
 202:LWIP/Target/ethernetif.c ****   netif->hwaddr[4] =  heth.Init.MACAddr[4];
 1285              		.loc 1 202 3 is_stmt 1 view .LVU361
ARM GAS  /tmp/ccJW5Vt8.s 			page 41


 202:LWIP/Target/ethernetif.c ****   netif->hwaddr[4] =  heth.Init.MACAddr[4];
 1286              		.loc 1 202 20 is_stmt 0 view .LVU362
 1287 0088 DA78     		ldrb	r2, [r3, #3]	@ zero_extendqisi2
 1288 008a 84F82920 		strb	r2, [r4, #41]
 203:LWIP/Target/ethernetif.c ****   netif->hwaddr[5] =  heth.Init.MACAddr[5];
 1289              		.loc 1 203 3 is_stmt 1 view .LVU363
 203:LWIP/Target/ethernetif.c ****   netif->hwaddr[5] =  heth.Init.MACAddr[5];
 1290              		.loc 1 203 20 is_stmt 0 view .LVU364
 1291 008e 1A79     		ldrb	r2, [r3, #4]	@ zero_extendqisi2
 1292 0090 84F82A20 		strb	r2, [r4, #42]
 204:LWIP/Target/ethernetif.c **** 
 1293              		.loc 1 204 3 is_stmt 1 view .LVU365
 204:LWIP/Target/ethernetif.c **** 
 1294              		.loc 1 204 20 is_stmt 0 view .LVU366
 1295 0094 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 1296 0096 84F82B30 		strb	r3, [r4, #43]
 207:LWIP/Target/ethernetif.c **** 
 1297              		.loc 1 207 3 is_stmt 1 view .LVU367
 207:LWIP/Target/ethernetif.c **** 
 1298              		.loc 1 207 14 is_stmt 0 view .LVU368
 1299 009a 40F2DC53 		movw	r3, #1500
 1300 009e A384     		strh	r3, [r4, #36]	@ movhi
 212:LWIP/Target/ethernetif.c ****   #else
 1301              		.loc 1 212 5 is_stmt 1 view .LVU369
 212:LWIP/Target/ethernetif.c ****   #else
 1302              		.loc 1 212 18 is_stmt 0 view .LVU370
 1303 00a0 94F82D30 		ldrb	r3, [r4, #45]	@ zero_extendqisi2
 1304 00a4 43F00A03 		orr	r3, r3, #10
 1305 00a8 84F82D30 		strb	r3, [r4, #45]
 221:LWIP/Target/ethernetif.c **** 
 1306              		.loc 1 221 3 is_stmt 1 view .LVU371
 1307 00ac 0D4D     		ldr	r5, .L86+20
 1308 00ae 0E49     		ldr	r1, .L86+24
 1309 00b0 2846     		mov	r0, r5
 1310 00b2 FFF7FEFF 		bl	LAN8742_RegisterBusIO
 1311              	.LVL93:
 224:LWIP/Target/ethernetif.c **** 
 1312              		.loc 1 224 3 view .LVU372
 1313 00b6 2846     		mov	r0, r5
 1314 00b8 FFF7FEFF 		bl	LAN8742_Init
 1315              	.LVL94:
 226:LWIP/Target/ethernetif.c ****   {
 1316              		.loc 1 226 3 view .LVU373
 226:LWIP/Target/ethernetif.c ****   {
 1317              		.loc 1 226 6 is_stmt 0 view .LVU374
 1318 00bc 2FB9     		cbnz	r7, .L83
 229:LWIP/Target/ethernetif.c ****   }
 1319              		.loc 1 229 3 is_stmt 1 view .LVU375
 1320 00be 2046     		mov	r0, r4
 1321 00c0 FFF7FEFF 		bl	ethernet_link_check_state
 1322              	.LVL95:
 1323              	.L82:
 240:LWIP/Target/ethernetif.c **** 
 1324              		.loc 1 240 1 is_stmt 0 view .LVU376
 1325 00c4 02B0     		add	sp, sp, #8
 1326              	.LCFI26:
 1327              		.cfi_remember_state
ARM GAS  /tmp/ccJW5Vt8.s 			page 42


 1328              		.cfi_def_cfa_offset 24
 1329              		@ sp needed
 1330 00c6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1331              	.LVL96:
 1332              	.L83:
 1333              	.LCFI27:
 1334              		.cfi_restore_state
 233:LWIP/Target/ethernetif.c ****   }
 1335              		.loc 1 233 5 is_stmt 1 view .LVU377
 1336 00ca FFF7FEFF 		bl	Error_Handler
 1337              	.LVL97:
 240:LWIP/Target/ethernetif.c **** 
 1338              		.loc 1 240 1 is_stmt 0 view .LVU378
 1339 00ce F9E7     		b	.L82
 1340              	.L87:
 1341              		.align	2
 1342              	.L86:
 1343 00d0 00000000 		.word	.LANCHOR1
 1344 00d4 00800240 		.word	1073905664
 1345 00d8 00000000 		.word	.LANCHOR5
 1346 00dc 00000000 		.word	.LANCHOR6
 1347 00e0 00000000 		.word	.LANCHOR3
 1348 00e4 00000000 		.word	.LANCHOR4
 1349 00e8 00000000 		.word	.LANCHOR7
 1350 00ec 00000000 		.word	.LANCHOR2
 1351              		.cfi_endproc
 1352              	.LFE167:
 1354              		.section	.rodata.ethernetif_init.str1.4,"aMS",%progbits,1
 1355              		.align	2
 1356              	.LC0:
 1357 0000 4C574950 		.ascii	"LWIP/Target/ethernetif.c\000"
 1357      2F546172 
 1357      6765742F 
 1357      65746865 
 1357      726E6574 
 1358 0019 000000   		.align	2
 1359              	.LC1:
 1360 001c 6E657469 		.ascii	"netif != NULL\000"
 1360      6620213D 
 1360      204E554C 
 1360      4C00
 1361 002a 0000     		.align	2
 1362              	.LC2:
 1363 002c 41737365 		.ascii	"Assertion \"%s\" failed at line %d in %s\012\000"
 1363      7274696F 
 1363      6E202225 
 1363      73222066 
 1363      61696C65 
 1364              		.section	.text.ethernetif_init,"ax",%progbits
 1365              		.align	1
 1366              		.global	ethernetif_init
 1367              		.syntax unified
 1368              		.thumb
 1369              		.thumb_func
 1371              	ethernetif_init:
 1372              	.LVL98:
 1373              	.LFB171:
ARM GAS  /tmp/ccJW5Vt8.s 			page 43


 377:LWIP/Target/ethernetif.c ****   LWIP_ASSERT("netif != NULL", (netif != NULL));
 1374              		.loc 1 377 1 is_stmt 1 view -0
 1375              		.cfi_startproc
 1376              		@ args = 0, pretend = 0, frame = 0
 1377              		@ frame_needed = 0, uses_anonymous_args = 0
 377:LWIP/Target/ethernetif.c ****   LWIP_ASSERT("netif != NULL", (netif != NULL));
 1378              		.loc 1 377 1 is_stmt 0 view .LVU380
 1379 0000 10B5     		push	{r4, lr}
 1380              	.LCFI28:
 1381              		.cfi_def_cfa_offset 8
 1382              		.cfi_offset 4, -8
 1383              		.cfi_offset 14, -4
 378:LWIP/Target/ethernetif.c **** 
 1384              		.loc 1 378 3 is_stmt 1 view .LVU381
 378:LWIP/Target/ethernetif.c **** 
 1385              		.loc 1 378 3 view .LVU382
 1386 0002 0446     		mov	r4, r0
 1387 0004 70B1     		cbz	r0, .L91
 1388              	.LVL99:
 1389              	.L89:
 378:LWIP/Target/ethernetif.c **** 
 1390              		.loc 1 378 3 discriminator 3 view .LVU383
 378:LWIP/Target/ethernetif.c **** 
 1391              		.loc 1 378 3 discriminator 3 view .LVU384
 392:LWIP/Target/ethernetif.c ****   netif->name[1] = IFNAME1;
 1392              		.loc 1 392 3 discriminator 3 view .LVU385
 392:LWIP/Target/ethernetif.c ****   netif->name[1] = IFNAME1;
 1393              		.loc 1 392 18 is_stmt 0 discriminator 3 view .LVU386
 1394 0006 7323     		movs	r3, #115
 1395 0008 84F82E30 		strb	r3, [r4, #46]
 393:LWIP/Target/ethernetif.c ****   /* We directly use etharp_output() here to save a function call.
 1396              		.loc 1 393 3 is_stmt 1 discriminator 3 view .LVU387
 393:LWIP/Target/ethernetif.c ****   /* We directly use etharp_output() here to save a function call.
 1397              		.loc 1 393 18 is_stmt 0 discriminator 3 view .LVU388
 1398 000c 7423     		movs	r3, #116
 1399 000e 84F82F30 		strb	r3, [r4, #47]
 402:LWIP/Target/ethernetif.c **** #else
 1400              		.loc 1 402 3 is_stmt 1 discriminator 3 view .LVU389
 402:LWIP/Target/ethernetif.c **** #else
 1401              		.loc 1 402 17 is_stmt 0 discriminator 3 view .LVU390
 1402 0012 084B     		ldr	r3, .L92
 1403 0014 6361     		str	r3, [r4, #20]
 414:LWIP/Target/ethernetif.c **** 
 1404              		.loc 1 414 3 is_stmt 1 discriminator 3 view .LVU391
 414:LWIP/Target/ethernetif.c **** 
 1405              		.loc 1 414 21 is_stmt 0 discriminator 3 view .LVU392
 1406 0016 084B     		ldr	r3, .L92+4
 1407 0018 A361     		str	r3, [r4, #24]
 417:LWIP/Target/ethernetif.c **** 
 1408              		.loc 1 417 3 is_stmt 1 discriminator 3 view .LVU393
 1409 001a 2046     		mov	r0, r4
 1410 001c FFF7FEFF 		bl	low_level_init
 1411              	.LVL100:
 419:LWIP/Target/ethernetif.c **** }
 1412              		.loc 1 419 3 discriminator 3 view .LVU394
 420:LWIP/Target/ethernetif.c **** 
 1413              		.loc 1 420 1 is_stmt 0 discriminator 3 view .LVU395
ARM GAS  /tmp/ccJW5Vt8.s 			page 44


 1414 0020 0020     		movs	r0, #0
 1415 0022 10BD     		pop	{r4, pc}
 1416              	.LVL101:
 1417              	.L91:
 378:LWIP/Target/ethernetif.c **** 
 1418              		.loc 1 378 3 is_stmt 1 discriminator 1 view .LVU396
 378:LWIP/Target/ethernetif.c **** 
 1419              		.loc 1 378 3 discriminator 1 view .LVU397
 1420 0024 054B     		ldr	r3, .L92+8
 1421 0026 4FF4BD72 		mov	r2, #378
 1422 002a 0549     		ldr	r1, .L92+12
 1423 002c 0548     		ldr	r0, .L92+16
 1424              	.LVL102:
 378:LWIP/Target/ethernetif.c **** 
 1425              		.loc 1 378 3 is_stmt 0 discriminator 1 view .LVU398
 1426 002e FFF7FEFF 		bl	printf
 1427              	.LVL103:
 1428 0032 E8E7     		b	.L89
 1429              	.L93:
 1430              		.align	2
 1431              	.L92:
 1432 0034 00000000 		.word	etharp_output
 1433 0038 00000000 		.word	low_level_output
 1434 003c 00000000 		.word	.LC0
 1435 0040 1C000000 		.word	.LC1
 1436 0044 2C000000 		.word	.LC2
 1437              		.cfi_endproc
 1438              	.LFE171:
 1440              		.section	.text.HAL_ETH_RxAllocateCallback,"ax",%progbits
 1441              		.align	1
 1442              		.global	HAL_ETH_RxAllocateCallback
 1443              		.syntax unified
 1444              		.thumb
 1445              		.thumb_func
 1447              	HAL_ETH_RxAllocateCallback:
 1448              	.LVL104:
 1449              	.LFB183:
 707:LWIP/Target/ethernetif.c **** 
 708:LWIP/Target/ethernetif.c **** void HAL_ETH_RxAllocateCallback(uint8_t **buff)
 709:LWIP/Target/ethernetif.c **** {
 1450              		.loc 1 709 1 is_stmt 1 view -0
 1451              		.cfi_startproc
 1452              		@ args = 0, pretend = 0, frame = 0
 1453              		@ frame_needed = 0, uses_anonymous_args = 0
 1454              		.loc 1 709 1 is_stmt 0 view .LVU400
 1455 0000 10B5     		push	{r4, lr}
 1456              	.LCFI29:
 1457              		.cfi_def_cfa_offset 8
 1458              		.cfi_offset 4, -8
 1459              		.cfi_offset 14, -4
 1460 0002 82B0     		sub	sp, sp, #8
 1461              	.LCFI30:
 1462              		.cfi_def_cfa_offset 16
 1463 0004 0446     		mov	r4, r0
 710:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN HAL ETH RxAllocateCallback */
 711:LWIP/Target/ethernetif.c ****   struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 1464              		.loc 1 711 3 is_stmt 1 view .LVU401
ARM GAS  /tmp/ccJW5Vt8.s 			page 45


 1465              		.loc 1 711 27 is_stmt 0 view .LVU402
 1466 0006 0E48     		ldr	r0, .L98
 1467              	.LVL105:
 1468              		.loc 1 711 27 view .LVU403
 1469 0008 FFF7FEFF 		bl	memp_malloc_pool
 1470              	.LVL106:
 712:LWIP/Target/ethernetif.c ****   if (p)
 1471              		.loc 1 712 3 is_stmt 1 view .LVU404
 1472              		.loc 1 712 6 is_stmt 0 view .LVU405
 1473 000c 88B1     		cbz	r0, .L95
 1474 000e 0346     		mov	r3, r0
 713:LWIP/Target/ethernetif.c ****   {
 714:LWIP/Target/ethernetif.c ****     /* Get the buff from the struct pbuf address. */
 715:LWIP/Target/ethernetif.c ****     *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 1475              		.loc 1 715 5 is_stmt 1 view .LVU406
 1476              		.loc 1 715 26 is_stmt 0 view .LVU407
 1477 0010 00F12002 		add	r2, r0, #32
 1478              		.loc 1 715 11 view .LVU408
 1479 0014 2260     		str	r2, [r4]
 716:LWIP/Target/ethernetif.c ****     p->custom_free_function = pbuf_free_custom;
 1480              		.loc 1 716 5 is_stmt 1 view .LVU409
 1481              		.loc 1 716 29 is_stmt 0 view .LVU410
 1482 0016 0B4A     		ldr	r2, .L98+4
 1483 0018 0261     		str	r2, [r0, #16]
 717:LWIP/Target/ethernetif.c ****     /* Initialize the struct pbuf.
 718:LWIP/Target/ethernetif.c ****     * This must be performed whenever a buffer's allocated because it may be
 719:LWIP/Target/ethernetif.c ****     * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
 720:LWIP/Target/ethernetif.c ****     pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 1484              		.loc 1 720 5 is_stmt 1 view .LVU411
 1485 001a 4FF4C062 		mov	r2, #1536
 1486 001e 0192     		str	r2, [sp, #4]
 1487 0020 2268     		ldr	r2, [r4]
 1488 0022 0092     		str	r2, [sp]
 1489 0024 4122     		movs	r2, #65
 1490 0026 0021     		movs	r1, #0
 1491 0028 0846     		mov	r0, r1
 1492              	.LVL107:
 1493              		.loc 1 720 5 is_stmt 0 view .LVU412
 1494 002a FFF7FEFF 		bl	pbuf_alloced_custom
 1495              	.LVL108:
 1496              	.L94:
 721:LWIP/Target/ethernetif.c ****   }
 722:LWIP/Target/ethernetif.c ****   else
 723:LWIP/Target/ethernetif.c ****   {
 724:LWIP/Target/ethernetif.c ****     RxAllocStatus = RX_ALLOC_ERROR;
 725:LWIP/Target/ethernetif.c ****     *buff = NULL;
 726:LWIP/Target/ethernetif.c ****   }
 727:LWIP/Target/ethernetif.c **** /* USER CODE END HAL ETH RxAllocateCallback */
 728:LWIP/Target/ethernetif.c **** }
 1497              		.loc 1 728 1 view .LVU413
 1498 002e 02B0     		add	sp, sp, #8
 1499              	.LCFI31:
 1500              		.cfi_remember_state
 1501              		.cfi_def_cfa_offset 8
 1502              		@ sp needed
 1503 0030 10BD     		pop	{r4, pc}
 1504              	.LVL109:
ARM GAS  /tmp/ccJW5Vt8.s 			page 46


 1505              	.L95:
 1506              	.LCFI32:
 1507              		.cfi_restore_state
 724:LWIP/Target/ethernetif.c ****     *buff = NULL;
 1508              		.loc 1 724 5 is_stmt 1 view .LVU414
 724:LWIP/Target/ethernetif.c ****     *buff = NULL;
 1509              		.loc 1 724 19 is_stmt 0 view .LVU415
 1510 0032 054B     		ldr	r3, .L98+8
 1511 0034 0122     		movs	r2, #1
 1512 0036 1A70     		strb	r2, [r3]
 725:LWIP/Target/ethernetif.c ****   }
 1513              		.loc 1 725 5 is_stmt 1 view .LVU416
 725:LWIP/Target/ethernetif.c ****   }
 1514              		.loc 1 725 11 is_stmt 0 view .LVU417
 1515 0038 0023     		movs	r3, #0
 1516 003a 2360     		str	r3, [r4]
 1517              		.loc 1 728 1 view .LVU418
 1518 003c F7E7     		b	.L94
 1519              	.L99:
 1520 003e 00BF     		.align	2
 1521              	.L98:
 1522 0040 00000000 		.word	.LANCHOR3
 1523 0044 00000000 		.word	pbuf_free_custom
 1524 0048 00000000 		.word	.LANCHOR0
 1525              		.cfi_endproc
 1526              	.LFE183:
 1528              		.section	.text.HAL_ETH_RxLinkCallback,"ax",%progbits
 1529              		.align	1
 1530              		.global	HAL_ETH_RxLinkCallback
 1531              		.syntax unified
 1532              		.thumb
 1533              		.thumb_func
 1535              	HAL_ETH_RxLinkCallback:
 1536              	.LVL110:
 1537              	.LFB184:
 729:LWIP/Target/ethernetif.c **** 
 730:LWIP/Target/ethernetif.c **** void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
 731:LWIP/Target/ethernetif.c **** {
 1538              		.loc 1 731 1 is_stmt 1 view -0
 1539              		.cfi_startproc
 1540              		@ args = 0, pretend = 0, frame = 0
 1541              		@ frame_needed = 0, uses_anonymous_args = 0
 1542              		@ link register save eliminated.
 1543              		.loc 1 731 1 is_stmt 0 view .LVU420
 1544 0000 30B4     		push	{r4, r5}
 1545              	.LCFI33:
 1546              		.cfi_def_cfa_offset 8
 1547              		.cfi_offset 4, -8
 1548              		.cfi_offset 5, -4
 732:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN HAL ETH RxLinkCallback */
 733:LWIP/Target/ethernetif.c **** 
 734:LWIP/Target/ethernetif.c ****   struct pbuf **ppStart = (struct pbuf **)pStart;
 1549              		.loc 1 734 3 is_stmt 1 view .LVU421
 1550              	.LVL111:
 735:LWIP/Target/ethernetif.c ****   struct pbuf **ppEnd = (struct pbuf **)pEnd;
 1551              		.loc 1 735 3 view .LVU422
 736:LWIP/Target/ethernetif.c ****   struct pbuf *p = NULL;
ARM GAS  /tmp/ccJW5Vt8.s 			page 47


 1552              		.loc 1 736 3 view .LVU423
 737:LWIP/Target/ethernetif.c **** 
 738:LWIP/Target/ethernetif.c ****   /* Get the struct pbuf from the buff address. */
 739:LWIP/Target/ethernetif.c ****   p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 1553              		.loc 1 739 3 view .LVU424
 1554              		.loc 1 739 5 is_stmt 0 view .LVU425
 1555 0002 A2F12004 		sub	r4, r2, #32
 1556              	.LVL112:
 740:LWIP/Target/ethernetif.c ****   p->next = NULL;
 1557              		.loc 1 740 3 is_stmt 1 view .LVU426
 1558              		.loc 1 740 11 is_stmt 0 view .LVU427
 1559 0006 0025     		movs	r5, #0
 1560 0008 42F8205C 		str	r5, [r2, #-32]
 741:LWIP/Target/ethernetif.c ****   p->tot_len = 0;
 1561              		.loc 1 741 3 is_stmt 1 view .LVU428
 1562              		.loc 1 741 14 is_stmt 0 view .LVU429
 1563 000c 22F8185C 		strh	r5, [r2, #-24]	@ movhi
 742:LWIP/Target/ethernetif.c ****   p->len = Length;
 1564              		.loc 1 742 3 is_stmt 1 view .LVU430
 1565              		.loc 1 742 10 is_stmt 0 view .LVU431
 1566 0010 22F8163C 		strh	r3, [r2, #-22]	@ movhi
 743:LWIP/Target/ethernetif.c **** 
 744:LWIP/Target/ethernetif.c ****   /* Chain the buffer. */
 745:LWIP/Target/ethernetif.c ****   if (!*ppStart)
 1567              		.loc 1 745 3 is_stmt 1 view .LVU432
 1568              		.loc 1 745 8 is_stmt 0 view .LVU433
 1569 0014 0568     		ldr	r5, [r0]
 1570              		.loc 1 745 6 view .LVU434
 1571 0016 25B1     		cbz	r5, .L108
 746:LWIP/Target/ethernetif.c ****   {
 747:LWIP/Target/ethernetif.c ****     /* The first buffer of the packet. */
 748:LWIP/Target/ethernetif.c ****     *ppStart = p;
 749:LWIP/Target/ethernetif.c ****   }
 750:LWIP/Target/ethernetif.c ****   else
 751:LWIP/Target/ethernetif.c ****   {
 752:LWIP/Target/ethernetif.c ****     /* Chain the buffer to the end of the packet. */
 753:LWIP/Target/ethernetif.c ****     (*ppEnd)->next = p;
 1572              		.loc 1 753 5 is_stmt 1 view .LVU435
 1573              		.loc 1 753 6 is_stmt 0 view .LVU436
 1574 0018 0D68     		ldr	r5, [r1]
 1575              		.loc 1 753 20 view .LVU437
 1576 001a 2C60     		str	r4, [r5]
 1577              	.L102:
 754:LWIP/Target/ethernetif.c ****   }
 755:LWIP/Target/ethernetif.c ****   *ppEnd  = p;
 1578              		.loc 1 755 3 is_stmt 1 view .LVU438
 1579              		.loc 1 755 11 is_stmt 0 view .LVU439
 1580 001c 0C60     		str	r4, [r1]
 756:LWIP/Target/ethernetif.c **** 
 757:LWIP/Target/ethernetif.c ****   /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have it
 758:LWIP/Target/ethernetif.c ****    * set to its own length, plus the length of all the following pbufs in the chain. */
 759:LWIP/Target/ethernetif.c ****   for (p = *ppStart; p != NULL; p = p->next)
 1581              		.loc 1 759 3 is_stmt 1 view .LVU440
 1582              		.loc 1 759 10 is_stmt 0 view .LVU441
 1583 001e 0168     		ldr	r1, [r0]
 1584              	.LVL113:
 1585              		.loc 1 759 3 view .LVU442
ARM GAS  /tmp/ccJW5Vt8.s 			page 48


 1586 0020 05E0     		b	.L103
 1587              	.LVL114:
 1588              	.L108:
 748:LWIP/Target/ethernetif.c ****   }
 1589              		.loc 1 748 5 is_stmt 1 view .LVU443
 748:LWIP/Target/ethernetif.c ****   }
 1590              		.loc 1 748 14 is_stmt 0 view .LVU444
 1591 0022 0460     		str	r4, [r0]
 1592 0024 FAE7     		b	.L102
 1593              	.LVL115:
 1594              	.L104:
 760:LWIP/Target/ethernetif.c ****   {
 761:LWIP/Target/ethernetif.c ****     p->tot_len += Length;
 1595              		.loc 1 761 5 is_stmt 1 discriminator 3 view .LVU445
 1596              		.loc 1 761 16 is_stmt 0 discriminator 3 view .LVU446
 1597 0026 0889     		ldrh	r0, [r1, #8]
 1598 0028 1844     		add	r0, r0, r3
 1599 002a 0881     		strh	r0, [r1, #8]	@ movhi
 759:LWIP/Target/ethernetif.c ****   {
 1600              		.loc 1 759 33 is_stmt 1 discriminator 3 view .LVU447
 759:LWIP/Target/ethernetif.c ****   {
 1601              		.loc 1 759 35 is_stmt 0 discriminator 3 view .LVU448
 1602 002c 0968     		ldr	r1, [r1]
 1603              	.LVL116:
 1604              	.L103:
 759:LWIP/Target/ethernetif.c ****   {
 1605              		.loc 1 759 22 is_stmt 1 discriminator 1 view .LVU449
 759:LWIP/Target/ethernetif.c ****   {
 1606              		.loc 1 759 3 is_stmt 0 discriminator 1 view .LVU450
 1607 002e 0029     		cmp	r1, #0
 1608 0030 F9D1     		bne	.L104
 762:LWIP/Target/ethernetif.c ****   }
 763:LWIP/Target/ethernetif.c **** 
 764:LWIP/Target/ethernetif.c ****   /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
 765:LWIP/Target/ethernetif.c ****   SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 1609              		.loc 1 765 3 is_stmt 1 view .LVU451
 1610              	.LVL117:
 1611              	.LBB23:
 1612              	.LBI23:
 1613              		.file 2 "Drivers/CMSIS/Include/core_cm7.h"
   1:Drivers/CMSIS/Include/core_cm7.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/core_cm7.h ****  * @file     core_cm7.h
   3:Drivers/CMSIS/Include/core_cm7.h ****  * @brief    CMSIS Cortex-M7 Core Peripheral Access Layer Header File
   4:Drivers/CMSIS/Include/core_cm7.h ****  * @version  V5.0.8
   5:Drivers/CMSIS/Include/core_cm7.h ****  * @date     04. June 2018
   6:Drivers/CMSIS/Include/core_cm7.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/core_cm7.h **** /*
   8:Drivers/CMSIS/Include/core_cm7.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/core_cm7.h ****  *
  10:Drivers/CMSIS/Include/core_cm7.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/core_cm7.h ****  *
  12:Drivers/CMSIS/Include/core_cm7.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/core_cm7.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/core_cm7.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/core_cm7.h ****  *
  16:Drivers/CMSIS/Include/core_cm7.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/core_cm7.h ****  *
ARM GAS  /tmp/ccJW5Vt8.s 			page 49


  18:Drivers/CMSIS/Include/core_cm7.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/core_cm7.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/core_cm7.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/core_cm7.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/core_cm7.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/core_cm7.h ****  */
  24:Drivers/CMSIS/Include/core_cm7.h **** 
  25:Drivers/CMSIS/Include/core_cm7.h **** #if   defined ( __ICCARM__ )
  26:Drivers/CMSIS/Include/core_cm7.h ****   #pragma system_include         /* treat file as system include file for MISRA check */
  27:Drivers/CMSIS/Include/core_cm7.h **** #elif defined (__clang__)
  28:Drivers/CMSIS/Include/core_cm7.h ****   #pragma clang system_header   /* treat file as system include file */
  29:Drivers/CMSIS/Include/core_cm7.h **** #endif
  30:Drivers/CMSIS/Include/core_cm7.h **** 
  31:Drivers/CMSIS/Include/core_cm7.h **** #ifndef __CORE_CM7_H_GENERIC
  32:Drivers/CMSIS/Include/core_cm7.h **** #define __CORE_CM7_H_GENERIC
  33:Drivers/CMSIS/Include/core_cm7.h **** 
  34:Drivers/CMSIS/Include/core_cm7.h **** #include <stdint.h>
  35:Drivers/CMSIS/Include/core_cm7.h **** 
  36:Drivers/CMSIS/Include/core_cm7.h **** #ifdef __cplusplus
  37:Drivers/CMSIS/Include/core_cm7.h ****  extern "C" {
  38:Drivers/CMSIS/Include/core_cm7.h **** #endif
  39:Drivers/CMSIS/Include/core_cm7.h **** 
  40:Drivers/CMSIS/Include/core_cm7.h **** /**
  41:Drivers/CMSIS/Include/core_cm7.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  42:Drivers/CMSIS/Include/core_cm7.h ****   CMSIS violates the following MISRA-C:2004 rules:
  43:Drivers/CMSIS/Include/core_cm7.h **** 
  44:Drivers/CMSIS/Include/core_cm7.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  45:Drivers/CMSIS/Include/core_cm7.h ****      Function definitions in header files are used to allow 'inlining'.
  46:Drivers/CMSIS/Include/core_cm7.h **** 
  47:Drivers/CMSIS/Include/core_cm7.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  48:Drivers/CMSIS/Include/core_cm7.h ****      Unions are used for effective representation of core registers.
  49:Drivers/CMSIS/Include/core_cm7.h **** 
  50:Drivers/CMSIS/Include/core_cm7.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  51:Drivers/CMSIS/Include/core_cm7.h ****      Function-like macros are used to allow more efficient code.
  52:Drivers/CMSIS/Include/core_cm7.h ****  */
  53:Drivers/CMSIS/Include/core_cm7.h **** 
  54:Drivers/CMSIS/Include/core_cm7.h **** 
  55:Drivers/CMSIS/Include/core_cm7.h **** /*******************************************************************************
  56:Drivers/CMSIS/Include/core_cm7.h ****  *                 CMSIS definitions
  57:Drivers/CMSIS/Include/core_cm7.h ****  ******************************************************************************/
  58:Drivers/CMSIS/Include/core_cm7.h **** /**
  59:Drivers/CMSIS/Include/core_cm7.h ****   \ingroup Cortex_M7
  60:Drivers/CMSIS/Include/core_cm7.h ****   @{
  61:Drivers/CMSIS/Include/core_cm7.h ****  */
  62:Drivers/CMSIS/Include/core_cm7.h **** 
  63:Drivers/CMSIS/Include/core_cm7.h **** #include "cmsis_version.h"
  64:Drivers/CMSIS/Include/core_cm7.h **** 
  65:Drivers/CMSIS/Include/core_cm7.h **** /* CMSIS CM7 definitions */
  66:Drivers/CMSIS/Include/core_cm7.h **** #define __CM7_CMSIS_VERSION_MAIN  (__CM_CMSIS_VERSION_MAIN)                  /*!< \deprecated [31:1
  67:Drivers/CMSIS/Include/core_cm7.h **** #define __CM7_CMSIS_VERSION_SUB   ( __CM_CMSIS_VERSION_SUB)                  /*!< \deprecated [15:0
  68:Drivers/CMSIS/Include/core_cm7.h **** #define __CM7_CMSIS_VERSION       ((__CM7_CMSIS_VERSION_MAIN << 16U) | \
  69:Drivers/CMSIS/Include/core_cm7.h ****                                     __CM7_CMSIS_VERSION_SUB           )      /*!< \deprecated CMSIS
  70:Drivers/CMSIS/Include/core_cm7.h **** 
  71:Drivers/CMSIS/Include/core_cm7.h **** #define __CORTEX_M                (7U)                                       /*!< Cortex-M Core */
  72:Drivers/CMSIS/Include/core_cm7.h **** 
  73:Drivers/CMSIS/Include/core_cm7.h **** /** __FPU_USED indicates whether an FPU is used or not.
  74:Drivers/CMSIS/Include/core_cm7.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
ARM GAS  /tmp/ccJW5Vt8.s 			page 50


  75:Drivers/CMSIS/Include/core_cm7.h **** */
  76:Drivers/CMSIS/Include/core_cm7.h **** #if defined ( __CC_ARM )
  77:Drivers/CMSIS/Include/core_cm7.h ****   #if defined __TARGET_FPU_VFP
  78:Drivers/CMSIS/Include/core_cm7.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  79:Drivers/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       1U
  80:Drivers/CMSIS/Include/core_cm7.h ****     #else
  81:Drivers/CMSIS/Include/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  82:Drivers/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       0U
  83:Drivers/CMSIS/Include/core_cm7.h ****     #endif
  84:Drivers/CMSIS/Include/core_cm7.h ****   #else
  85:Drivers/CMSIS/Include/core_cm7.h ****     #define __FPU_USED         0U
  86:Drivers/CMSIS/Include/core_cm7.h ****   #endif
  87:Drivers/CMSIS/Include/core_cm7.h **** 
  88:Drivers/CMSIS/Include/core_cm7.h **** #elif defined (__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  89:Drivers/CMSIS/Include/core_cm7.h ****   #if defined __ARM_PCS_VFP
  90:Drivers/CMSIS/Include/core_cm7.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
  91:Drivers/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       1U
  92:Drivers/CMSIS/Include/core_cm7.h ****     #else
  93:Drivers/CMSIS/Include/core_cm7.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
  94:Drivers/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       0U
  95:Drivers/CMSIS/Include/core_cm7.h ****     #endif
  96:Drivers/CMSIS/Include/core_cm7.h ****   #else
  97:Drivers/CMSIS/Include/core_cm7.h ****     #define __FPU_USED         0U
  98:Drivers/CMSIS/Include/core_cm7.h ****   #endif
  99:Drivers/CMSIS/Include/core_cm7.h **** 
 100:Drivers/CMSIS/Include/core_cm7.h **** #elif defined ( __GNUC__ )
 101:Drivers/CMSIS/Include/core_cm7.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 102:Drivers/CMSIS/Include/core_cm7.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 103:Drivers/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       1U
 104:Drivers/CMSIS/Include/core_cm7.h ****     #else
 105:Drivers/CMSIS/Include/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 106:Drivers/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       0U
 107:Drivers/CMSIS/Include/core_cm7.h ****     #endif
 108:Drivers/CMSIS/Include/core_cm7.h ****   #else
 109:Drivers/CMSIS/Include/core_cm7.h ****     #define __FPU_USED         0U
 110:Drivers/CMSIS/Include/core_cm7.h ****   #endif
 111:Drivers/CMSIS/Include/core_cm7.h **** 
 112:Drivers/CMSIS/Include/core_cm7.h **** #elif defined ( __ICCARM__ )
 113:Drivers/CMSIS/Include/core_cm7.h ****   #if defined __ARMVFP__
 114:Drivers/CMSIS/Include/core_cm7.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 115:Drivers/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       1U
 116:Drivers/CMSIS/Include/core_cm7.h ****     #else
 117:Drivers/CMSIS/Include/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 118:Drivers/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       0U
 119:Drivers/CMSIS/Include/core_cm7.h ****     #endif
 120:Drivers/CMSIS/Include/core_cm7.h ****   #else
 121:Drivers/CMSIS/Include/core_cm7.h ****     #define __FPU_USED         0U
 122:Drivers/CMSIS/Include/core_cm7.h ****   #endif
 123:Drivers/CMSIS/Include/core_cm7.h **** 
 124:Drivers/CMSIS/Include/core_cm7.h **** #elif defined ( __TI_ARM__ )
 125:Drivers/CMSIS/Include/core_cm7.h ****   #if defined __TI_VFP_SUPPORT__
 126:Drivers/CMSIS/Include/core_cm7.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 127:Drivers/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       1U
 128:Drivers/CMSIS/Include/core_cm7.h ****     #else
 129:Drivers/CMSIS/Include/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:Drivers/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       0U
 131:Drivers/CMSIS/Include/core_cm7.h ****     #endif
ARM GAS  /tmp/ccJW5Vt8.s 			page 51


 132:Drivers/CMSIS/Include/core_cm7.h ****   #else
 133:Drivers/CMSIS/Include/core_cm7.h ****     #define __FPU_USED         0U
 134:Drivers/CMSIS/Include/core_cm7.h ****   #endif
 135:Drivers/CMSIS/Include/core_cm7.h **** 
 136:Drivers/CMSIS/Include/core_cm7.h **** #elif defined ( __TASKING__ )
 137:Drivers/CMSIS/Include/core_cm7.h ****   #if defined __FPU_VFP__
 138:Drivers/CMSIS/Include/core_cm7.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 139:Drivers/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       1U
 140:Drivers/CMSIS/Include/core_cm7.h ****     #else
 141:Drivers/CMSIS/Include/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 142:Drivers/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       0U
 143:Drivers/CMSIS/Include/core_cm7.h ****     #endif
 144:Drivers/CMSIS/Include/core_cm7.h ****   #else
 145:Drivers/CMSIS/Include/core_cm7.h ****     #define __FPU_USED         0U
 146:Drivers/CMSIS/Include/core_cm7.h ****   #endif
 147:Drivers/CMSIS/Include/core_cm7.h **** 
 148:Drivers/CMSIS/Include/core_cm7.h **** #elif defined ( __CSMC__ )
 149:Drivers/CMSIS/Include/core_cm7.h ****   #if ( __CSMC__ & 0x400U)
 150:Drivers/CMSIS/Include/core_cm7.h ****     #if defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)
 151:Drivers/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       1U
 152:Drivers/CMSIS/Include/core_cm7.h ****     #else
 153:Drivers/CMSIS/Include/core_cm7.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:Drivers/CMSIS/Include/core_cm7.h ****       #define __FPU_USED       0U
 155:Drivers/CMSIS/Include/core_cm7.h ****     #endif
 156:Drivers/CMSIS/Include/core_cm7.h ****   #else
 157:Drivers/CMSIS/Include/core_cm7.h ****     #define __FPU_USED         0U
 158:Drivers/CMSIS/Include/core_cm7.h ****   #endif
 159:Drivers/CMSIS/Include/core_cm7.h **** 
 160:Drivers/CMSIS/Include/core_cm7.h **** #endif
 161:Drivers/CMSIS/Include/core_cm7.h **** 
 162:Drivers/CMSIS/Include/core_cm7.h **** #include "cmsis_compiler.h"               /* CMSIS compiler specific defines */
 163:Drivers/CMSIS/Include/core_cm7.h **** 
 164:Drivers/CMSIS/Include/core_cm7.h **** 
 165:Drivers/CMSIS/Include/core_cm7.h **** #ifdef __cplusplus
 166:Drivers/CMSIS/Include/core_cm7.h **** }
 167:Drivers/CMSIS/Include/core_cm7.h **** #endif
 168:Drivers/CMSIS/Include/core_cm7.h **** 
 169:Drivers/CMSIS/Include/core_cm7.h **** #endif /* __CORE_CM7_H_GENERIC */
 170:Drivers/CMSIS/Include/core_cm7.h **** 
 171:Drivers/CMSIS/Include/core_cm7.h **** #ifndef __CMSIS_GENERIC
 172:Drivers/CMSIS/Include/core_cm7.h **** 
 173:Drivers/CMSIS/Include/core_cm7.h **** #ifndef __CORE_CM7_H_DEPENDANT
 174:Drivers/CMSIS/Include/core_cm7.h **** #define __CORE_CM7_H_DEPENDANT
 175:Drivers/CMSIS/Include/core_cm7.h **** 
 176:Drivers/CMSIS/Include/core_cm7.h **** #ifdef __cplusplus
 177:Drivers/CMSIS/Include/core_cm7.h ****  extern "C" {
 178:Drivers/CMSIS/Include/core_cm7.h **** #endif
 179:Drivers/CMSIS/Include/core_cm7.h **** 
 180:Drivers/CMSIS/Include/core_cm7.h **** /* check device defines and use defaults */
 181:Drivers/CMSIS/Include/core_cm7.h **** #if defined __CHECK_DEVICE_DEFINES
 182:Drivers/CMSIS/Include/core_cm7.h ****   #ifndef __CM7_REV
 183:Drivers/CMSIS/Include/core_cm7.h ****     #define __CM7_REV               0x0000U
 184:Drivers/CMSIS/Include/core_cm7.h ****     #warning "__CM7_REV not defined in device header file; using default!"
 185:Drivers/CMSIS/Include/core_cm7.h ****   #endif
 186:Drivers/CMSIS/Include/core_cm7.h **** 
 187:Drivers/CMSIS/Include/core_cm7.h ****   #ifndef __FPU_PRESENT
 188:Drivers/CMSIS/Include/core_cm7.h ****     #define __FPU_PRESENT             0U
ARM GAS  /tmp/ccJW5Vt8.s 			page 52


 189:Drivers/CMSIS/Include/core_cm7.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 190:Drivers/CMSIS/Include/core_cm7.h ****   #endif
 191:Drivers/CMSIS/Include/core_cm7.h **** 
 192:Drivers/CMSIS/Include/core_cm7.h ****   #ifndef __MPU_PRESENT
 193:Drivers/CMSIS/Include/core_cm7.h ****     #define __MPU_PRESENT             0U
 194:Drivers/CMSIS/Include/core_cm7.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 195:Drivers/CMSIS/Include/core_cm7.h ****   #endif
 196:Drivers/CMSIS/Include/core_cm7.h **** 
 197:Drivers/CMSIS/Include/core_cm7.h ****   #ifndef __ICACHE_PRESENT
 198:Drivers/CMSIS/Include/core_cm7.h ****     #define __ICACHE_PRESENT          0U
 199:Drivers/CMSIS/Include/core_cm7.h ****     #warning "__ICACHE_PRESENT not defined in device header file; using default!"
 200:Drivers/CMSIS/Include/core_cm7.h ****   #endif
 201:Drivers/CMSIS/Include/core_cm7.h **** 
 202:Drivers/CMSIS/Include/core_cm7.h ****   #ifndef __DCACHE_PRESENT
 203:Drivers/CMSIS/Include/core_cm7.h ****     #define __DCACHE_PRESENT          0U
 204:Drivers/CMSIS/Include/core_cm7.h ****     #warning "__DCACHE_PRESENT not defined in device header file; using default!"
 205:Drivers/CMSIS/Include/core_cm7.h ****   #endif
 206:Drivers/CMSIS/Include/core_cm7.h **** 
 207:Drivers/CMSIS/Include/core_cm7.h ****   #ifndef __DTCM_PRESENT
 208:Drivers/CMSIS/Include/core_cm7.h ****     #define __DTCM_PRESENT            0U
 209:Drivers/CMSIS/Include/core_cm7.h ****     #warning "__DTCM_PRESENT        not defined in device header file; using default!"
 210:Drivers/CMSIS/Include/core_cm7.h ****   #endif
 211:Drivers/CMSIS/Include/core_cm7.h **** 
 212:Drivers/CMSIS/Include/core_cm7.h ****   #ifndef __NVIC_PRIO_BITS
 213:Drivers/CMSIS/Include/core_cm7.h ****     #define __NVIC_PRIO_BITS          3U
 214:Drivers/CMSIS/Include/core_cm7.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 215:Drivers/CMSIS/Include/core_cm7.h ****   #endif
 216:Drivers/CMSIS/Include/core_cm7.h **** 
 217:Drivers/CMSIS/Include/core_cm7.h ****   #ifndef __Vendor_SysTickConfig
 218:Drivers/CMSIS/Include/core_cm7.h ****     #define __Vendor_SysTickConfig    0U
 219:Drivers/CMSIS/Include/core_cm7.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 220:Drivers/CMSIS/Include/core_cm7.h ****   #endif
 221:Drivers/CMSIS/Include/core_cm7.h **** #endif
 222:Drivers/CMSIS/Include/core_cm7.h **** 
 223:Drivers/CMSIS/Include/core_cm7.h **** /* IO definitions (access restrictions to peripheral registers) */
 224:Drivers/CMSIS/Include/core_cm7.h **** /**
 225:Drivers/CMSIS/Include/core_cm7.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 226:Drivers/CMSIS/Include/core_cm7.h **** 
 227:Drivers/CMSIS/Include/core_cm7.h ****     <strong>IO Type Qualifiers</strong> are used
 228:Drivers/CMSIS/Include/core_cm7.h ****     \li to specify the access to peripheral variables.
 229:Drivers/CMSIS/Include/core_cm7.h ****     \li for automatic generation of peripheral register debug information.
 230:Drivers/CMSIS/Include/core_cm7.h **** */
 231:Drivers/CMSIS/Include/core_cm7.h **** #ifdef __cplusplus
 232:Drivers/CMSIS/Include/core_cm7.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 233:Drivers/CMSIS/Include/core_cm7.h **** #else
 234:Drivers/CMSIS/Include/core_cm7.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 235:Drivers/CMSIS/Include/core_cm7.h **** #endif
 236:Drivers/CMSIS/Include/core_cm7.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 237:Drivers/CMSIS/Include/core_cm7.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 238:Drivers/CMSIS/Include/core_cm7.h **** 
 239:Drivers/CMSIS/Include/core_cm7.h **** /* following defines should be used for structure members */
 240:Drivers/CMSIS/Include/core_cm7.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 241:Drivers/CMSIS/Include/core_cm7.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 242:Drivers/CMSIS/Include/core_cm7.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 243:Drivers/CMSIS/Include/core_cm7.h **** 
 244:Drivers/CMSIS/Include/core_cm7.h **** /*@} end of group Cortex_M7 */
 245:Drivers/CMSIS/Include/core_cm7.h **** 
ARM GAS  /tmp/ccJW5Vt8.s 			page 53


 246:Drivers/CMSIS/Include/core_cm7.h **** 
 247:Drivers/CMSIS/Include/core_cm7.h **** 
 248:Drivers/CMSIS/Include/core_cm7.h **** /*******************************************************************************
 249:Drivers/CMSIS/Include/core_cm7.h ****  *                 Register Abstraction
 250:Drivers/CMSIS/Include/core_cm7.h ****   Core Register contain:
 251:Drivers/CMSIS/Include/core_cm7.h ****   - Core Register
 252:Drivers/CMSIS/Include/core_cm7.h ****   - Core NVIC Register
 253:Drivers/CMSIS/Include/core_cm7.h ****   - Core SCB Register
 254:Drivers/CMSIS/Include/core_cm7.h ****   - Core SysTick Register
 255:Drivers/CMSIS/Include/core_cm7.h ****   - Core Debug Register
 256:Drivers/CMSIS/Include/core_cm7.h ****   - Core MPU Register
 257:Drivers/CMSIS/Include/core_cm7.h ****   - Core FPU Register
 258:Drivers/CMSIS/Include/core_cm7.h ****  ******************************************************************************/
 259:Drivers/CMSIS/Include/core_cm7.h **** /**
 260:Drivers/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 261:Drivers/CMSIS/Include/core_cm7.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 262:Drivers/CMSIS/Include/core_cm7.h **** */
 263:Drivers/CMSIS/Include/core_cm7.h **** 
 264:Drivers/CMSIS/Include/core_cm7.h **** /**
 265:Drivers/CMSIS/Include/core_cm7.h ****   \ingroup    CMSIS_core_register
 266:Drivers/CMSIS/Include/core_cm7.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 267:Drivers/CMSIS/Include/core_cm7.h ****   \brief      Core Register type definitions.
 268:Drivers/CMSIS/Include/core_cm7.h ****   @{
 269:Drivers/CMSIS/Include/core_cm7.h ****  */
 270:Drivers/CMSIS/Include/core_cm7.h **** 
 271:Drivers/CMSIS/Include/core_cm7.h **** /**
 272:Drivers/CMSIS/Include/core_cm7.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 273:Drivers/CMSIS/Include/core_cm7.h ****  */
 274:Drivers/CMSIS/Include/core_cm7.h **** typedef union
 275:Drivers/CMSIS/Include/core_cm7.h **** {
 276:Drivers/CMSIS/Include/core_cm7.h ****   struct
 277:Drivers/CMSIS/Include/core_cm7.h ****   {
 278:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 279:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 280:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 281:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 282:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 283:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 284:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 285:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 286:Drivers/CMSIS/Include/core_cm7.h ****   } b;                                   /*!< Structure used for bit  access */
 287:Drivers/CMSIS/Include/core_cm7.h ****   uint32_t w;                            /*!< Type      used for word access */
 288:Drivers/CMSIS/Include/core_cm7.h **** } APSR_Type;
 289:Drivers/CMSIS/Include/core_cm7.h **** 
 290:Drivers/CMSIS/Include/core_cm7.h **** /* APSR Register Definitions */
 291:Drivers/CMSIS/Include/core_cm7.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 292:Drivers/CMSIS/Include/core_cm7.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 293:Drivers/CMSIS/Include/core_cm7.h **** 
 294:Drivers/CMSIS/Include/core_cm7.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 295:Drivers/CMSIS/Include/core_cm7.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 296:Drivers/CMSIS/Include/core_cm7.h **** 
 297:Drivers/CMSIS/Include/core_cm7.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 298:Drivers/CMSIS/Include/core_cm7.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 299:Drivers/CMSIS/Include/core_cm7.h **** 
 300:Drivers/CMSIS/Include/core_cm7.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 301:Drivers/CMSIS/Include/core_cm7.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 302:Drivers/CMSIS/Include/core_cm7.h **** 
ARM GAS  /tmp/ccJW5Vt8.s 			page 54


 303:Drivers/CMSIS/Include/core_cm7.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 304:Drivers/CMSIS/Include/core_cm7.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 305:Drivers/CMSIS/Include/core_cm7.h **** 
 306:Drivers/CMSIS/Include/core_cm7.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 307:Drivers/CMSIS/Include/core_cm7.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 308:Drivers/CMSIS/Include/core_cm7.h **** 
 309:Drivers/CMSIS/Include/core_cm7.h **** 
 310:Drivers/CMSIS/Include/core_cm7.h **** /**
 311:Drivers/CMSIS/Include/core_cm7.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 312:Drivers/CMSIS/Include/core_cm7.h ****  */
 313:Drivers/CMSIS/Include/core_cm7.h **** typedef union
 314:Drivers/CMSIS/Include/core_cm7.h **** {
 315:Drivers/CMSIS/Include/core_cm7.h ****   struct
 316:Drivers/CMSIS/Include/core_cm7.h ****   {
 317:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 318:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 319:Drivers/CMSIS/Include/core_cm7.h ****   } b;                                   /*!< Structure used for bit  access */
 320:Drivers/CMSIS/Include/core_cm7.h ****   uint32_t w;                            /*!< Type      used for word access */
 321:Drivers/CMSIS/Include/core_cm7.h **** } IPSR_Type;
 322:Drivers/CMSIS/Include/core_cm7.h **** 
 323:Drivers/CMSIS/Include/core_cm7.h **** /* IPSR Register Definitions */
 324:Drivers/CMSIS/Include/core_cm7.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 325:Drivers/CMSIS/Include/core_cm7.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 326:Drivers/CMSIS/Include/core_cm7.h **** 
 327:Drivers/CMSIS/Include/core_cm7.h **** 
 328:Drivers/CMSIS/Include/core_cm7.h **** /**
 329:Drivers/CMSIS/Include/core_cm7.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 330:Drivers/CMSIS/Include/core_cm7.h ****  */
 331:Drivers/CMSIS/Include/core_cm7.h **** typedef union
 332:Drivers/CMSIS/Include/core_cm7.h **** {
 333:Drivers/CMSIS/Include/core_cm7.h ****   struct
 334:Drivers/CMSIS/Include/core_cm7.h ****   {
 335:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 336:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t _reserved0:1;               /*!< bit:      9  Reserved */
 337:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t ICI_IT_1:6;                 /*!< bit: 10..15  ICI/IT part 1 */
 338:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 339:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 340:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit */
 341:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t ICI_IT_2:2;                 /*!< bit: 25..26  ICI/IT part 2 */
 342:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 343:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 344:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 345:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 346:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 347:Drivers/CMSIS/Include/core_cm7.h ****   } b;                                   /*!< Structure used for bit  access */
 348:Drivers/CMSIS/Include/core_cm7.h ****   uint32_t w;                            /*!< Type      used for word access */
 349:Drivers/CMSIS/Include/core_cm7.h **** } xPSR_Type;
 350:Drivers/CMSIS/Include/core_cm7.h **** 
 351:Drivers/CMSIS/Include/core_cm7.h **** /* xPSR Register Definitions */
 352:Drivers/CMSIS/Include/core_cm7.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 353:Drivers/CMSIS/Include/core_cm7.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 354:Drivers/CMSIS/Include/core_cm7.h **** 
 355:Drivers/CMSIS/Include/core_cm7.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 356:Drivers/CMSIS/Include/core_cm7.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 357:Drivers/CMSIS/Include/core_cm7.h **** 
 358:Drivers/CMSIS/Include/core_cm7.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 359:Drivers/CMSIS/Include/core_cm7.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
ARM GAS  /tmp/ccJW5Vt8.s 			page 55


 360:Drivers/CMSIS/Include/core_cm7.h **** 
 361:Drivers/CMSIS/Include/core_cm7.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 362:Drivers/CMSIS/Include/core_cm7.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 363:Drivers/CMSIS/Include/core_cm7.h **** 
 364:Drivers/CMSIS/Include/core_cm7.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 365:Drivers/CMSIS/Include/core_cm7.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 366:Drivers/CMSIS/Include/core_cm7.h **** 
 367:Drivers/CMSIS/Include/core_cm7.h **** #define xPSR_ICI_IT_2_Pos                  25U                                            /*!< xPSR
 368:Drivers/CMSIS/Include/core_cm7.h **** #define xPSR_ICI_IT_2_Msk                  (3UL << xPSR_ICI_IT_2_Pos)                     /*!< xPSR
 369:Drivers/CMSIS/Include/core_cm7.h **** 
 370:Drivers/CMSIS/Include/core_cm7.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 371:Drivers/CMSIS/Include/core_cm7.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 372:Drivers/CMSIS/Include/core_cm7.h **** 
 373:Drivers/CMSIS/Include/core_cm7.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 374:Drivers/CMSIS/Include/core_cm7.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 375:Drivers/CMSIS/Include/core_cm7.h **** 
 376:Drivers/CMSIS/Include/core_cm7.h **** #define xPSR_ICI_IT_1_Pos                  10U                                            /*!< xPSR
 377:Drivers/CMSIS/Include/core_cm7.h **** #define xPSR_ICI_IT_1_Msk                  (0x3FUL << xPSR_ICI_IT_1_Pos)                  /*!< xPSR
 378:Drivers/CMSIS/Include/core_cm7.h **** 
 379:Drivers/CMSIS/Include/core_cm7.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 380:Drivers/CMSIS/Include/core_cm7.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 381:Drivers/CMSIS/Include/core_cm7.h **** 
 382:Drivers/CMSIS/Include/core_cm7.h **** 
 383:Drivers/CMSIS/Include/core_cm7.h **** /**
 384:Drivers/CMSIS/Include/core_cm7.h ****   \brief  Union type to access the Control Registers (CONTROL).
 385:Drivers/CMSIS/Include/core_cm7.h ****  */
 386:Drivers/CMSIS/Include/core_cm7.h **** typedef union
 387:Drivers/CMSIS/Include/core_cm7.h **** {
 388:Drivers/CMSIS/Include/core_cm7.h ****   struct
 389:Drivers/CMSIS/Include/core_cm7.h ****   {
 390:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 391:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 392:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 393:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 394:Drivers/CMSIS/Include/core_cm7.h ****   } b;                                   /*!< Structure used for bit  access */
 395:Drivers/CMSIS/Include/core_cm7.h ****   uint32_t w;                            /*!< Type      used for word access */
 396:Drivers/CMSIS/Include/core_cm7.h **** } CONTROL_Type;
 397:Drivers/CMSIS/Include/core_cm7.h **** 
 398:Drivers/CMSIS/Include/core_cm7.h **** /* CONTROL Register Definitions */
 399:Drivers/CMSIS/Include/core_cm7.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 400:Drivers/CMSIS/Include/core_cm7.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 401:Drivers/CMSIS/Include/core_cm7.h **** 
 402:Drivers/CMSIS/Include/core_cm7.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 403:Drivers/CMSIS/Include/core_cm7.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 404:Drivers/CMSIS/Include/core_cm7.h **** 
 405:Drivers/CMSIS/Include/core_cm7.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 406:Drivers/CMSIS/Include/core_cm7.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 407:Drivers/CMSIS/Include/core_cm7.h **** 
 408:Drivers/CMSIS/Include/core_cm7.h **** /*@} end of group CMSIS_CORE */
 409:Drivers/CMSIS/Include/core_cm7.h **** 
 410:Drivers/CMSIS/Include/core_cm7.h **** 
 411:Drivers/CMSIS/Include/core_cm7.h **** /**
 412:Drivers/CMSIS/Include/core_cm7.h ****   \ingroup    CMSIS_core_register
 413:Drivers/CMSIS/Include/core_cm7.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 414:Drivers/CMSIS/Include/core_cm7.h ****   \brief      Type definitions for the NVIC Registers
 415:Drivers/CMSIS/Include/core_cm7.h ****   @{
 416:Drivers/CMSIS/Include/core_cm7.h ****  */
ARM GAS  /tmp/ccJW5Vt8.s 			page 56


 417:Drivers/CMSIS/Include/core_cm7.h **** 
 418:Drivers/CMSIS/Include/core_cm7.h **** /**
 419:Drivers/CMSIS/Include/core_cm7.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 420:Drivers/CMSIS/Include/core_cm7.h ****  */
 421:Drivers/CMSIS/Include/core_cm7.h **** typedef struct
 422:Drivers/CMSIS/Include/core_cm7.h **** {
 423:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 424:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED0[24U];
 425:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 426:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RSERVED1[24U];
 427:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 428:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED2[24U];
 429:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 430:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED3[24U];
 431:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 432:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED4[56U];
 433:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 434:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED5[644U];
 435:Drivers/CMSIS/Include/core_cm7.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 436:Drivers/CMSIS/Include/core_cm7.h **** }  NVIC_Type;
 437:Drivers/CMSIS/Include/core_cm7.h **** 
 438:Drivers/CMSIS/Include/core_cm7.h **** /* Software Triggered Interrupt Register Definitions */
 439:Drivers/CMSIS/Include/core_cm7.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 440:Drivers/CMSIS/Include/core_cm7.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 441:Drivers/CMSIS/Include/core_cm7.h **** 
 442:Drivers/CMSIS/Include/core_cm7.h **** /*@} end of group CMSIS_NVIC */
 443:Drivers/CMSIS/Include/core_cm7.h **** 
 444:Drivers/CMSIS/Include/core_cm7.h **** 
 445:Drivers/CMSIS/Include/core_cm7.h **** /**
 446:Drivers/CMSIS/Include/core_cm7.h ****   \ingroup  CMSIS_core_register
 447:Drivers/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 448:Drivers/CMSIS/Include/core_cm7.h ****   \brief    Type definitions for the System Control Block Registers
 449:Drivers/CMSIS/Include/core_cm7.h ****   @{
 450:Drivers/CMSIS/Include/core_cm7.h ****  */
 451:Drivers/CMSIS/Include/core_cm7.h **** 
 452:Drivers/CMSIS/Include/core_cm7.h **** /**
 453:Drivers/CMSIS/Include/core_cm7.h ****   \brief  Structure type to access the System Control Block (SCB).
 454:Drivers/CMSIS/Include/core_cm7.h ****  */
 455:Drivers/CMSIS/Include/core_cm7.h **** typedef struct
 456:Drivers/CMSIS/Include/core_cm7.h **** {
 457:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 458:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 459:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 460:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 461:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 462:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 463:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint8_t  SHPR[12U];              /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 464:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 465:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 466:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 467:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 468:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 469:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 470:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 471:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t ID_PFR[2U];             /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 472:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t ID_DFR;                 /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 473:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t ID_AFR;                 /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
ARM GAS  /tmp/ccJW5Vt8.s 			page 57


 474:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t ID_MFR[4U];             /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 475:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t ID_ISAR[5U];            /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 476:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED0[1U];
 477:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t CLIDR;                  /*!< Offset: 0x078 (R/ )  Cache Level ID register */
 478:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t CTR;                    /*!< Offset: 0x07C (R/ )  Cache Type register */
 479:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t CCSIDR;                 /*!< Offset: 0x080 (R/ )  Cache Size ID Register */
 480:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CSSELR;                 /*!< Offset: 0x084 (R/W)  Cache Size Selection Register */
 481:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 482:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED3[93U];
 483:Drivers/CMSIS/Include/core_cm7.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0x200 ( /W)  Software Triggered Interrupt Reg
 484:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED4[15U];
 485:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x240 (R/ )  Media and VFP Feature Register 0
 486:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x244 (R/ )  Media and VFP Feature Register 1
 487:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t MVFR2;                  /*!< Offset: 0x248 (R/ )  Media and VFP Feature Register 2
 488:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED5[1U];
 489:Drivers/CMSIS/Include/core_cm7.h ****   __OM  uint32_t ICIALLU;                /*!< Offset: 0x250 ( /W)  I-Cache Invalidate All to PoU */
 490:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED6[1U];
 491:Drivers/CMSIS/Include/core_cm7.h ****   __OM  uint32_t ICIMVAU;                /*!< Offset: 0x258 ( /W)  I-Cache Invalidate by MVA to PoU
 492:Drivers/CMSIS/Include/core_cm7.h ****   __OM  uint32_t DCIMVAC;                /*!< Offset: 0x25C ( /W)  D-Cache Invalidate by MVA to PoC
 493:Drivers/CMSIS/Include/core_cm7.h ****   __OM  uint32_t DCISW;                  /*!< Offset: 0x260 ( /W)  D-Cache Invalidate by Set-way */
 494:Drivers/CMSIS/Include/core_cm7.h ****   __OM  uint32_t DCCMVAU;                /*!< Offset: 0x264 ( /W)  D-Cache Clean by MVA to PoU */
 495:Drivers/CMSIS/Include/core_cm7.h ****   __OM  uint32_t DCCMVAC;                /*!< Offset: 0x268 ( /W)  D-Cache Clean by MVA to PoC */
 496:Drivers/CMSIS/Include/core_cm7.h ****   __OM  uint32_t DCCSW;                  /*!< Offset: 0x26C ( /W)  D-Cache Clean by Set-way */
 497:Drivers/CMSIS/Include/core_cm7.h ****   __OM  uint32_t DCCIMVAC;               /*!< Offset: 0x270 ( /W)  D-Cache Clean and Invalidate by 
 498:Drivers/CMSIS/Include/core_cm7.h ****   __OM  uint32_t DCCISW;                 /*!< Offset: 0x274 ( /W)  D-Cache Clean and Invalidate by 
 499:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED7[6U];
 500:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t ITCMCR;                 /*!< Offset: 0x290 (R/W)  Instruction Tightly-Coupled Memo
 501:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t DTCMCR;                 /*!< Offset: 0x294 (R/W)  Data Tightly-Coupled Memory Cont
 502:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t AHBPCR;                 /*!< Offset: 0x298 (R/W)  AHBP Control Register */
 503:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CACR;                   /*!< Offset: 0x29C (R/W)  L1 Cache Control Register */
 504:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t AHBSCR;                 /*!< Offset: 0x2A0 (R/W)  AHB Slave Control Register */
 505:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED8[1U];
 506:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t ABFSR;                  /*!< Offset: 0x2A8 (R/W)  Auxiliary Bus Fault Status Regis
 507:Drivers/CMSIS/Include/core_cm7.h **** } SCB_Type;
 508:Drivers/CMSIS/Include/core_cm7.h **** 
 509:Drivers/CMSIS/Include/core_cm7.h **** /* SCB CPUID Register Definitions */
 510:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 511:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 512:Drivers/CMSIS/Include/core_cm7.h **** 
 513:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 514:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 515:Drivers/CMSIS/Include/core_cm7.h **** 
 516:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 517:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 518:Drivers/CMSIS/Include/core_cm7.h **** 
 519:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 520:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 521:Drivers/CMSIS/Include/core_cm7.h **** 
 522:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 523:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 524:Drivers/CMSIS/Include/core_cm7.h **** 
 525:Drivers/CMSIS/Include/core_cm7.h **** /* SCB Interrupt Control State Register Definitions */
 526:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 527:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 528:Drivers/CMSIS/Include/core_cm7.h **** 
 529:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 530:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
ARM GAS  /tmp/ccJW5Vt8.s 			page 58


 531:Drivers/CMSIS/Include/core_cm7.h **** 
 532:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 533:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 534:Drivers/CMSIS/Include/core_cm7.h **** 
 535:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 536:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 537:Drivers/CMSIS/Include/core_cm7.h **** 
 538:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 539:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 540:Drivers/CMSIS/Include/core_cm7.h **** 
 541:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 542:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 543:Drivers/CMSIS/Include/core_cm7.h **** 
 544:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 545:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 546:Drivers/CMSIS/Include/core_cm7.h **** 
 547:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 548:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 549:Drivers/CMSIS/Include/core_cm7.h **** 
 550:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 551:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 552:Drivers/CMSIS/Include/core_cm7.h **** 
 553:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 554:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 555:Drivers/CMSIS/Include/core_cm7.h **** 
 556:Drivers/CMSIS/Include/core_cm7.h **** /* SCB Vector Table Offset Register Definitions */
 557:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 558:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 559:Drivers/CMSIS/Include/core_cm7.h **** 
 560:Drivers/CMSIS/Include/core_cm7.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 561:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 562:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 563:Drivers/CMSIS/Include/core_cm7.h **** 
 564:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 565:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 566:Drivers/CMSIS/Include/core_cm7.h **** 
 567:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 568:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 569:Drivers/CMSIS/Include/core_cm7.h **** 
 570:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 571:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 572:Drivers/CMSIS/Include/core_cm7.h **** 
 573:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 574:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 575:Drivers/CMSIS/Include/core_cm7.h **** 
 576:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 577:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 578:Drivers/CMSIS/Include/core_cm7.h **** 
 579:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 580:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 581:Drivers/CMSIS/Include/core_cm7.h **** 
 582:Drivers/CMSIS/Include/core_cm7.h **** /* SCB System Control Register Definitions */
 583:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 584:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 585:Drivers/CMSIS/Include/core_cm7.h **** 
 586:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 587:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
ARM GAS  /tmp/ccJW5Vt8.s 			page 59


 588:Drivers/CMSIS/Include/core_cm7.h **** 
 589:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 590:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 591:Drivers/CMSIS/Include/core_cm7.h **** 
 592:Drivers/CMSIS/Include/core_cm7.h **** /* SCB Configuration Control Register Definitions */
 593:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCR_BP_Pos                      18U                                           /*!< SCB 
 594:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCR_BP_Msk                     (1UL << SCB_CCR_BP_Pos)                        /*!< SCB 
 595:Drivers/CMSIS/Include/core_cm7.h **** 
 596:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCR_IC_Pos                      17U                                           /*!< SCB 
 597:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCR_IC_Msk                     (1UL << SCB_CCR_IC_Pos)                        /*!< SCB 
 598:Drivers/CMSIS/Include/core_cm7.h **** 
 599:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCR_DC_Pos                      16U                                           /*!< SCB 
 600:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCR_DC_Msk                     (1UL << SCB_CCR_DC_Pos)                        /*!< SCB 
 601:Drivers/CMSIS/Include/core_cm7.h **** 
 602:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 603:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 604:Drivers/CMSIS/Include/core_cm7.h **** 
 605:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 606:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 607:Drivers/CMSIS/Include/core_cm7.h **** 
 608:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 609:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 610:Drivers/CMSIS/Include/core_cm7.h **** 
 611:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 612:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 613:Drivers/CMSIS/Include/core_cm7.h **** 
 614:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 615:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 616:Drivers/CMSIS/Include/core_cm7.h **** 
 617:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 618:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 619:Drivers/CMSIS/Include/core_cm7.h **** 
 620:Drivers/CMSIS/Include/core_cm7.h **** /* SCB System Handler Control and State Register Definitions */
 621:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 622:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 623:Drivers/CMSIS/Include/core_cm7.h **** 
 624:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 625:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 626:Drivers/CMSIS/Include/core_cm7.h **** 
 627:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 628:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 629:Drivers/CMSIS/Include/core_cm7.h **** 
 630:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 631:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 632:Drivers/CMSIS/Include/core_cm7.h **** 
 633:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 634:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 635:Drivers/CMSIS/Include/core_cm7.h **** 
 636:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 637:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 638:Drivers/CMSIS/Include/core_cm7.h **** 
 639:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 640:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 641:Drivers/CMSIS/Include/core_cm7.h **** 
 642:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 643:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 644:Drivers/CMSIS/Include/core_cm7.h **** 
ARM GAS  /tmp/ccJW5Vt8.s 			page 60


 645:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 646:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 647:Drivers/CMSIS/Include/core_cm7.h **** 
 648:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 649:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 650:Drivers/CMSIS/Include/core_cm7.h **** 
 651:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 652:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 653:Drivers/CMSIS/Include/core_cm7.h **** 
 654:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 655:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 656:Drivers/CMSIS/Include/core_cm7.h **** 
 657:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 658:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 659:Drivers/CMSIS/Include/core_cm7.h **** 
 660:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 661:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 662:Drivers/CMSIS/Include/core_cm7.h **** 
 663:Drivers/CMSIS/Include/core_cm7.h **** /* SCB Configurable Fault Status Register Definitions */
 664:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 665:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 666:Drivers/CMSIS/Include/core_cm7.h **** 
 667:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 668:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 669:Drivers/CMSIS/Include/core_cm7.h **** 
 670:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 671:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 672:Drivers/CMSIS/Include/core_cm7.h **** 
 673:Drivers/CMSIS/Include/core_cm7.h **** /* MemManage Fault Status Register (part of SCB Configurable Fault Status Register) */
 674:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_MMARVALID_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 7U)               /*!< SCB 
 675:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_MMARVALID_Msk             (1UL << SCB_CFSR_MMARVALID_Pos)                /*!< SCB 
 676:Drivers/CMSIS/Include/core_cm7.h **** 
 677:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_MLSPERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 5U)               /*!< SCB 
 678:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_MLSPERR_Msk               (1UL << SCB_CFSR_MLSPERR_Pos)                  /*!< SCB 
 679:Drivers/CMSIS/Include/core_cm7.h **** 
 680:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_MSTKERR_Pos               (SCB_SHCSR_MEMFAULTACT_Pos + 4U)               /*!< SCB 
 681:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_MSTKERR_Msk               (1UL << SCB_CFSR_MSTKERR_Pos)                  /*!< SCB 
 682:Drivers/CMSIS/Include/core_cm7.h **** 
 683:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_MUNSTKERR_Pos             (SCB_SHCSR_MEMFAULTACT_Pos + 3U)               /*!< SCB 
 684:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_MUNSTKERR_Msk             (1UL << SCB_CFSR_MUNSTKERR_Pos)                /*!< SCB 
 685:Drivers/CMSIS/Include/core_cm7.h **** 
 686:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_DACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 1U)               /*!< SCB 
 687:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_DACCVIOL_Msk              (1UL << SCB_CFSR_DACCVIOL_Pos)                 /*!< SCB 
 688:Drivers/CMSIS/Include/core_cm7.h **** 
 689:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_IACCVIOL_Pos              (SCB_SHCSR_MEMFAULTACT_Pos + 0U)               /*!< SCB 
 690:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_IACCVIOL_Msk              (1UL /*<< SCB_CFSR_IACCVIOL_Pos*/)             /*!< SCB 
 691:Drivers/CMSIS/Include/core_cm7.h **** 
 692:Drivers/CMSIS/Include/core_cm7.h **** /* BusFault Status Register (part of SCB Configurable Fault Status Register) */
 693:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_BFARVALID_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 7U)                  /*!< SCB 
 694:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_BFARVALID_Msk            (1UL << SCB_CFSR_BFARVALID_Pos)                 /*!< SCB 
 695:Drivers/CMSIS/Include/core_cm7.h **** 
 696:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_LSPERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 5U)                  /*!< SCB 
 697:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_LSPERR_Msk               (1UL << SCB_CFSR_LSPERR_Pos)                    /*!< SCB 
 698:Drivers/CMSIS/Include/core_cm7.h **** 
 699:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_STKERR_Pos               (SCB_CFSR_BUSFAULTSR_Pos + 4U)                  /*!< SCB 
 700:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_STKERR_Msk               (1UL << SCB_CFSR_STKERR_Pos)                    /*!< SCB 
 701:Drivers/CMSIS/Include/core_cm7.h **** 
ARM GAS  /tmp/ccJW5Vt8.s 			page 61


 702:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_UNSTKERR_Pos             (SCB_CFSR_BUSFAULTSR_Pos + 3U)                  /*!< SCB 
 703:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_UNSTKERR_Msk             (1UL << SCB_CFSR_UNSTKERR_Pos)                  /*!< SCB 
 704:Drivers/CMSIS/Include/core_cm7.h **** 
 705:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_IMPRECISERR_Pos          (SCB_CFSR_BUSFAULTSR_Pos + 2U)                  /*!< SCB 
 706:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_IMPRECISERR_Msk          (1UL << SCB_CFSR_IMPRECISERR_Pos)               /*!< SCB 
 707:Drivers/CMSIS/Include/core_cm7.h **** 
 708:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_PRECISERR_Pos            (SCB_CFSR_BUSFAULTSR_Pos + 1U)                  /*!< SCB 
 709:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_PRECISERR_Msk            (1UL << SCB_CFSR_PRECISERR_Pos)                 /*!< SCB 
 710:Drivers/CMSIS/Include/core_cm7.h **** 
 711:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_IBUSERR_Pos              (SCB_CFSR_BUSFAULTSR_Pos + 0U)                  /*!< SCB 
 712:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_IBUSERR_Msk              (1UL << SCB_CFSR_IBUSERR_Pos)                   /*!< SCB 
 713:Drivers/CMSIS/Include/core_cm7.h **** 
 714:Drivers/CMSIS/Include/core_cm7.h **** /* UsageFault Status Register (part of SCB Configurable Fault Status Register) */
 715:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_DIVBYZERO_Pos            (SCB_CFSR_USGFAULTSR_Pos + 9U)                  /*!< SCB 
 716:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_DIVBYZERO_Msk            (1UL << SCB_CFSR_DIVBYZERO_Pos)                 /*!< SCB 
 717:Drivers/CMSIS/Include/core_cm7.h **** 
 718:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_UNALIGNED_Pos            (SCB_CFSR_USGFAULTSR_Pos + 8U)                  /*!< SCB 
 719:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_UNALIGNED_Msk            (1UL << SCB_CFSR_UNALIGNED_Pos)                 /*!< SCB 
 720:Drivers/CMSIS/Include/core_cm7.h **** 
 721:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_NOCP_Pos                 (SCB_CFSR_USGFAULTSR_Pos + 3U)                  /*!< SCB 
 722:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_NOCP_Msk                 (1UL << SCB_CFSR_NOCP_Pos)                      /*!< SCB 
 723:Drivers/CMSIS/Include/core_cm7.h **** 
 724:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_INVPC_Pos                (SCB_CFSR_USGFAULTSR_Pos + 2U)                  /*!< SCB 
 725:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_INVPC_Msk                (1UL << SCB_CFSR_INVPC_Pos)                     /*!< SCB 
 726:Drivers/CMSIS/Include/core_cm7.h **** 
 727:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_INVSTATE_Pos             (SCB_CFSR_USGFAULTSR_Pos + 1U)                  /*!< SCB 
 728:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_INVSTATE_Msk             (1UL << SCB_CFSR_INVSTATE_Pos)                  /*!< SCB 
 729:Drivers/CMSIS/Include/core_cm7.h **** 
 730:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_UNDEFINSTR_Pos           (SCB_CFSR_USGFAULTSR_Pos + 0U)                  /*!< SCB 
 731:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CFSR_UNDEFINSTR_Msk           (1UL << SCB_CFSR_UNDEFINSTR_Pos)                /*!< SCB 
 732:Drivers/CMSIS/Include/core_cm7.h **** 
 733:Drivers/CMSIS/Include/core_cm7.h **** /* SCB Hard Fault Status Register Definitions */
 734:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 735:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 736:Drivers/CMSIS/Include/core_cm7.h **** 
 737:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 738:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 739:Drivers/CMSIS/Include/core_cm7.h **** 
 740:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 741:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 742:Drivers/CMSIS/Include/core_cm7.h **** 
 743:Drivers/CMSIS/Include/core_cm7.h **** /* SCB Debug Fault Status Register Definitions */
 744:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 745:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 746:Drivers/CMSIS/Include/core_cm7.h **** 
 747:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 748:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 749:Drivers/CMSIS/Include/core_cm7.h **** 
 750:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 751:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 752:Drivers/CMSIS/Include/core_cm7.h **** 
 753:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 754:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 755:Drivers/CMSIS/Include/core_cm7.h **** 
 756:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 757:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 758:Drivers/CMSIS/Include/core_cm7.h **** 
ARM GAS  /tmp/ccJW5Vt8.s 			page 62


 759:Drivers/CMSIS/Include/core_cm7.h **** /* SCB Cache Level ID Register Definitions */
 760:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CLIDR_LOUU_Pos                 27U                                            /*!< SCB 
 761:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CLIDR_LOUU_Msk                 (7UL << SCB_CLIDR_LOUU_Pos)                    /*!< SCB 
 762:Drivers/CMSIS/Include/core_cm7.h **** 
 763:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CLIDR_LOC_Pos                  24U                                            /*!< SCB 
 764:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CLIDR_LOC_Msk                  (7UL << SCB_CLIDR_LOC_Pos)                     /*!< SCB 
 765:Drivers/CMSIS/Include/core_cm7.h **** 
 766:Drivers/CMSIS/Include/core_cm7.h **** /* SCB Cache Type Register Definitions */
 767:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CTR_FORMAT_Pos                 29U                                            /*!< SCB 
 768:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CTR_FORMAT_Msk                 (7UL << SCB_CTR_FORMAT_Pos)                    /*!< SCB 
 769:Drivers/CMSIS/Include/core_cm7.h **** 
 770:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CTR_CWG_Pos                    24U                                            /*!< SCB 
 771:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CTR_CWG_Msk                    (0xFUL << SCB_CTR_CWG_Pos)                     /*!< SCB 
 772:Drivers/CMSIS/Include/core_cm7.h **** 
 773:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CTR_ERG_Pos                    20U                                            /*!< SCB 
 774:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CTR_ERG_Msk                    (0xFUL << SCB_CTR_ERG_Pos)                     /*!< SCB 
 775:Drivers/CMSIS/Include/core_cm7.h **** 
 776:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CTR_DMINLINE_Pos               16U                                            /*!< SCB 
 777:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CTR_DMINLINE_Msk               (0xFUL << SCB_CTR_DMINLINE_Pos)                /*!< SCB 
 778:Drivers/CMSIS/Include/core_cm7.h **** 
 779:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CTR_IMINLINE_Pos                0U                                            /*!< SCB 
 780:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CTR_IMINLINE_Msk               (0xFUL /*<< SCB_CTR_IMINLINE_Pos*/)            /*!< SCB 
 781:Drivers/CMSIS/Include/core_cm7.h **** 
 782:Drivers/CMSIS/Include/core_cm7.h **** /* SCB Cache Size ID Register Definitions */
 783:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_WT_Pos                  31U                                            /*!< SCB 
 784:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_WT_Msk                  (1UL << SCB_CCSIDR_WT_Pos)                     /*!< SCB 
 785:Drivers/CMSIS/Include/core_cm7.h **** 
 786:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_WB_Pos                  30U                                            /*!< SCB 
 787:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_WB_Msk                  (1UL << SCB_CCSIDR_WB_Pos)                     /*!< SCB 
 788:Drivers/CMSIS/Include/core_cm7.h **** 
 789:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_RA_Pos                  29U                                            /*!< SCB 
 790:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_RA_Msk                  (1UL << SCB_CCSIDR_RA_Pos)                     /*!< SCB 
 791:Drivers/CMSIS/Include/core_cm7.h **** 
 792:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_WA_Pos                  28U                                            /*!< SCB 
 793:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_WA_Msk                  (1UL << SCB_CCSIDR_WA_Pos)                     /*!< SCB 
 794:Drivers/CMSIS/Include/core_cm7.h **** 
 795:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_NUMSETS_Pos             13U                                            /*!< SCB 
 796:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_NUMSETS_Msk             (0x7FFFUL << SCB_CCSIDR_NUMSETS_Pos)           /*!< SCB 
 797:Drivers/CMSIS/Include/core_cm7.h **** 
 798:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_ASSOCIATIVITY_Pos        3U                                            /*!< SCB 
 799:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_ASSOCIATIVITY_Msk       (0x3FFUL << SCB_CCSIDR_ASSOCIATIVITY_Pos)      /*!< SCB 
 800:Drivers/CMSIS/Include/core_cm7.h **** 
 801:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_LINESIZE_Pos             0U                                            /*!< SCB 
 802:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CCSIDR_LINESIZE_Msk            (7UL /*<< SCB_CCSIDR_LINESIZE_Pos*/)           /*!< SCB 
 803:Drivers/CMSIS/Include/core_cm7.h **** 
 804:Drivers/CMSIS/Include/core_cm7.h **** /* SCB Cache Size Selection Register Definitions */
 805:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CSSELR_LEVEL_Pos                1U                                            /*!< SCB 
 806:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CSSELR_LEVEL_Msk               (7UL << SCB_CSSELR_LEVEL_Pos)                  /*!< SCB 
 807:Drivers/CMSIS/Include/core_cm7.h **** 
 808:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CSSELR_IND_Pos                  0U                                            /*!< SCB 
 809:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CSSELR_IND_Msk                 (1UL /*<< SCB_CSSELR_IND_Pos*/)                /*!< SCB 
 810:Drivers/CMSIS/Include/core_cm7.h **** 
 811:Drivers/CMSIS/Include/core_cm7.h **** /* SCB Software Triggered Interrupt Register Definitions */
 812:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_STIR_INTID_Pos                  0U                                            /*!< SCB 
 813:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_STIR_INTID_Msk                 (0x1FFUL /*<< SCB_STIR_INTID_Pos*/)            /*!< SCB 
 814:Drivers/CMSIS/Include/core_cm7.h **** 
 815:Drivers/CMSIS/Include/core_cm7.h **** /* SCB D-Cache Invalidate by Set-way Register Definitions */
ARM GAS  /tmp/ccJW5Vt8.s 			page 63


 816:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DCISW_WAY_Pos                  30U                                            /*!< SCB 
 817:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DCISW_WAY_Msk                  (3UL << SCB_DCISW_WAY_Pos)                     /*!< SCB 
 818:Drivers/CMSIS/Include/core_cm7.h **** 
 819:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DCISW_SET_Pos                   5U                                            /*!< SCB 
 820:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DCISW_SET_Msk                  (0x1FFUL << SCB_DCISW_SET_Pos)                 /*!< SCB 
 821:Drivers/CMSIS/Include/core_cm7.h **** 
 822:Drivers/CMSIS/Include/core_cm7.h **** /* SCB D-Cache Clean by Set-way Register Definitions */
 823:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DCCSW_WAY_Pos                  30U                                            /*!< SCB 
 824:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DCCSW_WAY_Msk                  (3UL << SCB_DCCSW_WAY_Pos)                     /*!< SCB 
 825:Drivers/CMSIS/Include/core_cm7.h **** 
 826:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DCCSW_SET_Pos                   5U                                            /*!< SCB 
 827:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DCCSW_SET_Msk                  (0x1FFUL << SCB_DCCSW_SET_Pos)                 /*!< SCB 
 828:Drivers/CMSIS/Include/core_cm7.h **** 
 829:Drivers/CMSIS/Include/core_cm7.h **** /* SCB D-Cache Clean and Invalidate by Set-way Register Definitions */
 830:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DCCISW_WAY_Pos                 30U                                            /*!< SCB 
 831:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DCCISW_WAY_Msk                 (3UL << SCB_DCCISW_WAY_Pos)                    /*!< SCB 
 832:Drivers/CMSIS/Include/core_cm7.h **** 
 833:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DCCISW_SET_Pos                  5U                                            /*!< SCB 
 834:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DCCISW_SET_Msk                 (0x1FFUL << SCB_DCCISW_SET_Pos)                /*!< SCB 
 835:Drivers/CMSIS/Include/core_cm7.h **** 
 836:Drivers/CMSIS/Include/core_cm7.h **** /* Instruction Tightly-Coupled Memory Control Register Definitions */
 837:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ITCMCR_SZ_Pos                   3U                                            /*!< SCB 
 838:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ITCMCR_SZ_Msk                  (0xFUL << SCB_ITCMCR_SZ_Pos)                   /*!< SCB 
 839:Drivers/CMSIS/Include/core_cm7.h **** 
 840:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ITCMCR_RETEN_Pos                2U                                            /*!< SCB 
 841:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ITCMCR_RETEN_Msk               (1UL << SCB_ITCMCR_RETEN_Pos)                  /*!< SCB 
 842:Drivers/CMSIS/Include/core_cm7.h **** 
 843:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ITCMCR_RMW_Pos                  1U                                            /*!< SCB 
 844:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ITCMCR_RMW_Msk                 (1UL << SCB_ITCMCR_RMW_Pos)                    /*!< SCB 
 845:Drivers/CMSIS/Include/core_cm7.h **** 
 846:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ITCMCR_EN_Pos                   0U                                            /*!< SCB 
 847:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ITCMCR_EN_Msk                  (1UL /*<< SCB_ITCMCR_EN_Pos*/)                 /*!< SCB 
 848:Drivers/CMSIS/Include/core_cm7.h **** 
 849:Drivers/CMSIS/Include/core_cm7.h **** /* Data Tightly-Coupled Memory Control Register Definitions */
 850:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DTCMCR_SZ_Pos                   3U                                            /*!< SCB 
 851:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DTCMCR_SZ_Msk                  (0xFUL << SCB_DTCMCR_SZ_Pos)                   /*!< SCB 
 852:Drivers/CMSIS/Include/core_cm7.h **** 
 853:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DTCMCR_RETEN_Pos                2U                                            /*!< SCB 
 854:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DTCMCR_RETEN_Msk               (1UL << SCB_DTCMCR_RETEN_Pos)                   /*!< SCB
 855:Drivers/CMSIS/Include/core_cm7.h **** 
 856:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DTCMCR_RMW_Pos                  1U                                            /*!< SCB 
 857:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DTCMCR_RMW_Msk                 (1UL << SCB_DTCMCR_RMW_Pos)                    /*!< SCB 
 858:Drivers/CMSIS/Include/core_cm7.h **** 
 859:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DTCMCR_EN_Pos                   0U                                            /*!< SCB 
 860:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_DTCMCR_EN_Msk                  (1UL /*<< SCB_DTCMCR_EN_Pos*/)                 /*!< SCB 
 861:Drivers/CMSIS/Include/core_cm7.h **** 
 862:Drivers/CMSIS/Include/core_cm7.h **** /* AHBP Control Register Definitions */
 863:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AHBPCR_SZ_Pos                   1U                                            /*!< SCB 
 864:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AHBPCR_SZ_Msk                  (7UL << SCB_AHBPCR_SZ_Pos)                     /*!< SCB 
 865:Drivers/CMSIS/Include/core_cm7.h **** 
 866:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AHBPCR_EN_Pos                   0U                                            /*!< SCB 
 867:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AHBPCR_EN_Msk                  (1UL /*<< SCB_AHBPCR_EN_Pos*/)                 /*!< SCB 
 868:Drivers/CMSIS/Include/core_cm7.h **** 
 869:Drivers/CMSIS/Include/core_cm7.h **** /* L1 Cache Control Register Definitions */
 870:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CACR_FORCEWT_Pos                2U                                            /*!< SCB 
 871:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CACR_FORCEWT_Msk               (1UL << SCB_CACR_FORCEWT_Pos)                  /*!< SCB 
 872:Drivers/CMSIS/Include/core_cm7.h **** 
ARM GAS  /tmp/ccJW5Vt8.s 			page 64


 873:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CACR_ECCEN_Pos                  1U                                            /*!< SCB 
 874:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CACR_ECCEN_Msk                 (1UL << SCB_CACR_ECCEN_Pos)                    /*!< SCB 
 875:Drivers/CMSIS/Include/core_cm7.h **** 
 876:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CACR_SIWT_Pos                   0U                                            /*!< SCB 
 877:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_CACR_SIWT_Msk                  (1UL /*<< SCB_CACR_SIWT_Pos*/)                 /*!< SCB 
 878:Drivers/CMSIS/Include/core_cm7.h **** 
 879:Drivers/CMSIS/Include/core_cm7.h **** /* AHBS Control Register Definitions */
 880:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AHBSCR_INITCOUNT_Pos           11U                                            /*!< SCB 
 881:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AHBSCR_INITCOUNT_Msk           (0x1FUL << SCB_AHBPCR_INITCOUNT_Pos)           /*!< SCB 
 882:Drivers/CMSIS/Include/core_cm7.h **** 
 883:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AHBSCR_TPRI_Pos                 2U                                            /*!< SCB 
 884:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AHBSCR_TPRI_Msk                (0x1FFUL << SCB_AHBPCR_TPRI_Pos)               /*!< SCB 
 885:Drivers/CMSIS/Include/core_cm7.h **** 
 886:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AHBSCR_CTL_Pos                  0U                                            /*!< SCB 
 887:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_AHBSCR_CTL_Msk                 (3UL /*<< SCB_AHBPCR_CTL_Pos*/)                /*!< SCB 
 888:Drivers/CMSIS/Include/core_cm7.h **** 
 889:Drivers/CMSIS/Include/core_cm7.h **** /* Auxiliary Bus Fault Status Register Definitions */
 890:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_AXIMTYPE_Pos              8U                                            /*!< SCB 
 891:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_AXIMTYPE_Msk             (3UL << SCB_ABFSR_AXIMTYPE_Pos)                /*!< SCB 
 892:Drivers/CMSIS/Include/core_cm7.h **** 
 893:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_EPPB_Pos                  4U                                            /*!< SCB 
 894:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_EPPB_Msk                 (1UL << SCB_ABFSR_EPPB_Pos)                    /*!< SCB 
 895:Drivers/CMSIS/Include/core_cm7.h **** 
 896:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_AXIM_Pos                  3U                                            /*!< SCB 
 897:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_AXIM_Msk                 (1UL << SCB_ABFSR_AXIM_Pos)                    /*!< SCB 
 898:Drivers/CMSIS/Include/core_cm7.h **** 
 899:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_AHBP_Pos                  2U                                            /*!< SCB 
 900:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_AHBP_Msk                 (1UL << SCB_ABFSR_AHBP_Pos)                    /*!< SCB 
 901:Drivers/CMSIS/Include/core_cm7.h **** 
 902:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_DTCM_Pos                  1U                                            /*!< SCB 
 903:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_DTCM_Msk                 (1UL << SCB_ABFSR_DTCM_Pos)                    /*!< SCB 
 904:Drivers/CMSIS/Include/core_cm7.h **** 
 905:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_ITCM_Pos                  0U                                            /*!< SCB 
 906:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_ABFSR_ITCM_Msk                 (1UL /*<< SCB_ABFSR_ITCM_Pos*/)                /*!< SCB 
 907:Drivers/CMSIS/Include/core_cm7.h **** 
 908:Drivers/CMSIS/Include/core_cm7.h **** /*@} end of group CMSIS_SCB */
 909:Drivers/CMSIS/Include/core_cm7.h **** 
 910:Drivers/CMSIS/Include/core_cm7.h **** 
 911:Drivers/CMSIS/Include/core_cm7.h **** /**
 912:Drivers/CMSIS/Include/core_cm7.h ****   \ingroup  CMSIS_core_register
 913:Drivers/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 914:Drivers/CMSIS/Include/core_cm7.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 915:Drivers/CMSIS/Include/core_cm7.h ****   @{
 916:Drivers/CMSIS/Include/core_cm7.h ****  */
 917:Drivers/CMSIS/Include/core_cm7.h **** 
 918:Drivers/CMSIS/Include/core_cm7.h **** /**
 919:Drivers/CMSIS/Include/core_cm7.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 920:Drivers/CMSIS/Include/core_cm7.h ****  */
 921:Drivers/CMSIS/Include/core_cm7.h **** typedef struct
 922:Drivers/CMSIS/Include/core_cm7.h **** {
 923:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED0[1U];
 924:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 925:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 926:Drivers/CMSIS/Include/core_cm7.h **** } SCnSCB_Type;
 927:Drivers/CMSIS/Include/core_cm7.h **** 
 928:Drivers/CMSIS/Include/core_cm7.h **** /* Interrupt Controller Type Register Definitions */
 929:Drivers/CMSIS/Include/core_cm7.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
ARM GAS  /tmp/ccJW5Vt8.s 			page 65


 930:Drivers/CMSIS/Include/core_cm7.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 931:Drivers/CMSIS/Include/core_cm7.h **** 
 932:Drivers/CMSIS/Include/core_cm7.h **** /* Auxiliary Control Register Definitions */
 933:Drivers/CMSIS/Include/core_cm7.h **** #define SCnSCB_ACTLR_DISITMATBFLUSH_Pos    12U                                         /*!< ACTLR: 
 934:Drivers/CMSIS/Include/core_cm7.h **** #define SCnSCB_ACTLR_DISITMATBFLUSH_Msk    (1UL << SCnSCB_ACTLR_DISITMATBFLUSH_Pos)    /*!< ACTLR: 
 935:Drivers/CMSIS/Include/core_cm7.h **** 
 936:Drivers/CMSIS/Include/core_cm7.h **** #define SCnSCB_ACTLR_DISRAMODE_Pos         11U                                         /*!< ACTLR: 
 937:Drivers/CMSIS/Include/core_cm7.h **** #define SCnSCB_ACTLR_DISRAMODE_Msk         (1UL << SCnSCB_ACTLR_DISRAMODE_Pos)         /*!< ACTLR: 
 938:Drivers/CMSIS/Include/core_cm7.h **** 
 939:Drivers/CMSIS/Include/core_cm7.h **** #define SCnSCB_ACTLR_FPEXCODIS_Pos         10U                                         /*!< ACTLR: 
 940:Drivers/CMSIS/Include/core_cm7.h **** #define SCnSCB_ACTLR_FPEXCODIS_Msk         (1UL << SCnSCB_ACTLR_FPEXCODIS_Pos)         /*!< ACTLR: 
 941:Drivers/CMSIS/Include/core_cm7.h **** 
 942:Drivers/CMSIS/Include/core_cm7.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 943:Drivers/CMSIS/Include/core_cm7.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 944:Drivers/CMSIS/Include/core_cm7.h **** 
 945:Drivers/CMSIS/Include/core_cm7.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 946:Drivers/CMSIS/Include/core_cm7.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 947:Drivers/CMSIS/Include/core_cm7.h **** 
 948:Drivers/CMSIS/Include/core_cm7.h **** /*@} end of group CMSIS_SCnotSCB */
 949:Drivers/CMSIS/Include/core_cm7.h **** 
 950:Drivers/CMSIS/Include/core_cm7.h **** 
 951:Drivers/CMSIS/Include/core_cm7.h **** /**
 952:Drivers/CMSIS/Include/core_cm7.h ****   \ingroup  CMSIS_core_register
 953:Drivers/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 954:Drivers/CMSIS/Include/core_cm7.h ****   \brief    Type definitions for the System Timer Registers.
 955:Drivers/CMSIS/Include/core_cm7.h ****   @{
 956:Drivers/CMSIS/Include/core_cm7.h ****  */
 957:Drivers/CMSIS/Include/core_cm7.h **** 
 958:Drivers/CMSIS/Include/core_cm7.h **** /**
 959:Drivers/CMSIS/Include/core_cm7.h ****   \brief  Structure type to access the System Timer (SysTick).
 960:Drivers/CMSIS/Include/core_cm7.h ****  */
 961:Drivers/CMSIS/Include/core_cm7.h **** typedef struct
 962:Drivers/CMSIS/Include/core_cm7.h **** {
 963:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 964:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 965:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 966:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 967:Drivers/CMSIS/Include/core_cm7.h **** } SysTick_Type;
 968:Drivers/CMSIS/Include/core_cm7.h **** 
 969:Drivers/CMSIS/Include/core_cm7.h **** /* SysTick Control / Status Register Definitions */
 970:Drivers/CMSIS/Include/core_cm7.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 971:Drivers/CMSIS/Include/core_cm7.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 972:Drivers/CMSIS/Include/core_cm7.h **** 
 973:Drivers/CMSIS/Include/core_cm7.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 974:Drivers/CMSIS/Include/core_cm7.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 975:Drivers/CMSIS/Include/core_cm7.h **** 
 976:Drivers/CMSIS/Include/core_cm7.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 977:Drivers/CMSIS/Include/core_cm7.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 978:Drivers/CMSIS/Include/core_cm7.h **** 
 979:Drivers/CMSIS/Include/core_cm7.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 980:Drivers/CMSIS/Include/core_cm7.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 981:Drivers/CMSIS/Include/core_cm7.h **** 
 982:Drivers/CMSIS/Include/core_cm7.h **** /* SysTick Reload Register Definitions */
 983:Drivers/CMSIS/Include/core_cm7.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 984:Drivers/CMSIS/Include/core_cm7.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 985:Drivers/CMSIS/Include/core_cm7.h **** 
 986:Drivers/CMSIS/Include/core_cm7.h **** /* SysTick Current Register Definitions */
ARM GAS  /tmp/ccJW5Vt8.s 			page 66


 987:Drivers/CMSIS/Include/core_cm7.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 988:Drivers/CMSIS/Include/core_cm7.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 989:Drivers/CMSIS/Include/core_cm7.h **** 
 990:Drivers/CMSIS/Include/core_cm7.h **** /* SysTick Calibration Register Definitions */
 991:Drivers/CMSIS/Include/core_cm7.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 992:Drivers/CMSIS/Include/core_cm7.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 993:Drivers/CMSIS/Include/core_cm7.h **** 
 994:Drivers/CMSIS/Include/core_cm7.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 995:Drivers/CMSIS/Include/core_cm7.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 996:Drivers/CMSIS/Include/core_cm7.h **** 
 997:Drivers/CMSIS/Include/core_cm7.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 998:Drivers/CMSIS/Include/core_cm7.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 999:Drivers/CMSIS/Include/core_cm7.h **** 
1000:Drivers/CMSIS/Include/core_cm7.h **** /*@} end of group CMSIS_SysTick */
1001:Drivers/CMSIS/Include/core_cm7.h **** 
1002:Drivers/CMSIS/Include/core_cm7.h **** 
1003:Drivers/CMSIS/Include/core_cm7.h **** /**
1004:Drivers/CMSIS/Include/core_cm7.h ****   \ingroup  CMSIS_core_register
1005:Drivers/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
1006:Drivers/CMSIS/Include/core_cm7.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
1007:Drivers/CMSIS/Include/core_cm7.h ****   @{
1008:Drivers/CMSIS/Include/core_cm7.h ****  */
1009:Drivers/CMSIS/Include/core_cm7.h **** 
1010:Drivers/CMSIS/Include/core_cm7.h **** /**
1011:Drivers/CMSIS/Include/core_cm7.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
1012:Drivers/CMSIS/Include/core_cm7.h ****  */
1013:Drivers/CMSIS/Include/core_cm7.h **** typedef struct
1014:Drivers/CMSIS/Include/core_cm7.h **** {
1015:Drivers/CMSIS/Include/core_cm7.h ****   __OM  union
1016:Drivers/CMSIS/Include/core_cm7.h ****   {
1017:Drivers/CMSIS/Include/core_cm7.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
1018:Drivers/CMSIS/Include/core_cm7.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
1019:Drivers/CMSIS/Include/core_cm7.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
1020:Drivers/CMSIS/Include/core_cm7.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
1021:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED0[864U];
1022:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
1023:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED1[15U];
1024:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
1025:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED2[15U];
1026:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
1027:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED3[29U];
1028:Drivers/CMSIS/Include/core_cm7.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
1029:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
1030:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
1031:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED4[43U];
1032:Drivers/CMSIS/Include/core_cm7.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
1033:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
1034:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED5[6U];
1035:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
1036:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
1037:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
1038:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
1039:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
1040:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
1041:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
1042:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
1043:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
ARM GAS  /tmp/ccJW5Vt8.s 			page 67


1044:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
1045:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
1046:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
1047:Drivers/CMSIS/Include/core_cm7.h **** } ITM_Type;
1048:Drivers/CMSIS/Include/core_cm7.h **** 
1049:Drivers/CMSIS/Include/core_cm7.h **** /* ITM Trace Privilege Register Definitions */
1050:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
1051:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFFFFFFFFUL /*<< ITM_TPR_PRIVMASK_Pos*/)     /*!< ITM 
1052:Drivers/CMSIS/Include/core_cm7.h **** 
1053:Drivers/CMSIS/Include/core_cm7.h **** /* ITM Trace Control Register Definitions */
1054:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
1055:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
1056:Drivers/CMSIS/Include/core_cm7.h **** 
1057:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
1058:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
1059:Drivers/CMSIS/Include/core_cm7.h **** 
1060:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
1061:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
1062:Drivers/CMSIS/Include/core_cm7.h **** 
1063:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
1064:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
1065:Drivers/CMSIS/Include/core_cm7.h **** 
1066:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
1067:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
1068:Drivers/CMSIS/Include/core_cm7.h **** 
1069:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
1070:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
1071:Drivers/CMSIS/Include/core_cm7.h **** 
1072:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
1073:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
1074:Drivers/CMSIS/Include/core_cm7.h **** 
1075:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
1076:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
1077:Drivers/CMSIS/Include/core_cm7.h **** 
1078:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
1079:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
1080:Drivers/CMSIS/Include/core_cm7.h **** 
1081:Drivers/CMSIS/Include/core_cm7.h **** /* ITM Integration Write Register Definitions */
1082:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
1083:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
1084:Drivers/CMSIS/Include/core_cm7.h **** 
1085:Drivers/CMSIS/Include/core_cm7.h **** /* ITM Integration Read Register Definitions */
1086:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
1087:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
1088:Drivers/CMSIS/Include/core_cm7.h **** 
1089:Drivers/CMSIS/Include/core_cm7.h **** /* ITM Integration Mode Control Register Definitions */
1090:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
1091:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
1092:Drivers/CMSIS/Include/core_cm7.h **** 
1093:Drivers/CMSIS/Include/core_cm7.h **** /* ITM Lock Status Register Definitions */
1094:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
1095:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
1096:Drivers/CMSIS/Include/core_cm7.h **** 
1097:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
1098:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
1099:Drivers/CMSIS/Include/core_cm7.h **** 
1100:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
ARM GAS  /tmp/ccJW5Vt8.s 			page 68


1101:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
1102:Drivers/CMSIS/Include/core_cm7.h **** 
1103:Drivers/CMSIS/Include/core_cm7.h **** /*@}*/ /* end of group CMSIS_ITM */
1104:Drivers/CMSIS/Include/core_cm7.h **** 
1105:Drivers/CMSIS/Include/core_cm7.h **** 
1106:Drivers/CMSIS/Include/core_cm7.h **** /**
1107:Drivers/CMSIS/Include/core_cm7.h ****   \ingroup  CMSIS_core_register
1108:Drivers/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
1109:Drivers/CMSIS/Include/core_cm7.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
1110:Drivers/CMSIS/Include/core_cm7.h ****   @{
1111:Drivers/CMSIS/Include/core_cm7.h ****  */
1112:Drivers/CMSIS/Include/core_cm7.h **** 
1113:Drivers/CMSIS/Include/core_cm7.h **** /**
1114:Drivers/CMSIS/Include/core_cm7.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
1115:Drivers/CMSIS/Include/core_cm7.h ****  */
1116:Drivers/CMSIS/Include/core_cm7.h **** typedef struct
1117:Drivers/CMSIS/Include/core_cm7.h **** {
1118:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
1119:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
1120:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
1121:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
1122:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
1123:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
1124:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
1125:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
1126:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
1127:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
1128:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
1129:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED0[1U];
1130:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
1131:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
1132:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
1133:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED1[1U];
1134:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
1135:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
1136:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
1137:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED2[1U];
1138:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
1139:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
1140:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
1141:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED3[981U];
1142:Drivers/CMSIS/Include/core_cm7.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 (  W)  Lock Access Register */
1143:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R  )  Lock Status Register */
1144:Drivers/CMSIS/Include/core_cm7.h **** } DWT_Type;
1145:Drivers/CMSIS/Include/core_cm7.h **** 
1146:Drivers/CMSIS/Include/core_cm7.h **** /* DWT Control Register Definitions */
1147:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
1148:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
1149:Drivers/CMSIS/Include/core_cm7.h **** 
1150:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
1151:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
1152:Drivers/CMSIS/Include/core_cm7.h **** 
1153:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
1154:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
1155:Drivers/CMSIS/Include/core_cm7.h **** 
1156:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
1157:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
ARM GAS  /tmp/ccJW5Vt8.s 			page 69


1158:Drivers/CMSIS/Include/core_cm7.h **** 
1159:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
1160:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
1161:Drivers/CMSIS/Include/core_cm7.h **** 
1162:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
1163:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
1164:Drivers/CMSIS/Include/core_cm7.h **** 
1165:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
1166:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
1167:Drivers/CMSIS/Include/core_cm7.h **** 
1168:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
1169:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
1170:Drivers/CMSIS/Include/core_cm7.h **** 
1171:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
1172:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
1173:Drivers/CMSIS/Include/core_cm7.h **** 
1174:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
1175:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
1176:Drivers/CMSIS/Include/core_cm7.h **** 
1177:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
1178:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
1179:Drivers/CMSIS/Include/core_cm7.h **** 
1180:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
1181:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
1182:Drivers/CMSIS/Include/core_cm7.h **** 
1183:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
1184:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
1185:Drivers/CMSIS/Include/core_cm7.h **** 
1186:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
1187:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
1188:Drivers/CMSIS/Include/core_cm7.h **** 
1189:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
1190:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
1191:Drivers/CMSIS/Include/core_cm7.h **** 
1192:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
1193:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
1194:Drivers/CMSIS/Include/core_cm7.h **** 
1195:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
1196:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
1197:Drivers/CMSIS/Include/core_cm7.h **** 
1198:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
1199:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
1200:Drivers/CMSIS/Include/core_cm7.h **** 
1201:Drivers/CMSIS/Include/core_cm7.h **** /* DWT CPI Count Register Definitions */
1202:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
1203:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
1204:Drivers/CMSIS/Include/core_cm7.h **** 
1205:Drivers/CMSIS/Include/core_cm7.h **** /* DWT Exception Overhead Count Register Definitions */
1206:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
1207:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
1208:Drivers/CMSIS/Include/core_cm7.h **** 
1209:Drivers/CMSIS/Include/core_cm7.h **** /* DWT Sleep Count Register Definitions */
1210:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
1211:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
1212:Drivers/CMSIS/Include/core_cm7.h **** 
1213:Drivers/CMSIS/Include/core_cm7.h **** /* DWT LSU Count Register Definitions */
1214:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
ARM GAS  /tmp/ccJW5Vt8.s 			page 70


1215:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
1216:Drivers/CMSIS/Include/core_cm7.h **** 
1217:Drivers/CMSIS/Include/core_cm7.h **** /* DWT Folded-instruction Count Register Definitions */
1218:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
1219:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1220:Drivers/CMSIS/Include/core_cm7.h **** 
1221:Drivers/CMSIS/Include/core_cm7.h **** /* DWT Comparator Mask Register Definitions */
1222:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1223:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1224:Drivers/CMSIS/Include/core_cm7.h **** 
1225:Drivers/CMSIS/Include/core_cm7.h **** /* DWT Comparator Function Register Definitions */
1226:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1227:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1228:Drivers/CMSIS/Include/core_cm7.h **** 
1229:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1230:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1231:Drivers/CMSIS/Include/core_cm7.h **** 
1232:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1233:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1234:Drivers/CMSIS/Include/core_cm7.h **** 
1235:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1236:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1237:Drivers/CMSIS/Include/core_cm7.h **** 
1238:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1239:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1240:Drivers/CMSIS/Include/core_cm7.h **** 
1241:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1242:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1243:Drivers/CMSIS/Include/core_cm7.h **** 
1244:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1245:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1246:Drivers/CMSIS/Include/core_cm7.h **** 
1247:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1248:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1249:Drivers/CMSIS/Include/core_cm7.h **** 
1250:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1251:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1252:Drivers/CMSIS/Include/core_cm7.h **** 
1253:Drivers/CMSIS/Include/core_cm7.h **** /*@}*/ /* end of group CMSIS_DWT */
1254:Drivers/CMSIS/Include/core_cm7.h **** 
1255:Drivers/CMSIS/Include/core_cm7.h **** 
1256:Drivers/CMSIS/Include/core_cm7.h **** /**
1257:Drivers/CMSIS/Include/core_cm7.h ****   \ingroup  CMSIS_core_register
1258:Drivers/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1259:Drivers/CMSIS/Include/core_cm7.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1260:Drivers/CMSIS/Include/core_cm7.h ****   @{
1261:Drivers/CMSIS/Include/core_cm7.h ****  */
1262:Drivers/CMSIS/Include/core_cm7.h **** 
1263:Drivers/CMSIS/Include/core_cm7.h **** /**
1264:Drivers/CMSIS/Include/core_cm7.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1265:Drivers/CMSIS/Include/core_cm7.h ****  */
1266:Drivers/CMSIS/Include/core_cm7.h **** typedef struct
1267:Drivers/CMSIS/Include/core_cm7.h **** {
1268:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1269:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1270:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED0[2U];
1271:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
ARM GAS  /tmp/ccJW5Vt8.s 			page 71


1272:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED1[55U];
1273:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1274:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED2[131U];
1275:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1276:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1277:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1278:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED3[759U];
1279:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER Register */
1280:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1281:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1282:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED4[1U];
1283:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1284:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1285:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1286:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED5[39U];
1287:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1288:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1289:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED7[8U];
1290:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1291:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1292:Drivers/CMSIS/Include/core_cm7.h **** } TPI_Type;
1293:Drivers/CMSIS/Include/core_cm7.h **** 
1294:Drivers/CMSIS/Include/core_cm7.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1295:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1296:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1297:Drivers/CMSIS/Include/core_cm7.h **** 
1298:Drivers/CMSIS/Include/core_cm7.h **** /* TPI Selected Pin Protocol Register Definitions */
1299:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1300:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1301:Drivers/CMSIS/Include/core_cm7.h **** 
1302:Drivers/CMSIS/Include/core_cm7.h **** /* TPI Formatter and Flush Status Register Definitions */
1303:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1304:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1305:Drivers/CMSIS/Include/core_cm7.h **** 
1306:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1307:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1308:Drivers/CMSIS/Include/core_cm7.h **** 
1309:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1310:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1311:Drivers/CMSIS/Include/core_cm7.h **** 
1312:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1313:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1314:Drivers/CMSIS/Include/core_cm7.h **** 
1315:Drivers/CMSIS/Include/core_cm7.h **** /* TPI Formatter and Flush Control Register Definitions */
1316:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1317:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1318:Drivers/CMSIS/Include/core_cm7.h **** 
1319:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1320:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1321:Drivers/CMSIS/Include/core_cm7.h **** 
1322:Drivers/CMSIS/Include/core_cm7.h **** /* TPI TRIGGER Register Definitions */
1323:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1324:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1325:Drivers/CMSIS/Include/core_cm7.h **** 
1326:Drivers/CMSIS/Include/core_cm7.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1327:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1328:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
ARM GAS  /tmp/ccJW5Vt8.s 			page 72


1329:Drivers/CMSIS/Include/core_cm7.h **** 
1330:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1331:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1332:Drivers/CMSIS/Include/core_cm7.h **** 
1333:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1334:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1335:Drivers/CMSIS/Include/core_cm7.h **** 
1336:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1337:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1338:Drivers/CMSIS/Include/core_cm7.h **** 
1339:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1340:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1341:Drivers/CMSIS/Include/core_cm7.h **** 
1342:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1343:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1344:Drivers/CMSIS/Include/core_cm7.h **** 
1345:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1346:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1347:Drivers/CMSIS/Include/core_cm7.h **** 
1348:Drivers/CMSIS/Include/core_cm7.h **** /* TPI ITATBCTR2 Register Definitions */
1349:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_ITATBCTR2_ATREADY2_Pos          0U                                         /*!< TPI ITA
1350:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_ITATBCTR2_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY2_Pos*/)   /*!< TPI ITA
1351:Drivers/CMSIS/Include/core_cm7.h **** 
1352:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_ITATBCTR2_ATREADY1_Pos          0U                                         /*!< TPI ITA
1353:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_ITATBCTR2_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR2_ATREADY1_Pos*/)   /*!< TPI ITA
1354:Drivers/CMSIS/Include/core_cm7.h **** 
1355:Drivers/CMSIS/Include/core_cm7.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1356:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1357:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1358:Drivers/CMSIS/Include/core_cm7.h **** 
1359:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1360:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1361:Drivers/CMSIS/Include/core_cm7.h **** 
1362:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1363:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1364:Drivers/CMSIS/Include/core_cm7.h **** 
1365:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1366:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1367:Drivers/CMSIS/Include/core_cm7.h **** 
1368:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1369:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1370:Drivers/CMSIS/Include/core_cm7.h **** 
1371:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1372:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1373:Drivers/CMSIS/Include/core_cm7.h **** 
1374:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1375:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1376:Drivers/CMSIS/Include/core_cm7.h **** 
1377:Drivers/CMSIS/Include/core_cm7.h **** /* TPI ITATBCTR0 Register Definitions */
1378:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_ITATBCTR0_ATREADY2_Pos          0U                                         /*!< TPI ITA
1379:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_ITATBCTR0_ATREADY2_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY2_Pos*/)   /*!< TPI ITA
1380:Drivers/CMSIS/Include/core_cm7.h **** 
1381:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_ITATBCTR0_ATREADY1_Pos          0U                                         /*!< TPI ITA
1382:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_ITATBCTR0_ATREADY1_Msk         (0x1UL /*<< TPI_ITATBCTR0_ATREADY1_Pos*/)   /*!< TPI ITA
1383:Drivers/CMSIS/Include/core_cm7.h **** 
1384:Drivers/CMSIS/Include/core_cm7.h **** /* TPI Integration Mode Control Register Definitions */
1385:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
ARM GAS  /tmp/ccJW5Vt8.s 			page 73


1386:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_ITCTRL_Mode_Msk                (0x3UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1387:Drivers/CMSIS/Include/core_cm7.h **** 
1388:Drivers/CMSIS/Include/core_cm7.h **** /* TPI DEVID Register Definitions */
1389:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1390:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1391:Drivers/CMSIS/Include/core_cm7.h **** 
1392:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1393:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1394:Drivers/CMSIS/Include/core_cm7.h **** 
1395:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1396:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1397:Drivers/CMSIS/Include/core_cm7.h **** 
1398:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1399:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1400:Drivers/CMSIS/Include/core_cm7.h **** 
1401:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1402:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1403:Drivers/CMSIS/Include/core_cm7.h **** 
1404:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1405:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1406:Drivers/CMSIS/Include/core_cm7.h **** 
1407:Drivers/CMSIS/Include/core_cm7.h **** /* TPI DEVTYPE Register Definitions */
1408:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_DEVTYPE_SubType_Pos             4U                                         /*!< TPI DEV
1409:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1410:Drivers/CMSIS/Include/core_cm7.h **** 
1411:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_DEVTYPE_MajorType_Pos           0U                                         /*!< TPI DEV
1412:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1413:Drivers/CMSIS/Include/core_cm7.h **** 
1414:Drivers/CMSIS/Include/core_cm7.h **** /*@}*/ /* end of group CMSIS_TPI */
1415:Drivers/CMSIS/Include/core_cm7.h **** 
1416:Drivers/CMSIS/Include/core_cm7.h **** 
1417:Drivers/CMSIS/Include/core_cm7.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1418:Drivers/CMSIS/Include/core_cm7.h **** /**
1419:Drivers/CMSIS/Include/core_cm7.h ****   \ingroup  CMSIS_core_register
1420:Drivers/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1421:Drivers/CMSIS/Include/core_cm7.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1422:Drivers/CMSIS/Include/core_cm7.h ****   @{
1423:Drivers/CMSIS/Include/core_cm7.h ****  */
1424:Drivers/CMSIS/Include/core_cm7.h **** 
1425:Drivers/CMSIS/Include/core_cm7.h **** /**
1426:Drivers/CMSIS/Include/core_cm7.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1427:Drivers/CMSIS/Include/core_cm7.h ****  */
1428:Drivers/CMSIS/Include/core_cm7.h **** typedef struct
1429:Drivers/CMSIS/Include/core_cm7.h **** {
1430:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1431:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1432:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1433:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1434:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1435:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1436:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1437:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1438:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1439:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1440:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1441:Drivers/CMSIS/Include/core_cm7.h **** } MPU_Type;
1442:Drivers/CMSIS/Include/core_cm7.h **** 
ARM GAS  /tmp/ccJW5Vt8.s 			page 74


1443:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_TYPE_RALIASES                  4U
1444:Drivers/CMSIS/Include/core_cm7.h **** 
1445:Drivers/CMSIS/Include/core_cm7.h **** /* MPU Type Register Definitions */
1446:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1447:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1448:Drivers/CMSIS/Include/core_cm7.h **** 
1449:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1450:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1451:Drivers/CMSIS/Include/core_cm7.h **** 
1452:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1453:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1454:Drivers/CMSIS/Include/core_cm7.h **** 
1455:Drivers/CMSIS/Include/core_cm7.h **** /* MPU Control Register Definitions */
1456:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1457:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1458:Drivers/CMSIS/Include/core_cm7.h **** 
1459:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1460:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1461:Drivers/CMSIS/Include/core_cm7.h **** 
1462:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1463:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1464:Drivers/CMSIS/Include/core_cm7.h **** 
1465:Drivers/CMSIS/Include/core_cm7.h **** /* MPU Region Number Register Definitions */
1466:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1467:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1468:Drivers/CMSIS/Include/core_cm7.h **** 
1469:Drivers/CMSIS/Include/core_cm7.h **** /* MPU Region Base Address Register Definitions */
1470:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1471:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1472:Drivers/CMSIS/Include/core_cm7.h **** 
1473:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1474:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1475:Drivers/CMSIS/Include/core_cm7.h **** 
1476:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1477:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1478:Drivers/CMSIS/Include/core_cm7.h **** 
1479:Drivers/CMSIS/Include/core_cm7.h **** /* MPU Region Attribute and Size Register Definitions */
1480:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1481:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1482:Drivers/CMSIS/Include/core_cm7.h **** 
1483:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1484:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1485:Drivers/CMSIS/Include/core_cm7.h **** 
1486:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1487:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1488:Drivers/CMSIS/Include/core_cm7.h **** 
1489:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1490:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1491:Drivers/CMSIS/Include/core_cm7.h **** 
1492:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1493:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1494:Drivers/CMSIS/Include/core_cm7.h **** 
1495:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1496:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1497:Drivers/CMSIS/Include/core_cm7.h **** 
1498:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1499:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
ARM GAS  /tmp/ccJW5Vt8.s 			page 75


1500:Drivers/CMSIS/Include/core_cm7.h **** 
1501:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1502:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1503:Drivers/CMSIS/Include/core_cm7.h **** 
1504:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1505:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1506:Drivers/CMSIS/Include/core_cm7.h **** 
1507:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1508:Drivers/CMSIS/Include/core_cm7.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1509:Drivers/CMSIS/Include/core_cm7.h **** 
1510:Drivers/CMSIS/Include/core_cm7.h **** /*@} end of group CMSIS_MPU */
1511:Drivers/CMSIS/Include/core_cm7.h **** #endif /* defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U) */
1512:Drivers/CMSIS/Include/core_cm7.h **** 
1513:Drivers/CMSIS/Include/core_cm7.h **** 
1514:Drivers/CMSIS/Include/core_cm7.h **** /**
1515:Drivers/CMSIS/Include/core_cm7.h ****   \ingroup  CMSIS_core_register
1516:Drivers/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1517:Drivers/CMSIS/Include/core_cm7.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1518:Drivers/CMSIS/Include/core_cm7.h ****   @{
1519:Drivers/CMSIS/Include/core_cm7.h ****  */
1520:Drivers/CMSIS/Include/core_cm7.h **** 
1521:Drivers/CMSIS/Include/core_cm7.h **** /**
1522:Drivers/CMSIS/Include/core_cm7.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1523:Drivers/CMSIS/Include/core_cm7.h ****  */
1524:Drivers/CMSIS/Include/core_cm7.h **** typedef struct
1525:Drivers/CMSIS/Include/core_cm7.h **** {
1526:Drivers/CMSIS/Include/core_cm7.h ****         uint32_t RESERVED0[1U];
1527:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1528:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1529:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1530:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1531:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1532:Drivers/CMSIS/Include/core_cm7.h ****   __IM  uint32_t MVFR2;                  /*!< Offset: 0x018 (R/ )  Media and FP Feature Register 2 
1533:Drivers/CMSIS/Include/core_cm7.h **** } FPU_Type;
1534:Drivers/CMSIS/Include/core_cm7.h **** 
1535:Drivers/CMSIS/Include/core_cm7.h **** /* Floating-Point Context Control Register Definitions */
1536:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1537:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1538:Drivers/CMSIS/Include/core_cm7.h **** 
1539:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1540:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1541:Drivers/CMSIS/Include/core_cm7.h **** 
1542:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1543:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1544:Drivers/CMSIS/Include/core_cm7.h **** 
1545:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1546:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1547:Drivers/CMSIS/Include/core_cm7.h **** 
1548:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1549:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1550:Drivers/CMSIS/Include/core_cm7.h **** 
1551:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1552:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1553:Drivers/CMSIS/Include/core_cm7.h **** 
1554:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1555:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1556:Drivers/CMSIS/Include/core_cm7.h **** 
ARM GAS  /tmp/ccJW5Vt8.s 			page 76


1557:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1558:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1559:Drivers/CMSIS/Include/core_cm7.h **** 
1560:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1561:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1562:Drivers/CMSIS/Include/core_cm7.h **** 
1563:Drivers/CMSIS/Include/core_cm7.h **** /* Floating-Point Context Address Register Definitions */
1564:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1565:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1566:Drivers/CMSIS/Include/core_cm7.h **** 
1567:Drivers/CMSIS/Include/core_cm7.h **** /* Floating-Point Default Status Control Register Definitions */
1568:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1569:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1570:Drivers/CMSIS/Include/core_cm7.h **** 
1571:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1572:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1573:Drivers/CMSIS/Include/core_cm7.h **** 
1574:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1575:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1576:Drivers/CMSIS/Include/core_cm7.h **** 
1577:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1578:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1579:Drivers/CMSIS/Include/core_cm7.h **** 
1580:Drivers/CMSIS/Include/core_cm7.h **** /* Media and FP Feature Register 0 Definitions */
1581:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1582:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1583:Drivers/CMSIS/Include/core_cm7.h **** 
1584:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1585:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1586:Drivers/CMSIS/Include/core_cm7.h **** 
1587:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1588:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1589:Drivers/CMSIS/Include/core_cm7.h **** 
1590:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1591:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1592:Drivers/CMSIS/Include/core_cm7.h **** 
1593:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1594:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1595:Drivers/CMSIS/Include/core_cm7.h **** 
1596:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1597:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1598:Drivers/CMSIS/Include/core_cm7.h **** 
1599:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1600:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1601:Drivers/CMSIS/Include/core_cm7.h **** 
1602:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1603:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1604:Drivers/CMSIS/Include/core_cm7.h **** 
1605:Drivers/CMSIS/Include/core_cm7.h **** /* Media and FP Feature Register 1 Definitions */
1606:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1607:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1608:Drivers/CMSIS/Include/core_cm7.h **** 
1609:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1610:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1611:Drivers/CMSIS/Include/core_cm7.h **** 
1612:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1613:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
ARM GAS  /tmp/ccJW5Vt8.s 			page 77


1614:Drivers/CMSIS/Include/core_cm7.h **** 
1615:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1616:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1617:Drivers/CMSIS/Include/core_cm7.h **** 
1618:Drivers/CMSIS/Include/core_cm7.h **** /* Media and FP Feature Register 2 Definitions */
1619:Drivers/CMSIS/Include/core_cm7.h **** 
1620:Drivers/CMSIS/Include/core_cm7.h **** /*@} end of group CMSIS_FPU */
1621:Drivers/CMSIS/Include/core_cm7.h **** 
1622:Drivers/CMSIS/Include/core_cm7.h **** 
1623:Drivers/CMSIS/Include/core_cm7.h **** /**
1624:Drivers/CMSIS/Include/core_cm7.h ****   \ingroup  CMSIS_core_register
1625:Drivers/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1626:Drivers/CMSIS/Include/core_cm7.h ****   \brief    Type definitions for the Core Debug Registers
1627:Drivers/CMSIS/Include/core_cm7.h ****   @{
1628:Drivers/CMSIS/Include/core_cm7.h ****  */
1629:Drivers/CMSIS/Include/core_cm7.h **** 
1630:Drivers/CMSIS/Include/core_cm7.h **** /**
1631:Drivers/CMSIS/Include/core_cm7.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1632:Drivers/CMSIS/Include/core_cm7.h ****  */
1633:Drivers/CMSIS/Include/core_cm7.h **** typedef struct
1634:Drivers/CMSIS/Include/core_cm7.h **** {
1635:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1636:Drivers/CMSIS/Include/core_cm7.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1637:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1638:Drivers/CMSIS/Include/core_cm7.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1639:Drivers/CMSIS/Include/core_cm7.h **** } CoreDebug_Type;
1640:Drivers/CMSIS/Include/core_cm7.h **** 
1641:Drivers/CMSIS/Include/core_cm7.h **** /* Debug Halting Control and Status Register Definitions */
1642:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1643:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1644:Drivers/CMSIS/Include/core_cm7.h **** 
1645:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1646:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1647:Drivers/CMSIS/Include/core_cm7.h **** 
1648:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1649:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1650:Drivers/CMSIS/Include/core_cm7.h **** 
1651:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1652:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1653:Drivers/CMSIS/Include/core_cm7.h **** 
1654:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1655:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1656:Drivers/CMSIS/Include/core_cm7.h **** 
1657:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1658:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1659:Drivers/CMSIS/Include/core_cm7.h **** 
1660:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1661:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1662:Drivers/CMSIS/Include/core_cm7.h **** 
1663:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1664:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1665:Drivers/CMSIS/Include/core_cm7.h **** 
1666:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1667:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1668:Drivers/CMSIS/Include/core_cm7.h **** 
1669:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1670:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
ARM GAS  /tmp/ccJW5Vt8.s 			page 78


1671:Drivers/CMSIS/Include/core_cm7.h **** 
1672:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1673:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1674:Drivers/CMSIS/Include/core_cm7.h **** 
1675:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1676:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1677:Drivers/CMSIS/Include/core_cm7.h **** 
1678:Drivers/CMSIS/Include/core_cm7.h **** /* Debug Core Register Selector Register Definitions */
1679:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1680:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1681:Drivers/CMSIS/Include/core_cm7.h **** 
1682:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1683:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1684:Drivers/CMSIS/Include/core_cm7.h **** 
1685:Drivers/CMSIS/Include/core_cm7.h **** /* Debug Exception and Monitor Control Register Definitions */
1686:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1687:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1688:Drivers/CMSIS/Include/core_cm7.h **** 
1689:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1690:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1691:Drivers/CMSIS/Include/core_cm7.h **** 
1692:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1693:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1694:Drivers/CMSIS/Include/core_cm7.h **** 
1695:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1696:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1697:Drivers/CMSIS/Include/core_cm7.h **** 
1698:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1699:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1700:Drivers/CMSIS/Include/core_cm7.h **** 
1701:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1702:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1703:Drivers/CMSIS/Include/core_cm7.h **** 
1704:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1705:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1706:Drivers/CMSIS/Include/core_cm7.h **** 
1707:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1708:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1709:Drivers/CMSIS/Include/core_cm7.h **** 
1710:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1711:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1712:Drivers/CMSIS/Include/core_cm7.h **** 
1713:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1714:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1715:Drivers/CMSIS/Include/core_cm7.h **** 
1716:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1717:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1718:Drivers/CMSIS/Include/core_cm7.h **** 
1719:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1720:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1721:Drivers/CMSIS/Include/core_cm7.h **** 
1722:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1723:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1724:Drivers/CMSIS/Include/core_cm7.h **** 
1725:Drivers/CMSIS/Include/core_cm7.h **** /*@} end of group CMSIS_CoreDebug */
1726:Drivers/CMSIS/Include/core_cm7.h **** 
1727:Drivers/CMSIS/Include/core_cm7.h **** 
ARM GAS  /tmp/ccJW5Vt8.s 			page 79


1728:Drivers/CMSIS/Include/core_cm7.h **** /**
1729:Drivers/CMSIS/Include/core_cm7.h ****   \ingroup    CMSIS_core_register
1730:Drivers/CMSIS/Include/core_cm7.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1731:Drivers/CMSIS/Include/core_cm7.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1732:Drivers/CMSIS/Include/core_cm7.h ****   @{
1733:Drivers/CMSIS/Include/core_cm7.h ****  */
1734:Drivers/CMSIS/Include/core_cm7.h **** 
1735:Drivers/CMSIS/Include/core_cm7.h **** /**
1736:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1737:Drivers/CMSIS/Include/core_cm7.h ****   \param[in] field  Name of the register bit field.
1738:Drivers/CMSIS/Include/core_cm7.h ****   \param[in] value  Value of the bit field. This parameter is interpreted as an uint32_t type.
1739:Drivers/CMSIS/Include/core_cm7.h ****   \return           Masked and shifted value.
1740:Drivers/CMSIS/Include/core_cm7.h **** */
1741:Drivers/CMSIS/Include/core_cm7.h **** #define _VAL2FLD(field, value)    (((uint32_t)(value) << field ## _Pos) & field ## _Msk)
1742:Drivers/CMSIS/Include/core_cm7.h **** 
1743:Drivers/CMSIS/Include/core_cm7.h **** /**
1744:Drivers/CMSIS/Include/core_cm7.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1745:Drivers/CMSIS/Include/core_cm7.h ****   \param[in] field  Name of the register bit field.
1746:Drivers/CMSIS/Include/core_cm7.h ****   \param[in] value  Value of register. This parameter is interpreted as an uint32_t type.
1747:Drivers/CMSIS/Include/core_cm7.h ****   \return           Masked and shifted bit field value.
1748:Drivers/CMSIS/Include/core_cm7.h **** */
1749:Drivers/CMSIS/Include/core_cm7.h **** #define _FLD2VAL(field, value)    (((uint32_t)(value) & field ## _Msk) >> field ## _Pos)
1750:Drivers/CMSIS/Include/core_cm7.h **** 
1751:Drivers/CMSIS/Include/core_cm7.h **** /*@} end of group CMSIS_core_bitfield */
1752:Drivers/CMSIS/Include/core_cm7.h **** 
1753:Drivers/CMSIS/Include/core_cm7.h **** 
1754:Drivers/CMSIS/Include/core_cm7.h **** /**
1755:Drivers/CMSIS/Include/core_cm7.h ****   \ingroup    CMSIS_core_register
1756:Drivers/CMSIS/Include/core_cm7.h ****   \defgroup   CMSIS_core_base     Core Definitions
1757:Drivers/CMSIS/Include/core_cm7.h ****   \brief      Definitions for base addresses, unions, and structures.
1758:Drivers/CMSIS/Include/core_cm7.h ****   @{
1759:Drivers/CMSIS/Include/core_cm7.h ****  */
1760:Drivers/CMSIS/Include/core_cm7.h **** 
1761:Drivers/CMSIS/Include/core_cm7.h **** /* Memory mapping of Core Hardware */
1762:Drivers/CMSIS/Include/core_cm7.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1763:Drivers/CMSIS/Include/core_cm7.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1764:Drivers/CMSIS/Include/core_cm7.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1765:Drivers/CMSIS/Include/core_cm7.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1766:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1767:Drivers/CMSIS/Include/core_cm7.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1768:Drivers/CMSIS/Include/core_cm7.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1769:Drivers/CMSIS/Include/core_cm7.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1770:Drivers/CMSIS/Include/core_cm7.h **** 
1771:Drivers/CMSIS/Include/core_cm7.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1772:Drivers/CMSIS/Include/core_cm7.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1773:Drivers/CMSIS/Include/core_cm7.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1774:Drivers/CMSIS/Include/core_cm7.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1775:Drivers/CMSIS/Include/core_cm7.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1776:Drivers/CMSIS/Include/core_cm7.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1777:Drivers/CMSIS/Include/core_cm7.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1778:Drivers/CMSIS/Include/core_cm7.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1779:Drivers/CMSIS/Include/core_cm7.h **** 
1780:Drivers/CMSIS/Include/core_cm7.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
1781:Drivers/CMSIS/Include/core_cm7.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1782:Drivers/CMSIS/Include/core_cm7.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1783:Drivers/CMSIS/Include/core_cm7.h **** #endif
1784:Drivers/CMSIS/Include/core_cm7.h **** 
ARM GAS  /tmp/ccJW5Vt8.s 			page 80


1785:Drivers/CMSIS/Include/core_cm7.h **** #define FPU_BASE            (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1786:Drivers/CMSIS/Include/core_cm7.h **** #define FPU                 ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1787:Drivers/CMSIS/Include/core_cm7.h **** 
1788:Drivers/CMSIS/Include/core_cm7.h **** /*@} */
1789:Drivers/CMSIS/Include/core_cm7.h **** 
1790:Drivers/CMSIS/Include/core_cm7.h **** 
1791:Drivers/CMSIS/Include/core_cm7.h **** 
1792:Drivers/CMSIS/Include/core_cm7.h **** /*******************************************************************************
1793:Drivers/CMSIS/Include/core_cm7.h ****  *                Hardware Abstraction Layer
1794:Drivers/CMSIS/Include/core_cm7.h ****   Core Function Interface contains:
1795:Drivers/CMSIS/Include/core_cm7.h ****   - Core NVIC Functions
1796:Drivers/CMSIS/Include/core_cm7.h ****   - Core SysTick Functions
1797:Drivers/CMSIS/Include/core_cm7.h ****   - Core Debug Functions
1798:Drivers/CMSIS/Include/core_cm7.h ****   - Core Register Access Functions
1799:Drivers/CMSIS/Include/core_cm7.h ****  ******************************************************************************/
1800:Drivers/CMSIS/Include/core_cm7.h **** /**
1801:Drivers/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1802:Drivers/CMSIS/Include/core_cm7.h **** */
1803:Drivers/CMSIS/Include/core_cm7.h **** 
1804:Drivers/CMSIS/Include/core_cm7.h **** 
1805:Drivers/CMSIS/Include/core_cm7.h **** 
1806:Drivers/CMSIS/Include/core_cm7.h **** /* ##########################   NVIC functions  #################################### */
1807:Drivers/CMSIS/Include/core_cm7.h **** /**
1808:Drivers/CMSIS/Include/core_cm7.h ****   \ingroup  CMSIS_Core_FunctionInterface
1809:Drivers/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1810:Drivers/CMSIS/Include/core_cm7.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1811:Drivers/CMSIS/Include/core_cm7.h ****   @{
1812:Drivers/CMSIS/Include/core_cm7.h ****  */
1813:Drivers/CMSIS/Include/core_cm7.h **** 
1814:Drivers/CMSIS/Include/core_cm7.h **** #ifdef CMSIS_NVIC_VIRTUAL
1815:Drivers/CMSIS/Include/core_cm7.h ****   #ifndef CMSIS_NVIC_VIRTUAL_HEADER_FILE
1816:Drivers/CMSIS/Include/core_cm7.h ****     #define CMSIS_NVIC_VIRTUAL_HEADER_FILE "cmsis_nvic_virtual.h"
1817:Drivers/CMSIS/Include/core_cm7.h ****   #endif
1818:Drivers/CMSIS/Include/core_cm7.h ****   #include CMSIS_NVIC_VIRTUAL_HEADER_FILE
1819:Drivers/CMSIS/Include/core_cm7.h **** #else
1820:Drivers/CMSIS/Include/core_cm7.h ****   #define NVIC_SetPriorityGrouping    __NVIC_SetPriorityGrouping
1821:Drivers/CMSIS/Include/core_cm7.h ****   #define NVIC_GetPriorityGrouping    __NVIC_GetPriorityGrouping
1822:Drivers/CMSIS/Include/core_cm7.h ****   #define NVIC_EnableIRQ              __NVIC_EnableIRQ
1823:Drivers/CMSIS/Include/core_cm7.h ****   #define NVIC_GetEnableIRQ           __NVIC_GetEnableIRQ
1824:Drivers/CMSIS/Include/core_cm7.h ****   #define NVIC_DisableIRQ             __NVIC_DisableIRQ
1825:Drivers/CMSIS/Include/core_cm7.h ****   #define NVIC_GetPendingIRQ          __NVIC_GetPendingIRQ
1826:Drivers/CMSIS/Include/core_cm7.h ****   #define NVIC_SetPendingIRQ          __NVIC_SetPendingIRQ
1827:Drivers/CMSIS/Include/core_cm7.h ****   #define NVIC_ClearPendingIRQ        __NVIC_ClearPendingIRQ
1828:Drivers/CMSIS/Include/core_cm7.h ****   #define NVIC_GetActive              __NVIC_GetActive
1829:Drivers/CMSIS/Include/core_cm7.h ****   #define NVIC_SetPriority            __NVIC_SetPriority
1830:Drivers/CMSIS/Include/core_cm7.h ****   #define NVIC_GetPriority            __NVIC_GetPriority
1831:Drivers/CMSIS/Include/core_cm7.h ****   #define NVIC_SystemReset            __NVIC_SystemReset
1832:Drivers/CMSIS/Include/core_cm7.h **** #endif /* CMSIS_NVIC_VIRTUAL */
1833:Drivers/CMSIS/Include/core_cm7.h **** 
1834:Drivers/CMSIS/Include/core_cm7.h **** #ifdef CMSIS_VECTAB_VIRTUAL
1835:Drivers/CMSIS/Include/core_cm7.h ****   #ifndef CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1836:Drivers/CMSIS/Include/core_cm7.h ****     #define CMSIS_VECTAB_VIRTUAL_HEADER_FILE "cmsis_vectab_virtual.h"
1837:Drivers/CMSIS/Include/core_cm7.h ****   #endif
1838:Drivers/CMSIS/Include/core_cm7.h ****   #include CMSIS_VECTAB_VIRTUAL_HEADER_FILE
1839:Drivers/CMSIS/Include/core_cm7.h **** #else
1840:Drivers/CMSIS/Include/core_cm7.h ****   #define NVIC_SetVector              __NVIC_SetVector
1841:Drivers/CMSIS/Include/core_cm7.h ****   #define NVIC_GetVector              __NVIC_GetVector
ARM GAS  /tmp/ccJW5Vt8.s 			page 81


1842:Drivers/CMSIS/Include/core_cm7.h **** #endif  /* (CMSIS_VECTAB_VIRTUAL) */
1843:Drivers/CMSIS/Include/core_cm7.h **** 
1844:Drivers/CMSIS/Include/core_cm7.h **** #define NVIC_USER_IRQ_OFFSET          16
1845:Drivers/CMSIS/Include/core_cm7.h **** 
1846:Drivers/CMSIS/Include/core_cm7.h **** 
1847:Drivers/CMSIS/Include/core_cm7.h **** /* The following EXC_RETURN values are saved the LR on exception entry */
1848:Drivers/CMSIS/Include/core_cm7.h **** #define EXC_RETURN_HANDLER         (0xFFFFFFF1UL)     /* return to Handler mode, uses MSP after ret
1849:Drivers/CMSIS/Include/core_cm7.h **** #define EXC_RETURN_THREAD_MSP      (0xFFFFFFF9UL)     /* return to Thread mode, uses MSP after retu
1850:Drivers/CMSIS/Include/core_cm7.h **** #define EXC_RETURN_THREAD_PSP      (0xFFFFFFFDUL)     /* return to Thread mode, uses PSP after retu
1851:Drivers/CMSIS/Include/core_cm7.h **** #define EXC_RETURN_HANDLER_FPU     (0xFFFFFFE1UL)     /* return to Handler mode, uses MSP after ret
1852:Drivers/CMSIS/Include/core_cm7.h **** #define EXC_RETURN_THREAD_MSP_FPU  (0xFFFFFFE9UL)     /* return to Thread mode, uses MSP after retu
1853:Drivers/CMSIS/Include/core_cm7.h **** #define EXC_RETURN_THREAD_PSP_FPU  (0xFFFFFFEDUL)     /* return to Thread mode, uses PSP after retu
1854:Drivers/CMSIS/Include/core_cm7.h **** 
1855:Drivers/CMSIS/Include/core_cm7.h **** 
1856:Drivers/CMSIS/Include/core_cm7.h **** /**
1857:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Set Priority Grouping
1858:Drivers/CMSIS/Include/core_cm7.h ****   \details Sets the priority grouping field using the required unlock sequence.
1859:Drivers/CMSIS/Include/core_cm7.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1860:Drivers/CMSIS/Include/core_cm7.h ****            Only values from 0..7 are used.
1861:Drivers/CMSIS/Include/core_cm7.h ****            In case of a conflict between priority grouping and available
1862:Drivers/CMSIS/Include/core_cm7.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1863:Drivers/CMSIS/Include/core_cm7.h ****   \param [in]      PriorityGroup  Priority grouping field.
1864:Drivers/CMSIS/Include/core_cm7.h ****  */
1865:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1866:Drivers/CMSIS/Include/core_cm7.h **** {
1867:Drivers/CMSIS/Include/core_cm7.h ****   uint32_t reg_value;
1868:Drivers/CMSIS/Include/core_cm7.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1869:Drivers/CMSIS/Include/core_cm7.h **** 
1870:Drivers/CMSIS/Include/core_cm7.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1871:Drivers/CMSIS/Include/core_cm7.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1872:Drivers/CMSIS/Include/core_cm7.h ****   reg_value  =  (reg_value                                   |
1873:Drivers/CMSIS/Include/core_cm7.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1874:Drivers/CMSIS/Include/core_cm7.h ****                 (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key a
1875:Drivers/CMSIS/Include/core_cm7.h ****   SCB->AIRCR =  reg_value;
1876:Drivers/CMSIS/Include/core_cm7.h **** }
1877:Drivers/CMSIS/Include/core_cm7.h **** 
1878:Drivers/CMSIS/Include/core_cm7.h **** 
1879:Drivers/CMSIS/Include/core_cm7.h **** /**
1880:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Get Priority Grouping
1881:Drivers/CMSIS/Include/core_cm7.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1882:Drivers/CMSIS/Include/core_cm7.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1883:Drivers/CMSIS/Include/core_cm7.h ****  */
1884:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
1885:Drivers/CMSIS/Include/core_cm7.h **** {
1886:Drivers/CMSIS/Include/core_cm7.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1887:Drivers/CMSIS/Include/core_cm7.h **** }
1888:Drivers/CMSIS/Include/core_cm7.h **** 
1889:Drivers/CMSIS/Include/core_cm7.h **** 
1890:Drivers/CMSIS/Include/core_cm7.h **** /**
1891:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Enable Interrupt
1892:Drivers/CMSIS/Include/core_cm7.h ****   \details Enables a device specific interrupt in the NVIC interrupt controller.
1893:Drivers/CMSIS/Include/core_cm7.h ****   \param [in]      IRQn  Device specific interrupt number.
1894:Drivers/CMSIS/Include/core_cm7.h ****   \note    IRQn must not be negative.
1895:Drivers/CMSIS/Include/core_cm7.h ****  */
1896:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
1897:Drivers/CMSIS/Include/core_cm7.h **** {
1898:Drivers/CMSIS/Include/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
ARM GAS  /tmp/ccJW5Vt8.s 			page 82


1899:Drivers/CMSIS/Include/core_cm7.h ****   {
1900:Drivers/CMSIS/Include/core_cm7.h ****     NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1901:Drivers/CMSIS/Include/core_cm7.h ****   }
1902:Drivers/CMSIS/Include/core_cm7.h **** }
1903:Drivers/CMSIS/Include/core_cm7.h **** 
1904:Drivers/CMSIS/Include/core_cm7.h **** 
1905:Drivers/CMSIS/Include/core_cm7.h **** /**
1906:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Get Interrupt Enable status
1907:Drivers/CMSIS/Include/core_cm7.h ****   \details Returns a device specific interrupt enable status from the NVIC interrupt controller.
1908:Drivers/CMSIS/Include/core_cm7.h ****   \param [in]      IRQn  Device specific interrupt number.
1909:Drivers/CMSIS/Include/core_cm7.h ****   \return             0  Interrupt is not enabled.
1910:Drivers/CMSIS/Include/core_cm7.h ****   \return             1  Interrupt is enabled.
1911:Drivers/CMSIS/Include/core_cm7.h ****   \note    IRQn must not be negative.
1912:Drivers/CMSIS/Include/core_cm7.h ****  */
1913:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
1914:Drivers/CMSIS/Include/core_cm7.h **** {
1915:Drivers/CMSIS/Include/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
1916:Drivers/CMSIS/Include/core_cm7.h ****   {
1917:Drivers/CMSIS/Include/core_cm7.h ****     return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
1918:Drivers/CMSIS/Include/core_cm7.h ****   }
1919:Drivers/CMSIS/Include/core_cm7.h ****   else
1920:Drivers/CMSIS/Include/core_cm7.h ****   {
1921:Drivers/CMSIS/Include/core_cm7.h ****     return(0U);
1922:Drivers/CMSIS/Include/core_cm7.h ****   }
1923:Drivers/CMSIS/Include/core_cm7.h **** }
1924:Drivers/CMSIS/Include/core_cm7.h **** 
1925:Drivers/CMSIS/Include/core_cm7.h **** 
1926:Drivers/CMSIS/Include/core_cm7.h **** /**
1927:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Disable Interrupt
1928:Drivers/CMSIS/Include/core_cm7.h ****   \details Disables a device specific interrupt in the NVIC interrupt controller.
1929:Drivers/CMSIS/Include/core_cm7.h ****   \param [in]      IRQn  Device specific interrupt number.
1930:Drivers/CMSIS/Include/core_cm7.h ****   \note    IRQn must not be negative.
1931:Drivers/CMSIS/Include/core_cm7.h ****  */
1932:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
1933:Drivers/CMSIS/Include/core_cm7.h **** {
1934:Drivers/CMSIS/Include/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
1935:Drivers/CMSIS/Include/core_cm7.h ****   {
1936:Drivers/CMSIS/Include/core_cm7.h ****     NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1937:Drivers/CMSIS/Include/core_cm7.h ****     __DSB();
1938:Drivers/CMSIS/Include/core_cm7.h ****     __ISB();
1939:Drivers/CMSIS/Include/core_cm7.h ****   }
1940:Drivers/CMSIS/Include/core_cm7.h **** }
1941:Drivers/CMSIS/Include/core_cm7.h **** 
1942:Drivers/CMSIS/Include/core_cm7.h **** 
1943:Drivers/CMSIS/Include/core_cm7.h **** /**
1944:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Get Pending Interrupt
1945:Drivers/CMSIS/Include/core_cm7.h ****   \details Reads the NVIC pending register and returns the pending bit for the specified device spe
1946:Drivers/CMSIS/Include/core_cm7.h ****   \param [in]      IRQn  Device specific interrupt number.
1947:Drivers/CMSIS/Include/core_cm7.h ****   \return             0  Interrupt status is not pending.
1948:Drivers/CMSIS/Include/core_cm7.h ****   \return             1  Interrupt status is pending.
1949:Drivers/CMSIS/Include/core_cm7.h ****   \note    IRQn must not be negative.
1950:Drivers/CMSIS/Include/core_cm7.h ****  */
1951:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE uint32_t __NVIC_GetPendingIRQ(IRQn_Type IRQn)
1952:Drivers/CMSIS/Include/core_cm7.h **** {
1953:Drivers/CMSIS/Include/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
1954:Drivers/CMSIS/Include/core_cm7.h ****   {
1955:Drivers/CMSIS/Include/core_cm7.h ****     return((uint32_t)(((NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
ARM GAS  /tmp/ccJW5Vt8.s 			page 83


1956:Drivers/CMSIS/Include/core_cm7.h ****   }
1957:Drivers/CMSIS/Include/core_cm7.h ****   else
1958:Drivers/CMSIS/Include/core_cm7.h ****   {
1959:Drivers/CMSIS/Include/core_cm7.h ****     return(0U);
1960:Drivers/CMSIS/Include/core_cm7.h ****   }
1961:Drivers/CMSIS/Include/core_cm7.h **** }
1962:Drivers/CMSIS/Include/core_cm7.h **** 
1963:Drivers/CMSIS/Include/core_cm7.h **** 
1964:Drivers/CMSIS/Include/core_cm7.h **** /**
1965:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Set Pending Interrupt
1966:Drivers/CMSIS/Include/core_cm7.h ****   \details Sets the pending bit of a device specific interrupt in the NVIC pending register.
1967:Drivers/CMSIS/Include/core_cm7.h ****   \param [in]      IRQn  Device specific interrupt number.
1968:Drivers/CMSIS/Include/core_cm7.h ****   \note    IRQn must not be negative.
1969:Drivers/CMSIS/Include/core_cm7.h ****  */
1970:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void __NVIC_SetPendingIRQ(IRQn_Type IRQn)
1971:Drivers/CMSIS/Include/core_cm7.h **** {
1972:Drivers/CMSIS/Include/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
1973:Drivers/CMSIS/Include/core_cm7.h ****   {
1974:Drivers/CMSIS/Include/core_cm7.h ****     NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1975:Drivers/CMSIS/Include/core_cm7.h ****   }
1976:Drivers/CMSIS/Include/core_cm7.h **** }
1977:Drivers/CMSIS/Include/core_cm7.h **** 
1978:Drivers/CMSIS/Include/core_cm7.h **** 
1979:Drivers/CMSIS/Include/core_cm7.h **** /**
1980:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Clear Pending Interrupt
1981:Drivers/CMSIS/Include/core_cm7.h ****   \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
1982:Drivers/CMSIS/Include/core_cm7.h ****   \param [in]      IRQn  Device specific interrupt number.
1983:Drivers/CMSIS/Include/core_cm7.h ****   \note    IRQn must not be negative.
1984:Drivers/CMSIS/Include/core_cm7.h ****  */
1985:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1986:Drivers/CMSIS/Include/core_cm7.h **** {
1987:Drivers/CMSIS/Include/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
1988:Drivers/CMSIS/Include/core_cm7.h ****   {
1989:Drivers/CMSIS/Include/core_cm7.h ****     NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1990:Drivers/CMSIS/Include/core_cm7.h ****   }
1991:Drivers/CMSIS/Include/core_cm7.h **** }
1992:Drivers/CMSIS/Include/core_cm7.h **** 
1993:Drivers/CMSIS/Include/core_cm7.h **** 
1994:Drivers/CMSIS/Include/core_cm7.h **** /**
1995:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Get Active Interrupt
1996:Drivers/CMSIS/Include/core_cm7.h ****   \details Reads the active register in the NVIC and returns the active bit for the device specific
1997:Drivers/CMSIS/Include/core_cm7.h ****   \param [in]      IRQn  Device specific interrupt number.
1998:Drivers/CMSIS/Include/core_cm7.h ****   \return             0  Interrupt status is not active.
1999:Drivers/CMSIS/Include/core_cm7.h ****   \return             1  Interrupt status is active.
2000:Drivers/CMSIS/Include/core_cm7.h ****   \note    IRQn must not be negative.
2001:Drivers/CMSIS/Include/core_cm7.h ****  */
2002:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE uint32_t __NVIC_GetActive(IRQn_Type IRQn)
2003:Drivers/CMSIS/Include/core_cm7.h **** {
2004:Drivers/CMSIS/Include/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
2005:Drivers/CMSIS/Include/core_cm7.h ****   {
2006:Drivers/CMSIS/Include/core_cm7.h ****     return((uint32_t)(((NVIC->IABR[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL)
2007:Drivers/CMSIS/Include/core_cm7.h ****   }
2008:Drivers/CMSIS/Include/core_cm7.h ****   else
2009:Drivers/CMSIS/Include/core_cm7.h ****   {
2010:Drivers/CMSIS/Include/core_cm7.h ****     return(0U);
2011:Drivers/CMSIS/Include/core_cm7.h ****   }
2012:Drivers/CMSIS/Include/core_cm7.h **** }
ARM GAS  /tmp/ccJW5Vt8.s 			page 84


2013:Drivers/CMSIS/Include/core_cm7.h **** 
2014:Drivers/CMSIS/Include/core_cm7.h **** 
2015:Drivers/CMSIS/Include/core_cm7.h **** /**
2016:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Set Interrupt Priority
2017:Drivers/CMSIS/Include/core_cm7.h ****   \details Sets the priority of a device specific interrupt or a processor exception.
2018:Drivers/CMSIS/Include/core_cm7.h ****            The interrupt number can be positive to specify a device specific interrupt,
2019:Drivers/CMSIS/Include/core_cm7.h ****            or negative to specify a processor exception.
2020:Drivers/CMSIS/Include/core_cm7.h ****   \param [in]      IRQn  Interrupt number.
2021:Drivers/CMSIS/Include/core_cm7.h ****   \param [in]  priority  Priority to set.
2022:Drivers/CMSIS/Include/core_cm7.h ****   \note    The priority cannot be set for every processor exception.
2023:Drivers/CMSIS/Include/core_cm7.h ****  */
2024:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
2025:Drivers/CMSIS/Include/core_cm7.h **** {
2026:Drivers/CMSIS/Include/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
2027:Drivers/CMSIS/Include/core_cm7.h ****   {
2028:Drivers/CMSIS/Include/core_cm7.h ****     NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (
2029:Drivers/CMSIS/Include/core_cm7.h ****   }
2030:Drivers/CMSIS/Include/core_cm7.h ****   else
2031:Drivers/CMSIS/Include/core_cm7.h ****   {
2032:Drivers/CMSIS/Include/core_cm7.h ****     SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (
2033:Drivers/CMSIS/Include/core_cm7.h ****   }
2034:Drivers/CMSIS/Include/core_cm7.h **** }
2035:Drivers/CMSIS/Include/core_cm7.h **** 
2036:Drivers/CMSIS/Include/core_cm7.h **** 
2037:Drivers/CMSIS/Include/core_cm7.h **** /**
2038:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Get Interrupt Priority
2039:Drivers/CMSIS/Include/core_cm7.h ****   \details Reads the priority of a device specific interrupt or a processor exception.
2040:Drivers/CMSIS/Include/core_cm7.h ****            The interrupt number can be positive to specify a device specific interrupt,
2041:Drivers/CMSIS/Include/core_cm7.h ****            or negative to specify a processor exception.
2042:Drivers/CMSIS/Include/core_cm7.h ****   \param [in]   IRQn  Interrupt number.
2043:Drivers/CMSIS/Include/core_cm7.h ****   \return             Interrupt Priority.
2044:Drivers/CMSIS/Include/core_cm7.h ****                       Value is aligned automatically to the implemented priority bits of the microc
2045:Drivers/CMSIS/Include/core_cm7.h ****  */
2046:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE uint32_t __NVIC_GetPriority(IRQn_Type IRQn)
2047:Drivers/CMSIS/Include/core_cm7.h **** {
2048:Drivers/CMSIS/Include/core_cm7.h **** 
2049:Drivers/CMSIS/Include/core_cm7.h ****   if ((int32_t)(IRQn) >= 0)
2050:Drivers/CMSIS/Include/core_cm7.h ****   {
2051:Drivers/CMSIS/Include/core_cm7.h ****     return(((uint32_t)NVIC->IP[((uint32_t)IRQn)]                >> (8U - __NVIC_PRIO_BITS)));
2052:Drivers/CMSIS/Include/core_cm7.h ****   }
2053:Drivers/CMSIS/Include/core_cm7.h ****   else
2054:Drivers/CMSIS/Include/core_cm7.h ****   {
2055:Drivers/CMSIS/Include/core_cm7.h ****     return(((uint32_t)SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] >> (8U - __NVIC_PRIO_BITS)));
2056:Drivers/CMSIS/Include/core_cm7.h ****   }
2057:Drivers/CMSIS/Include/core_cm7.h **** }
2058:Drivers/CMSIS/Include/core_cm7.h **** 
2059:Drivers/CMSIS/Include/core_cm7.h **** 
2060:Drivers/CMSIS/Include/core_cm7.h **** /**
2061:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Encode Priority
2062:Drivers/CMSIS/Include/core_cm7.h ****   \details Encodes the priority for an interrupt with the given priority group,
2063:Drivers/CMSIS/Include/core_cm7.h ****            preemptive priority value, and subpriority value.
2064:Drivers/CMSIS/Include/core_cm7.h ****            In case of a conflict between priority grouping and available
2065:Drivers/CMSIS/Include/core_cm7.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
2066:Drivers/CMSIS/Include/core_cm7.h ****   \param [in]     PriorityGroup  Used priority group.
2067:Drivers/CMSIS/Include/core_cm7.h ****   \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
2068:Drivers/CMSIS/Include/core_cm7.h ****   \param [in]       SubPriority  Subpriority value (starting from 0).
2069:Drivers/CMSIS/Include/core_cm7.h ****   \return                        Encoded priority. Value can be used in the function \ref NVIC_SetP
ARM GAS  /tmp/ccJW5Vt8.s 			page 85


2070:Drivers/CMSIS/Include/core_cm7.h ****  */
2071:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
2072:Drivers/CMSIS/Include/core_cm7.h **** {
2073:Drivers/CMSIS/Include/core_cm7.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
2074:Drivers/CMSIS/Include/core_cm7.h ****   uint32_t PreemptPriorityBits;
2075:Drivers/CMSIS/Include/core_cm7.h ****   uint32_t SubPriorityBits;
2076:Drivers/CMSIS/Include/core_cm7.h **** 
2077:Drivers/CMSIS/Include/core_cm7.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
2078:Drivers/CMSIS/Include/core_cm7.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
2079:Drivers/CMSIS/Include/core_cm7.h **** 
2080:Drivers/CMSIS/Include/core_cm7.h ****   return (
2081:Drivers/CMSIS/Include/core_cm7.h ****            ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits
2082:Drivers/CMSIS/Include/core_cm7.h ****            ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
2083:Drivers/CMSIS/Include/core_cm7.h ****          );
2084:Drivers/CMSIS/Include/core_cm7.h **** }
2085:Drivers/CMSIS/Include/core_cm7.h **** 
2086:Drivers/CMSIS/Include/core_cm7.h **** 
2087:Drivers/CMSIS/Include/core_cm7.h **** /**
2088:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Decode Priority
2089:Drivers/CMSIS/Include/core_cm7.h ****   \details Decodes an interrupt priority value with a given priority group to
2090:Drivers/CMSIS/Include/core_cm7.h ****            preemptive priority value and subpriority value.
2091:Drivers/CMSIS/Include/core_cm7.h ****            In case of a conflict between priority grouping and available
2092:Drivers/CMSIS/Include/core_cm7.h ****            priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.
2093:Drivers/CMSIS/Include/core_cm7.h ****   \param [in]         Priority   Priority value, which can be retrieved with the function \ref NVIC
2094:Drivers/CMSIS/Include/core_cm7.h ****   \param [in]     PriorityGroup  Used priority group.
2095:Drivers/CMSIS/Include/core_cm7.h ****   \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
2096:Drivers/CMSIS/Include/core_cm7.h ****   \param [out]     pSubPriority  Subpriority value (starting from 0).
2097:Drivers/CMSIS/Include/core_cm7.h ****  */
2098:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* cons
2099:Drivers/CMSIS/Include/core_cm7.h **** {
2100:Drivers/CMSIS/Include/core_cm7.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used   
2101:Drivers/CMSIS/Include/core_cm7.h ****   uint32_t PreemptPriorityBits;
2102:Drivers/CMSIS/Include/core_cm7.h ****   uint32_t SubPriorityBits;
2103:Drivers/CMSIS/Include/core_cm7.h **** 
2104:Drivers/CMSIS/Include/core_cm7.h ****   PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NV
2105:Drivers/CMSIS/Include/core_cm7.h ****   SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint
2106:Drivers/CMSIS/Include/core_cm7.h **** 
2107:Drivers/CMSIS/Include/core_cm7.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & (uint32_t)((1UL << (PreemptPriorityBits)) - 1
2108:Drivers/CMSIS/Include/core_cm7.h ****   *pSubPriority     = (Priority                   ) & (uint32_t)((1UL << (SubPriorityBits    )) - 1
2109:Drivers/CMSIS/Include/core_cm7.h **** }
2110:Drivers/CMSIS/Include/core_cm7.h **** 
2111:Drivers/CMSIS/Include/core_cm7.h **** 
2112:Drivers/CMSIS/Include/core_cm7.h **** /**
2113:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Set Interrupt Vector
2114:Drivers/CMSIS/Include/core_cm7.h ****   \details Sets an interrupt vector in SRAM based interrupt vector table.
2115:Drivers/CMSIS/Include/core_cm7.h ****            The interrupt number can be positive to specify a device specific interrupt,
2116:Drivers/CMSIS/Include/core_cm7.h ****            or negative to specify a processor exception.
2117:Drivers/CMSIS/Include/core_cm7.h ****            VTOR must been relocated to SRAM before.
2118:Drivers/CMSIS/Include/core_cm7.h ****   \param [in]   IRQn      Interrupt number
2119:Drivers/CMSIS/Include/core_cm7.h ****   \param [in]   vector    Address of interrupt handler function
2120:Drivers/CMSIS/Include/core_cm7.h ****  */
2121:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void __NVIC_SetVector(IRQn_Type IRQn, uint32_t vector)
2122:Drivers/CMSIS/Include/core_cm7.h **** {
2123:Drivers/CMSIS/Include/core_cm7.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
2124:Drivers/CMSIS/Include/core_cm7.h ****   vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET] = vector;
2125:Drivers/CMSIS/Include/core_cm7.h **** }
2126:Drivers/CMSIS/Include/core_cm7.h **** 
ARM GAS  /tmp/ccJW5Vt8.s 			page 86


2127:Drivers/CMSIS/Include/core_cm7.h **** 
2128:Drivers/CMSIS/Include/core_cm7.h **** /**
2129:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Get Interrupt Vector
2130:Drivers/CMSIS/Include/core_cm7.h ****   \details Reads an interrupt vector from interrupt vector table.
2131:Drivers/CMSIS/Include/core_cm7.h ****            The interrupt number can be positive to specify a device specific interrupt,
2132:Drivers/CMSIS/Include/core_cm7.h ****            or negative to specify a processor exception.
2133:Drivers/CMSIS/Include/core_cm7.h ****   \param [in]   IRQn      Interrupt number.
2134:Drivers/CMSIS/Include/core_cm7.h ****   \return                 Address of interrupt handler function
2135:Drivers/CMSIS/Include/core_cm7.h ****  */
2136:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE uint32_t __NVIC_GetVector(IRQn_Type IRQn)
2137:Drivers/CMSIS/Include/core_cm7.h **** {
2138:Drivers/CMSIS/Include/core_cm7.h ****   uint32_t *vectors = (uint32_t *)SCB->VTOR;
2139:Drivers/CMSIS/Include/core_cm7.h ****   return vectors[(int32_t)IRQn + NVIC_USER_IRQ_OFFSET];
2140:Drivers/CMSIS/Include/core_cm7.h **** }
2141:Drivers/CMSIS/Include/core_cm7.h **** 
2142:Drivers/CMSIS/Include/core_cm7.h **** 
2143:Drivers/CMSIS/Include/core_cm7.h **** /**
2144:Drivers/CMSIS/Include/core_cm7.h ****   \brief   System Reset
2145:Drivers/CMSIS/Include/core_cm7.h ****   \details Initiates a system reset request to reset the MCU.
2146:Drivers/CMSIS/Include/core_cm7.h ****  */
2147:Drivers/CMSIS/Include/core_cm7.h **** __NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
2148:Drivers/CMSIS/Include/core_cm7.h **** {
2149:Drivers/CMSIS/Include/core_cm7.h ****   __DSB();                                                          /* Ensure all outstanding memor
2150:Drivers/CMSIS/Include/core_cm7.h ****                                                                        buffered write are completed
2151:Drivers/CMSIS/Include/core_cm7.h ****   SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
2152:Drivers/CMSIS/Include/core_cm7.h ****                            (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
2153:Drivers/CMSIS/Include/core_cm7.h ****                             SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchange
2154:Drivers/CMSIS/Include/core_cm7.h ****   __DSB();                                                          /* Ensure completion of memory 
2155:Drivers/CMSIS/Include/core_cm7.h **** 
2156:Drivers/CMSIS/Include/core_cm7.h ****   for(;;)                                                           /* wait until reset */
2157:Drivers/CMSIS/Include/core_cm7.h ****   {
2158:Drivers/CMSIS/Include/core_cm7.h ****     __NOP();
2159:Drivers/CMSIS/Include/core_cm7.h ****   }
2160:Drivers/CMSIS/Include/core_cm7.h **** }
2161:Drivers/CMSIS/Include/core_cm7.h **** 
2162:Drivers/CMSIS/Include/core_cm7.h **** /*@} end of CMSIS_Core_NVICFunctions */
2163:Drivers/CMSIS/Include/core_cm7.h **** 
2164:Drivers/CMSIS/Include/core_cm7.h **** /* ##########################  MPU functions  #################################### */
2165:Drivers/CMSIS/Include/core_cm7.h **** 
2166:Drivers/CMSIS/Include/core_cm7.h **** #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
2167:Drivers/CMSIS/Include/core_cm7.h **** 
2168:Drivers/CMSIS/Include/core_cm7.h **** #include "mpu_armv7.h"
2169:Drivers/CMSIS/Include/core_cm7.h **** 
2170:Drivers/CMSIS/Include/core_cm7.h **** #endif
2171:Drivers/CMSIS/Include/core_cm7.h **** 
2172:Drivers/CMSIS/Include/core_cm7.h **** /* ##########################  FPU functions  #################################### */
2173:Drivers/CMSIS/Include/core_cm7.h **** /**
2174:Drivers/CMSIS/Include/core_cm7.h ****   \ingroup  CMSIS_Core_FunctionInterface
2175:Drivers/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_Core_FpuFunctions FPU Functions
2176:Drivers/CMSIS/Include/core_cm7.h ****   \brief    Function that provides FPU type.
2177:Drivers/CMSIS/Include/core_cm7.h ****   @{
2178:Drivers/CMSIS/Include/core_cm7.h ****  */
2179:Drivers/CMSIS/Include/core_cm7.h **** 
2180:Drivers/CMSIS/Include/core_cm7.h **** /**
2181:Drivers/CMSIS/Include/core_cm7.h ****   \brief   get FPU type
2182:Drivers/CMSIS/Include/core_cm7.h ****   \details returns the FPU type
2183:Drivers/CMSIS/Include/core_cm7.h ****   \returns
ARM GAS  /tmp/ccJW5Vt8.s 			page 87


2184:Drivers/CMSIS/Include/core_cm7.h ****    - \b  0: No FPU
2185:Drivers/CMSIS/Include/core_cm7.h ****    - \b  1: Single precision FPU
2186:Drivers/CMSIS/Include/core_cm7.h ****    - \b  2: Double + Single precision FPU
2187:Drivers/CMSIS/Include/core_cm7.h ****  */
2188:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE uint32_t SCB_GetFPUType(void)
2189:Drivers/CMSIS/Include/core_cm7.h **** {
2190:Drivers/CMSIS/Include/core_cm7.h ****   uint32_t mvfr0;
2191:Drivers/CMSIS/Include/core_cm7.h **** 
2192:Drivers/CMSIS/Include/core_cm7.h ****   mvfr0 = SCB->MVFR0;
2193:Drivers/CMSIS/Include/core_cm7.h ****   if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x220U)
2194:Drivers/CMSIS/Include/core_cm7.h ****   {
2195:Drivers/CMSIS/Include/core_cm7.h ****     return 2U;           /* Double + Single precision FPU */
2196:Drivers/CMSIS/Include/core_cm7.h ****   }
2197:Drivers/CMSIS/Include/core_cm7.h ****   else if ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
2198:Drivers/CMSIS/Include/core_cm7.h ****   {
2199:Drivers/CMSIS/Include/core_cm7.h ****     return 1U;           /* Single precision FPU */
2200:Drivers/CMSIS/Include/core_cm7.h ****   }
2201:Drivers/CMSIS/Include/core_cm7.h ****   else
2202:Drivers/CMSIS/Include/core_cm7.h ****   {
2203:Drivers/CMSIS/Include/core_cm7.h ****     return 0U;           /* No FPU */
2204:Drivers/CMSIS/Include/core_cm7.h ****   }
2205:Drivers/CMSIS/Include/core_cm7.h **** }
2206:Drivers/CMSIS/Include/core_cm7.h **** 
2207:Drivers/CMSIS/Include/core_cm7.h **** 
2208:Drivers/CMSIS/Include/core_cm7.h **** /*@} end of CMSIS_Core_FpuFunctions */
2209:Drivers/CMSIS/Include/core_cm7.h **** 
2210:Drivers/CMSIS/Include/core_cm7.h **** 
2211:Drivers/CMSIS/Include/core_cm7.h **** 
2212:Drivers/CMSIS/Include/core_cm7.h **** /* ##########################  Cache functions  #################################### */
2213:Drivers/CMSIS/Include/core_cm7.h **** /**
2214:Drivers/CMSIS/Include/core_cm7.h ****   \ingroup  CMSIS_Core_FunctionInterface
2215:Drivers/CMSIS/Include/core_cm7.h ****   \defgroup CMSIS_Core_CacheFunctions Cache Functions
2216:Drivers/CMSIS/Include/core_cm7.h ****   \brief    Functions that configure Instruction and Data cache.
2217:Drivers/CMSIS/Include/core_cm7.h ****   @{
2218:Drivers/CMSIS/Include/core_cm7.h ****  */
2219:Drivers/CMSIS/Include/core_cm7.h **** 
2220:Drivers/CMSIS/Include/core_cm7.h **** /* Cache Size ID Register Macros */
2221:Drivers/CMSIS/Include/core_cm7.h **** #define CCSIDR_WAYS(x)         (((x) & SCB_CCSIDR_ASSOCIATIVITY_Msk) >> SCB_CCSIDR_ASSOCIATIVITY_Po
2222:Drivers/CMSIS/Include/core_cm7.h **** #define CCSIDR_SETS(x)         (((x) & SCB_CCSIDR_NUMSETS_Msk      ) >> SCB_CCSIDR_NUMSETS_Pos     
2223:Drivers/CMSIS/Include/core_cm7.h **** 
2224:Drivers/CMSIS/Include/core_cm7.h **** 
2225:Drivers/CMSIS/Include/core_cm7.h **** /**
2226:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Enable I-Cache
2227:Drivers/CMSIS/Include/core_cm7.h ****   \details Turns on I-Cache
2228:Drivers/CMSIS/Include/core_cm7.h ****   */
2229:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void SCB_EnableICache (void)
2230:Drivers/CMSIS/Include/core_cm7.h **** {
2231:Drivers/CMSIS/Include/core_cm7.h ****   #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
2232:Drivers/CMSIS/Include/core_cm7.h ****     __DSB();
2233:Drivers/CMSIS/Include/core_cm7.h ****     __ISB();
2234:Drivers/CMSIS/Include/core_cm7.h ****     SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
2235:Drivers/CMSIS/Include/core_cm7.h ****     __DSB();
2236:Drivers/CMSIS/Include/core_cm7.h ****     __ISB();
2237:Drivers/CMSIS/Include/core_cm7.h ****     SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
2238:Drivers/CMSIS/Include/core_cm7.h ****     __DSB();
2239:Drivers/CMSIS/Include/core_cm7.h ****     __ISB();
2240:Drivers/CMSIS/Include/core_cm7.h ****   #endif
ARM GAS  /tmp/ccJW5Vt8.s 			page 88


2241:Drivers/CMSIS/Include/core_cm7.h **** }
2242:Drivers/CMSIS/Include/core_cm7.h **** 
2243:Drivers/CMSIS/Include/core_cm7.h **** 
2244:Drivers/CMSIS/Include/core_cm7.h **** /**
2245:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Disable I-Cache
2246:Drivers/CMSIS/Include/core_cm7.h ****   \details Turns off I-Cache
2247:Drivers/CMSIS/Include/core_cm7.h ****   */
2248:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void SCB_DisableICache (void)
2249:Drivers/CMSIS/Include/core_cm7.h **** {
2250:Drivers/CMSIS/Include/core_cm7.h ****   #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
2251:Drivers/CMSIS/Include/core_cm7.h ****     __DSB();
2252:Drivers/CMSIS/Include/core_cm7.h ****     __ISB();
2253:Drivers/CMSIS/Include/core_cm7.h ****     SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
2254:Drivers/CMSIS/Include/core_cm7.h ****     SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
2255:Drivers/CMSIS/Include/core_cm7.h ****     __DSB();
2256:Drivers/CMSIS/Include/core_cm7.h ****     __ISB();
2257:Drivers/CMSIS/Include/core_cm7.h ****   #endif
2258:Drivers/CMSIS/Include/core_cm7.h **** }
2259:Drivers/CMSIS/Include/core_cm7.h **** 
2260:Drivers/CMSIS/Include/core_cm7.h **** 
2261:Drivers/CMSIS/Include/core_cm7.h **** /**
2262:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Invalidate I-Cache
2263:Drivers/CMSIS/Include/core_cm7.h ****   \details Invalidates I-Cache
2264:Drivers/CMSIS/Include/core_cm7.h ****   */
2265:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void SCB_InvalidateICache (void)
2266:Drivers/CMSIS/Include/core_cm7.h **** {
2267:Drivers/CMSIS/Include/core_cm7.h ****   #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
2268:Drivers/CMSIS/Include/core_cm7.h ****     __DSB();
2269:Drivers/CMSIS/Include/core_cm7.h ****     __ISB();
2270:Drivers/CMSIS/Include/core_cm7.h ****     SCB->ICIALLU = 0UL;
2271:Drivers/CMSIS/Include/core_cm7.h ****     __DSB();
2272:Drivers/CMSIS/Include/core_cm7.h ****     __ISB();
2273:Drivers/CMSIS/Include/core_cm7.h ****   #endif
2274:Drivers/CMSIS/Include/core_cm7.h **** }
2275:Drivers/CMSIS/Include/core_cm7.h **** 
2276:Drivers/CMSIS/Include/core_cm7.h **** 
2277:Drivers/CMSIS/Include/core_cm7.h **** /**
2278:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Enable D-Cache
2279:Drivers/CMSIS/Include/core_cm7.h ****   \details Turns on D-Cache
2280:Drivers/CMSIS/Include/core_cm7.h ****   */
2281:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void SCB_EnableDCache (void)
2282:Drivers/CMSIS/Include/core_cm7.h **** {
2283:Drivers/CMSIS/Include/core_cm7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
2284:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t ccsidr;
2285:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t sets;
2286:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t ways;
2287:Drivers/CMSIS/Include/core_cm7.h **** 
2288:Drivers/CMSIS/Include/core_cm7.h ****     SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
2289:Drivers/CMSIS/Include/core_cm7.h ****     __DSB();
2290:Drivers/CMSIS/Include/core_cm7.h **** 
2291:Drivers/CMSIS/Include/core_cm7.h ****     ccsidr = SCB->CCSIDR;
2292:Drivers/CMSIS/Include/core_cm7.h **** 
2293:Drivers/CMSIS/Include/core_cm7.h ****                                             /* invalidate D-Cache */
2294:Drivers/CMSIS/Include/core_cm7.h ****     sets = (uint32_t)(CCSIDR_SETS(ccsidr));
2295:Drivers/CMSIS/Include/core_cm7.h ****     do {
2296:Drivers/CMSIS/Include/core_cm7.h ****       ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
2297:Drivers/CMSIS/Include/core_cm7.h ****       do {
ARM GAS  /tmp/ccJW5Vt8.s 			page 89


2298:Drivers/CMSIS/Include/core_cm7.h ****         SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
2299:Drivers/CMSIS/Include/core_cm7.h ****                       ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
2300:Drivers/CMSIS/Include/core_cm7.h ****         #if defined ( __CC_ARM )
2301:Drivers/CMSIS/Include/core_cm7.h ****           __schedule_barrier();
2302:Drivers/CMSIS/Include/core_cm7.h ****         #endif
2303:Drivers/CMSIS/Include/core_cm7.h ****       } while (ways-- != 0U);
2304:Drivers/CMSIS/Include/core_cm7.h ****     } while(sets-- != 0U);
2305:Drivers/CMSIS/Include/core_cm7.h ****     __DSB();
2306:Drivers/CMSIS/Include/core_cm7.h **** 
2307:Drivers/CMSIS/Include/core_cm7.h ****     SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
2308:Drivers/CMSIS/Include/core_cm7.h **** 
2309:Drivers/CMSIS/Include/core_cm7.h ****     __DSB();
2310:Drivers/CMSIS/Include/core_cm7.h ****     __ISB();
2311:Drivers/CMSIS/Include/core_cm7.h ****   #endif
2312:Drivers/CMSIS/Include/core_cm7.h **** }
2313:Drivers/CMSIS/Include/core_cm7.h **** 
2314:Drivers/CMSIS/Include/core_cm7.h **** 
2315:Drivers/CMSIS/Include/core_cm7.h **** /**
2316:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Disable D-Cache
2317:Drivers/CMSIS/Include/core_cm7.h ****   \details Turns off D-Cache
2318:Drivers/CMSIS/Include/core_cm7.h ****   */
2319:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void SCB_DisableDCache (void)
2320:Drivers/CMSIS/Include/core_cm7.h **** {
2321:Drivers/CMSIS/Include/core_cm7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
2322:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t ccsidr;
2323:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t sets;
2324:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t ways;
2325:Drivers/CMSIS/Include/core_cm7.h **** 
2326:Drivers/CMSIS/Include/core_cm7.h ****     SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
2327:Drivers/CMSIS/Include/core_cm7.h ****     __DSB();
2328:Drivers/CMSIS/Include/core_cm7.h **** 
2329:Drivers/CMSIS/Include/core_cm7.h ****     SCB->CCR &= ~(uint32_t)SCB_CCR_DC_Msk;  /* disable D-Cache */
2330:Drivers/CMSIS/Include/core_cm7.h ****     __DSB();
2331:Drivers/CMSIS/Include/core_cm7.h **** 
2332:Drivers/CMSIS/Include/core_cm7.h ****     ccsidr = SCB->CCSIDR;
2333:Drivers/CMSIS/Include/core_cm7.h **** 
2334:Drivers/CMSIS/Include/core_cm7.h ****                                             /* clean & invalidate D-Cache */
2335:Drivers/CMSIS/Include/core_cm7.h ****     sets = (uint32_t)(CCSIDR_SETS(ccsidr));
2336:Drivers/CMSIS/Include/core_cm7.h ****     do {
2337:Drivers/CMSIS/Include/core_cm7.h ****       ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
2338:Drivers/CMSIS/Include/core_cm7.h ****       do {
2339:Drivers/CMSIS/Include/core_cm7.h ****         SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
2340:Drivers/CMSIS/Include/core_cm7.h ****                        ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
2341:Drivers/CMSIS/Include/core_cm7.h ****         #if defined ( __CC_ARM )
2342:Drivers/CMSIS/Include/core_cm7.h ****           __schedule_barrier();
2343:Drivers/CMSIS/Include/core_cm7.h ****         #endif
2344:Drivers/CMSIS/Include/core_cm7.h ****       } while (ways-- != 0U);
2345:Drivers/CMSIS/Include/core_cm7.h ****     } while(sets-- != 0U);
2346:Drivers/CMSIS/Include/core_cm7.h **** 
2347:Drivers/CMSIS/Include/core_cm7.h ****     __DSB();
2348:Drivers/CMSIS/Include/core_cm7.h ****     __ISB();
2349:Drivers/CMSIS/Include/core_cm7.h ****   #endif
2350:Drivers/CMSIS/Include/core_cm7.h **** }
2351:Drivers/CMSIS/Include/core_cm7.h **** 
2352:Drivers/CMSIS/Include/core_cm7.h **** 
2353:Drivers/CMSIS/Include/core_cm7.h **** /**
2354:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Invalidate D-Cache
ARM GAS  /tmp/ccJW5Vt8.s 			page 90


2355:Drivers/CMSIS/Include/core_cm7.h ****   \details Invalidates D-Cache
2356:Drivers/CMSIS/Include/core_cm7.h ****   */
2357:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void SCB_InvalidateDCache (void)
2358:Drivers/CMSIS/Include/core_cm7.h **** {
2359:Drivers/CMSIS/Include/core_cm7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
2360:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t ccsidr;
2361:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t sets;
2362:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t ways;
2363:Drivers/CMSIS/Include/core_cm7.h **** 
2364:Drivers/CMSIS/Include/core_cm7.h ****     SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
2365:Drivers/CMSIS/Include/core_cm7.h ****     __DSB();
2366:Drivers/CMSIS/Include/core_cm7.h **** 
2367:Drivers/CMSIS/Include/core_cm7.h ****     ccsidr = SCB->CCSIDR;
2368:Drivers/CMSIS/Include/core_cm7.h **** 
2369:Drivers/CMSIS/Include/core_cm7.h ****                                             /* invalidate D-Cache */
2370:Drivers/CMSIS/Include/core_cm7.h ****     sets = (uint32_t)(CCSIDR_SETS(ccsidr));
2371:Drivers/CMSIS/Include/core_cm7.h ****     do {
2372:Drivers/CMSIS/Include/core_cm7.h ****       ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
2373:Drivers/CMSIS/Include/core_cm7.h ****       do {
2374:Drivers/CMSIS/Include/core_cm7.h ****         SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
2375:Drivers/CMSIS/Include/core_cm7.h ****                       ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
2376:Drivers/CMSIS/Include/core_cm7.h ****         #if defined ( __CC_ARM )
2377:Drivers/CMSIS/Include/core_cm7.h ****           __schedule_barrier();
2378:Drivers/CMSIS/Include/core_cm7.h ****         #endif
2379:Drivers/CMSIS/Include/core_cm7.h ****       } while (ways-- != 0U);
2380:Drivers/CMSIS/Include/core_cm7.h ****     } while(sets-- != 0U);
2381:Drivers/CMSIS/Include/core_cm7.h **** 
2382:Drivers/CMSIS/Include/core_cm7.h ****     __DSB();
2383:Drivers/CMSIS/Include/core_cm7.h ****     __ISB();
2384:Drivers/CMSIS/Include/core_cm7.h ****   #endif
2385:Drivers/CMSIS/Include/core_cm7.h **** }
2386:Drivers/CMSIS/Include/core_cm7.h **** 
2387:Drivers/CMSIS/Include/core_cm7.h **** 
2388:Drivers/CMSIS/Include/core_cm7.h **** /**
2389:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Clean D-Cache
2390:Drivers/CMSIS/Include/core_cm7.h ****   \details Cleans D-Cache
2391:Drivers/CMSIS/Include/core_cm7.h ****   */
2392:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void SCB_CleanDCache (void)
2393:Drivers/CMSIS/Include/core_cm7.h **** {
2394:Drivers/CMSIS/Include/core_cm7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
2395:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t ccsidr;
2396:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t sets;
2397:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t ways;
2398:Drivers/CMSIS/Include/core_cm7.h **** 
2399:Drivers/CMSIS/Include/core_cm7.h ****      SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
2400:Drivers/CMSIS/Include/core_cm7.h ****    __DSB();
2401:Drivers/CMSIS/Include/core_cm7.h **** 
2402:Drivers/CMSIS/Include/core_cm7.h ****     ccsidr = SCB->CCSIDR;
2403:Drivers/CMSIS/Include/core_cm7.h **** 
2404:Drivers/CMSIS/Include/core_cm7.h ****                                             /* clean D-Cache */
2405:Drivers/CMSIS/Include/core_cm7.h ****     sets = (uint32_t)(CCSIDR_SETS(ccsidr));
2406:Drivers/CMSIS/Include/core_cm7.h ****     do {
2407:Drivers/CMSIS/Include/core_cm7.h ****       ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
2408:Drivers/CMSIS/Include/core_cm7.h ****       do {
2409:Drivers/CMSIS/Include/core_cm7.h ****         SCB->DCCSW = (((sets << SCB_DCCSW_SET_Pos) & SCB_DCCSW_SET_Msk) |
2410:Drivers/CMSIS/Include/core_cm7.h ****                       ((ways << SCB_DCCSW_WAY_Pos) & SCB_DCCSW_WAY_Msk)  );
2411:Drivers/CMSIS/Include/core_cm7.h ****         #if defined ( __CC_ARM )
ARM GAS  /tmp/ccJW5Vt8.s 			page 91


2412:Drivers/CMSIS/Include/core_cm7.h ****           __schedule_barrier();
2413:Drivers/CMSIS/Include/core_cm7.h ****         #endif
2414:Drivers/CMSIS/Include/core_cm7.h ****       } while (ways-- != 0U);
2415:Drivers/CMSIS/Include/core_cm7.h ****     } while(sets-- != 0U);
2416:Drivers/CMSIS/Include/core_cm7.h **** 
2417:Drivers/CMSIS/Include/core_cm7.h ****     __DSB();
2418:Drivers/CMSIS/Include/core_cm7.h ****     __ISB();
2419:Drivers/CMSIS/Include/core_cm7.h ****   #endif
2420:Drivers/CMSIS/Include/core_cm7.h **** }
2421:Drivers/CMSIS/Include/core_cm7.h **** 
2422:Drivers/CMSIS/Include/core_cm7.h **** 
2423:Drivers/CMSIS/Include/core_cm7.h **** /**
2424:Drivers/CMSIS/Include/core_cm7.h ****   \brief   Clean & Invalidate D-Cache
2425:Drivers/CMSIS/Include/core_cm7.h ****   \details Cleans and Invalidates D-Cache
2426:Drivers/CMSIS/Include/core_cm7.h ****   */
2427:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void SCB_CleanInvalidateDCache (void)
2428:Drivers/CMSIS/Include/core_cm7.h **** {
2429:Drivers/CMSIS/Include/core_cm7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
2430:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t ccsidr;
2431:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t sets;
2432:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t ways;
2433:Drivers/CMSIS/Include/core_cm7.h **** 
2434:Drivers/CMSIS/Include/core_cm7.h ****     SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
2435:Drivers/CMSIS/Include/core_cm7.h ****     __DSB();
2436:Drivers/CMSIS/Include/core_cm7.h **** 
2437:Drivers/CMSIS/Include/core_cm7.h ****     ccsidr = SCB->CCSIDR;
2438:Drivers/CMSIS/Include/core_cm7.h **** 
2439:Drivers/CMSIS/Include/core_cm7.h ****                                             /* clean & invalidate D-Cache */
2440:Drivers/CMSIS/Include/core_cm7.h ****     sets = (uint32_t)(CCSIDR_SETS(ccsidr));
2441:Drivers/CMSIS/Include/core_cm7.h ****     do {
2442:Drivers/CMSIS/Include/core_cm7.h ****       ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
2443:Drivers/CMSIS/Include/core_cm7.h ****       do {
2444:Drivers/CMSIS/Include/core_cm7.h ****         SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
2445:Drivers/CMSIS/Include/core_cm7.h ****                        ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
2446:Drivers/CMSIS/Include/core_cm7.h ****         #if defined ( __CC_ARM )
2447:Drivers/CMSIS/Include/core_cm7.h ****           __schedule_barrier();
2448:Drivers/CMSIS/Include/core_cm7.h ****         #endif
2449:Drivers/CMSIS/Include/core_cm7.h ****       } while (ways-- != 0U);
2450:Drivers/CMSIS/Include/core_cm7.h ****     } while(sets-- != 0U);
2451:Drivers/CMSIS/Include/core_cm7.h **** 
2452:Drivers/CMSIS/Include/core_cm7.h ****     __DSB();
2453:Drivers/CMSIS/Include/core_cm7.h ****     __ISB();
2454:Drivers/CMSIS/Include/core_cm7.h ****   #endif
2455:Drivers/CMSIS/Include/core_cm7.h **** }
2456:Drivers/CMSIS/Include/core_cm7.h **** 
2457:Drivers/CMSIS/Include/core_cm7.h **** 
2458:Drivers/CMSIS/Include/core_cm7.h **** /**
2459:Drivers/CMSIS/Include/core_cm7.h ****   \brief   D-Cache Invalidate by address
2460:Drivers/CMSIS/Include/core_cm7.h ****   \details Invalidates D-Cache for the given address
2461:Drivers/CMSIS/Include/core_cm7.h ****   \param[in]   addr    address (aligned to 32-byte boundary)
2462:Drivers/CMSIS/Include/core_cm7.h ****   \param[in]   dsize   size of memory block (in number of bytes)
2463:Drivers/CMSIS/Include/core_cm7.h **** */
2464:Drivers/CMSIS/Include/core_cm7.h **** __STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
 1614              		.loc 2 2464 22 view .LVU452
 1615              	.LBB24:
2465:Drivers/CMSIS/Include/core_cm7.h **** {
2466:Drivers/CMSIS/Include/core_cm7.h ****   #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
ARM GAS  /tmp/ccJW5Vt8.s 			page 92


2467:Drivers/CMSIS/Include/core_cm7.h ****      int32_t op_size = dsize;
 1616              		.loc 2 2467 6 view .LVU453
2468:Drivers/CMSIS/Include/core_cm7.h ****     uint32_t op_addr = (uint32_t)addr;
 1617              		.loc 2 2468 5 view .LVU454
2469:Drivers/CMSIS/Include/core_cm7.h ****      int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (
 1618              		.loc 2 2469 6 view .LVU455
2470:Drivers/CMSIS/Include/core_cm7.h **** 
2471:Drivers/CMSIS/Include/core_cm7.h ****     __DSB();
 1619              		.loc 2 2471 5 view .LVU456
 1620              	.LBB25:
 1621              	.LBI25:
 1622              		.file 3 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/ccJW5Vt8.s 			page 93


  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
ARM GAS  /tmp/ccJW5Vt8.s 			page 94


 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccJW5Vt8.s 			page 95


 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
ARM GAS  /tmp/ccJW5Vt8.s 			page 96


 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
ARM GAS  /tmp/ccJW5Vt8.s 			page 97


 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/ccJW5Vt8.s 			page 98


 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
ARM GAS  /tmp/ccJW5Vt8.s 			page 99


 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccJW5Vt8.s 			page 100


 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
ARM GAS  /tmp/ccJW5Vt8.s 			page 101


 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccJW5Vt8.s 			page 102


 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/ccJW5Vt8.s 			page 103


 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
ARM GAS  /tmp/ccJW5Vt8.s 			page 104


 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
ARM GAS  /tmp/ccJW5Vt8.s 			page 105


 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccJW5Vt8.s 			page 106


 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/ccJW5Vt8.s 			page 107


 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 1623              		.loc 3 877 27 view .LVU457
 1624              	.LBB26:
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 1625              		.loc 3 879 3 view .LVU458
 1626              		.syntax unified
 1627              	@ 879 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1628 0032 BFF34F8F 		dsb 0xF
 1629              	@ 0 "" 2
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1630              		.loc 3 880 1 is_stmt 0 view .LVU459
 1631              		.thumb
 1632              		.syntax unified
 1633 0036 04E0     		b	.L105
 1634              	.LVL118:
 1635              	.L106:
 1636              		.loc 3 880 1 view .LVU460
 1637              	.LBE26:
 1638              	.LBE25:
2472:Drivers/CMSIS/Include/core_cm7.h **** 
2473:Drivers/CMSIS/Include/core_cm7.h ****     while (op_size > 0) {
2474:Drivers/CMSIS/Include/core_cm7.h ****       SCB->DCIMVAC = op_addr;
 1639              		.loc 2 2474 7 is_stmt 1 view .LVU461
ARM GAS  /tmp/ccJW5Vt8.s 			page 108


 1640              		.loc 2 2474 20 is_stmt 0 view .LVU462
 1641 0038 0649     		ldr	r1, .L109
 1642 003a C1F85C22 		str	r2, [r1, #604]
2475:Drivers/CMSIS/Include/core_cm7.h ****       op_addr += (uint32_t)linesize;
 1643              		.loc 2 2475 7 is_stmt 1 view .LVU463
 1644              		.loc 2 2475 15 is_stmt 0 view .LVU464
 1645 003e 2032     		adds	r2, r2, #32
 1646              	.LVL119:
2476:Drivers/CMSIS/Include/core_cm7.h ****       op_size -=           linesize;
 1647              		.loc 2 2476 7 is_stmt 1 view .LVU465
 1648              		.loc 2 2476 15 is_stmt 0 view .LVU466
 1649 0040 203B     		subs	r3, r3, #32
 1650              	.LVL120:
 1651              	.L105:
2473:Drivers/CMSIS/Include/core_cm7.h ****       SCB->DCIMVAC = op_addr;
 1652              		.loc 2 2473 11 is_stmt 1 view .LVU467
 1653 0042 002B     		cmp	r3, #0
 1654 0044 F8DC     		bgt	.L106
2477:Drivers/CMSIS/Include/core_cm7.h ****     }
2478:Drivers/CMSIS/Include/core_cm7.h **** 
2479:Drivers/CMSIS/Include/core_cm7.h ****     __DSB();
 1655              		.loc 2 2479 5 view .LVU468
 1656              	.LBB27:
 1657              	.LBI27:
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1658              		.loc 3 877 27 view .LVU469
 1659              	.LBB28:
 879:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1660              		.loc 3 879 3 view .LVU470
 1661              		.syntax unified
 1662              	@ 879 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1663 0046 BFF34F8F 		dsb 0xF
 1664              	@ 0 "" 2
 1665              		.thumb
 1666              		.syntax unified
 1667              	.LBE28:
 1668              	.LBE27:
2480:Drivers/CMSIS/Include/core_cm7.h ****     __ISB();
 1669              		.loc 2 2480 5 view .LVU471
 1670              	.LBB29:
 1671              	.LBI29:
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 1672              		.loc 3 866 27 view .LVU472
 1673              	.LBB30:
 868:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1674              		.loc 3 868 3 view .LVU473
 1675              		.syntax unified
 1676              	@ 868 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 1677 004a BFF36F8F 		isb 0xF
 1678              	@ 0 "" 2
 1679              	.LVL121:
 868:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 1680              		.loc 3 868 3 is_stmt 0 view .LVU474
 1681              		.thumb
 1682              		.syntax unified
 1683              	.LBE30:
 1684              	.LBE29:
ARM GAS  /tmp/ccJW5Vt8.s 			page 109


 1685              	.LBE24:
 1686              	.LBE23:
 766:LWIP/Target/ethernetif.c **** 
 767:LWIP/Target/ethernetif.c **** /* USER CODE END HAL ETH RxLinkCallback */
 768:LWIP/Target/ethernetif.c **** }
 1687              		.loc 1 768 1 view .LVU475
 1688 004e 30BC     		pop	{r4, r5}
 1689              	.LCFI34:
 1690              		.cfi_restore 5
 1691              		.cfi_restore 4
 1692              		.cfi_def_cfa_offset 0
 1693              	.LVL122:
 1694              		.loc 1 768 1 view .LVU476
 1695 0050 7047     		bx	lr
 1696              	.L110:
 1697 0052 00BF     		.align	2
 1698              	.L109:
 1699 0054 00ED00E0 		.word	-536810240
 1700              		.cfi_endproc
 1701              	.LFE184:
 1703              		.section	.text.HAL_ETH_TxFreeCallback,"ax",%progbits
 1704              		.align	1
 1705              		.global	HAL_ETH_TxFreeCallback
 1706              		.syntax unified
 1707              		.thumb
 1708              		.thumb_func
 1710              	HAL_ETH_TxFreeCallback:
 1711              	.LVL123:
 1712              	.LFB185:
 769:LWIP/Target/ethernetif.c **** 
 770:LWIP/Target/ethernetif.c **** void HAL_ETH_TxFreeCallback(uint32_t * buff)
 771:LWIP/Target/ethernetif.c **** {
 1713              		.loc 1 771 1 is_stmt 1 view -0
 1714              		.cfi_startproc
 1715              		@ args = 0, pretend = 0, frame = 0
 1716              		@ frame_needed = 0, uses_anonymous_args = 0
 1717              		.loc 1 771 1 is_stmt 0 view .LVU478
 1718 0000 08B5     		push	{r3, lr}
 1719              	.LCFI35:
 1720              		.cfi_def_cfa_offset 8
 1721              		.cfi_offset 3, -8
 1722              		.cfi_offset 14, -4
 772:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN HAL ETH TxFreeCallback */
 773:LWIP/Target/ethernetif.c **** 
 774:LWIP/Target/ethernetif.c ****   pbuf_free((struct pbuf *)buff);
 1723              		.loc 1 774 3 is_stmt 1 view .LVU479
 1724 0002 FFF7FEFF 		bl	pbuf_free
 1725              	.LVL124:
 775:LWIP/Target/ethernetif.c **** 
 776:LWIP/Target/ethernetif.c **** /* USER CODE END HAL ETH TxFreeCallback */
 777:LWIP/Target/ethernetif.c **** }
 1726              		.loc 1 777 1 is_stmt 0 view .LVU480
 1727 0006 08BD     		pop	{r3, pc}
 1728              		.cfi_endproc
 1729              	.LFE185:
 1731              		.section	.text.ethernetif_notify_conn_changed,"ax",%progbits
 1732              		.align	1
ARM GAS  /tmp/ccJW5Vt8.s 			page 110


 1733              		.weak	ethernetif_notify_conn_changed
 1734              		.syntax unified
 1735              		.thumb
 1736              		.thumb_func
 1738              	ethernetif_notify_conn_changed:
 1739              	.LVL125:
 1740              	.LFB186:
 778:LWIP/Target/ethernetif.c **** 
 779:LWIP/Target/ethernetif.c **** /* USER CODE BEGIN 8 */
 780:LWIP/Target/ethernetif.c **** /**
 781:LWIP/Target/ethernetif.c ****   * @brief  This function notify user about link status changement.
 782:LWIP/Target/ethernetif.c ****   * @param  netif: the network interface
 783:LWIP/Target/ethernetif.c ****   * @retval None
 784:LWIP/Target/ethernetif.c ****   */
 785:LWIP/Target/ethernetif.c **** __weak void ethernetif_notify_conn_changed(struct netif *netif)
 786:LWIP/Target/ethernetif.c **** {
 1741              		.loc 1 786 1 is_stmt 1 view -0
 1742              		.cfi_startproc
 1743              		@ args = 0, pretend = 0, frame = 0
 1744              		@ frame_needed = 0, uses_anonymous_args = 0
 1745              		@ link register save eliminated.
 787:LWIP/Target/ethernetif.c ****   /* NOTE : This is function could be implemented in user file
 788:LWIP/Target/ethernetif.c ****             when the callback is needed,
 789:LWIP/Target/ethernetif.c ****   */
 790:LWIP/Target/ethernetif.c **** 
 791:LWIP/Target/ethernetif.c **** }
 1746              		.loc 1 791 1 view .LVU482
 1747 0000 7047     		bx	lr
 1748              		.cfi_endproc
 1749              	.LFE186:
 1751              		.global	LAN8742_IOCtx
 1752              		.global	LAN8742
 1753              		.global	TxConfig
 1754              		.global	heth
 1755              		.global	DMATxDscrTab
 1756              		.global	DMARxDscrTab
 1757              		.global	memp_RX_POOL
 1758              		.global	memp_memory_RX_POOL_base
 1759              		.section	.RxDecripSection,"aw"
 1760              		.align	2
 1761              		.set	.LANCHOR6,. + 0
 1764              	DMARxDscrTab:
 1765 0000 00000000 		.space	160
 1765      00000000 
 1765      00000000 
 1765      00000000 
 1765      00000000 
 1766              		.section	.TxDecripSection,"aw"
 1767              		.align	2
 1768              		.set	.LANCHOR5,. + 0
 1771              	DMATxDscrTab:
 1772 0000 00000000 		.space	160
 1772      00000000 
 1772      00000000 
 1772      00000000 
 1772      00000000 
 1773              		.section	.bss.LAN8742,"aw",%nobits
ARM GAS  /tmp/ccJW5Vt8.s 			page 111


 1774              		.align	2
 1775              		.set	.LANCHOR4,. + 0
 1778              	LAN8742:
 1779 0000 00000000 		.space	32
 1779      00000000 
 1779      00000000 
 1779      00000000 
 1779      00000000 
 1780              		.section	.bss.RxAllocStatus,"aw",%nobits
 1781              		.set	.LANCHOR0,. + 0
 1784              	RxAllocStatus:
 1785 0000 00       		.space	1
 1786              		.section	.bss.TxConfig,"aw",%nobits
 1787              		.align	2
 1788              		.set	.LANCHOR2,. + 0
 1791              	TxConfig:
 1792 0000 00000000 		.space	56
 1792      00000000 
 1792      00000000 
 1792      00000000 
 1792      00000000 
 1793              		.section	.bss.heth,"aw",%nobits
 1794              		.align	2
 1795              		.set	.LANCHOR1,. + 0
 1798              	heth:
 1799 0000 00000000 		.space	176
 1799      00000000 
 1799      00000000 
 1799      00000000 
 1799      00000000 
 1800              		.section	.bss.memp_memory_RX_POOL_base,"aw",%nobits
 1801              		.align	2
 1804              	memp_memory_RX_POOL_base:
 1805 0000 00000000 		.space	18819
 1805      00000000 
 1805      00000000 
 1805      00000000 
 1805      00000000 
 1806              		.section	.bss.memp_tab_RX_POOL,"aw",%nobits
 1807              		.align	2
 1810              	memp_tab_RX_POOL:
 1811 0000 00000000 		.space	4
 1812              		.section	.data.LAN8742_IOCtx,"aw"
 1813              		.align	2
 1814              		.set	.LANCHOR7,. + 0
 1817              	LAN8742_IOCtx:
 1818 0000 00000000 		.word	ETH_PHY_IO_Init
 1819 0004 00000000 		.word	ETH_PHY_IO_DeInit
 1820 0008 00000000 		.word	ETH_PHY_IO_WriteReg
 1821 000c 00000000 		.word	ETH_PHY_IO_ReadReg
 1822 0010 00000000 		.word	ETH_PHY_IO_GetTick
 1823              		.section	.rodata.memp_RX_POOL,"a"
 1824              		.align	2
 1825              		.set	.LANCHOR3,. + 0
 1828              	memp_RX_POOL:
 1829 0000 2006     		.short	1568
 1830 0002 0C00     		.short	12
ARM GAS  /tmp/ccJW5Vt8.s 			page 112


 1831 0004 00000000 		.word	memp_memory_RX_POOL_base
 1832 0008 00000000 		.word	memp_tab_RX_POOL
 1833              		.text
 1834              	.Letext0:
 1835              		.file 4 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f767xx.h"
 1836              		.file 5 "/home/lobanov/st/stm32cubeclt_1.12.1/GNU-tools-for-STM32/arm-none-eabi/include/machine/_d
 1837              		.file 6 "/home/lobanov/st/stm32cubeclt_1.12.1/GNU-tools-for-STM32/arm-none-eabi/include/sys/_stdin
 1838              		.file 7 "Drivers/CMSIS/Device/ST/STM32F7xx/Include/stm32f7xx.h"
 1839              		.file 8 "/home/lobanov/st/stm32cubeclt_1.12.1/GNU-tools-for-STM32/lib/gcc/arm-none-eabi/10.3.1/inc
 1840              		.file 9 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_def.h"
 1841              		.file 10 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_gpio.h"
 1842              		.file 11 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_eth.h"
 1843              		.file 12 "Middlewares/Third_Party/LwIP/src/include/lwip/arch.h"
 1844              		.file 13 "Middlewares/Third_Party/LwIP/src/include/lwip/memp.h"
 1845              		.file 14 "Middlewares/Third_Party/LwIP/src/include/lwip/priv/memp_priv.h"
 1846              		.file 15 "Middlewares/Third_Party/LwIP/src/include/lwip/err.h"
 1847              		.file 16 "Middlewares/Third_Party/LwIP/src/include/lwip/pbuf.h"
 1848              		.file 17 "Middlewares/Third_Party/LwIP/src/include/lwip/ip4_addr.h"
 1849              		.file 18 "Middlewares/Third_Party/LwIP/src/include/lwip/ip_addr.h"
 1850              		.file 19 "Middlewares/Third_Party/LwIP/src/include/lwip/netif.h"
 1851              		.file 20 "Drivers/BSP/Components/lan8742/lan8742.h"
 1852              		.file 21 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal_cortex.h"
 1853              		.file 22 "/home/lobanov/st/stm32cubeclt_1.12.1/GNU-tools-for-STM32/arm-none-eabi/include/string.h"
 1854              		.file 23 "Middlewares/Third_Party/LwIP/src/include/lwip/etharp.h"
 1855              		.file 24 "/home/lobanov/st/stm32cubeclt_1.12.1/GNU-tools-for-STM32/arm-none-eabi/include/stdio.h"
 1856              		.file 25 "Drivers/STM32F7xx_HAL_Driver/Inc/stm32f7xx_hal.h"
 1857              		.file 26 "LWIP/Target/ethernetif.h"
 1858              		.file 27 "<built-in>"
ARM GAS  /tmp/ccJW5Vt8.s 			page 113


DEFINED SYMBOLS
                            *ABS*:0000000000000000 ethernetif.c
     /tmp/ccJW5Vt8.s:19     .text.ETH_PHY_IO_DeInit:0000000000000000 $t
     /tmp/ccJW5Vt8.s:25     .text.ETH_PHY_IO_DeInit:0000000000000000 ETH_PHY_IO_DeInit
     /tmp/ccJW5Vt8.s:41     .text.low_level_input:0000000000000000 $t
     /tmp/ccJW5Vt8.s:46     .text.low_level_input:0000000000000000 low_level_input
     /tmp/ccJW5Vt8.s:97     .text.low_level_input:0000000000000020 $d
     /tmp/ccJW5Vt8.s:103    .text.low_level_output:0000000000000000 $t
     /tmp/ccJW5Vt8.s:108    .text.low_level_output:0000000000000000 low_level_output
     /tmp/ccJW5Vt8.s:258    .text.low_level_output:0000000000000094 $d
     /tmp/ccJW5Vt8.s:264    .text.pbuf_free_custom:0000000000000000 $t
     /tmp/ccJW5Vt8.s:270    .text.pbuf_free_custom:0000000000000000 pbuf_free_custom
     /tmp/ccJW5Vt8.s:313    .text.pbuf_free_custom:000000000000001c $d
     /tmp/ccJW5Vt8.s:319    .text.ETH_PHY_IO_GetTick:0000000000000000 $t
     /tmp/ccJW5Vt8.s:325    .text.ETH_PHY_IO_GetTick:0000000000000000 ETH_PHY_IO_GetTick
     /tmp/ccJW5Vt8.s:346    .text.ETH_PHY_IO_Init:0000000000000000 $t
     /tmp/ccJW5Vt8.s:352    .text.ETH_PHY_IO_Init:0000000000000000 ETH_PHY_IO_Init
     /tmp/ccJW5Vt8.s:374    .text.ETH_PHY_IO_Init:000000000000000c $d
     /tmp/ccJW5Vt8.s:379    .text.ETH_PHY_IO_ReadReg:0000000000000000 $t
     /tmp/ccJW5Vt8.s:385    .text.ETH_PHY_IO_ReadReg:0000000000000000 ETH_PHY_IO_ReadReg
     /tmp/ccJW5Vt8.s:424    .text.ETH_PHY_IO_ReadReg:0000000000000018 $d
     /tmp/ccJW5Vt8.s:429    .text.ETH_PHY_IO_WriteReg:0000000000000000 $t
     /tmp/ccJW5Vt8.s:435    .text.ETH_PHY_IO_WriteReg:0000000000000000 ETH_PHY_IO_WriteReg
     /tmp/ccJW5Vt8.s:474    .text.ETH_PHY_IO_WriteReg:0000000000000018 $d
     /tmp/ccJW5Vt8.s:479    .text.ethernetif_input:0000000000000000 $t
     /tmp/ccJW5Vt8.s:485    .text.ethernetif_input:0000000000000000 ethernetif_input
     /tmp/ccJW5Vt8.s:546    .text.sys_jiffies:0000000000000000 $t
     /tmp/ccJW5Vt8.s:552    .text.sys_jiffies:0000000000000000 sys_jiffies
     /tmp/ccJW5Vt8.s:573    .text.sys_now:0000000000000000 $t
     /tmp/ccJW5Vt8.s:579    .text.sys_now:0000000000000000 sys_now
     /tmp/ccJW5Vt8.s:600    .text.HAL_ETH_MspInit:0000000000000000 $t
     /tmp/ccJW5Vt8.s:606    .text.HAL_ETH_MspInit:0000000000000000 HAL_ETH_MspInit
     /tmp/ccJW5Vt8.s:864    .text.HAL_ETH_MspInit:000000000000010c $d
     /tmp/ccJW5Vt8.s:873    .text.HAL_ETH_MspDeInit:0000000000000000 $t
     /tmp/ccJW5Vt8.s:879    .text.HAL_ETH_MspDeInit:0000000000000000 HAL_ETH_MspDeInit
     /tmp/ccJW5Vt8.s:951    .text.HAL_ETH_MspDeInit:0000000000000054 $d
     /tmp/ccJW5Vt8.s:960    .text.ethernet_link_check_state:0000000000000000 $t
     /tmp/ccJW5Vt8.s:966    .text.ethernet_link_check_state:0000000000000000 ethernet_link_check_state
     /tmp/ccJW5Vt8.s:1025   .text.ethernet_link_check_state:0000000000000038 $d
     /tmp/ccJW5Vt8.s:1029   .text.ethernet_link_check_state:000000000000003c $t
     /tmp/ccJW5Vt8.s:1157   .text.ethernet_link_check_state:00000000000000b0 $d
     /tmp/ccJW5Vt8.s:1163   .text.low_level_init:0000000000000000 $t
     /tmp/ccJW5Vt8.s:1168   .text.low_level_init:0000000000000000 low_level_init
     /tmp/ccJW5Vt8.s:1343   .text.low_level_init:00000000000000d0 $d
     /tmp/ccJW5Vt8.s:1355   .rodata.ethernetif_init.str1.4:0000000000000000 $d
     /tmp/ccJW5Vt8.s:1365   .text.ethernetif_init:0000000000000000 $t
     /tmp/ccJW5Vt8.s:1371   .text.ethernetif_init:0000000000000000 ethernetif_init
     /tmp/ccJW5Vt8.s:1432   .text.ethernetif_init:0000000000000034 $d
     /tmp/ccJW5Vt8.s:1441   .text.HAL_ETH_RxAllocateCallback:0000000000000000 $t
     /tmp/ccJW5Vt8.s:1447   .text.HAL_ETH_RxAllocateCallback:0000000000000000 HAL_ETH_RxAllocateCallback
     /tmp/ccJW5Vt8.s:1522   .text.HAL_ETH_RxAllocateCallback:0000000000000040 $d
     /tmp/ccJW5Vt8.s:1529   .text.HAL_ETH_RxLinkCallback:0000000000000000 $t
     /tmp/ccJW5Vt8.s:1535   .text.HAL_ETH_RxLinkCallback:0000000000000000 HAL_ETH_RxLinkCallback
     /tmp/ccJW5Vt8.s:1699   .text.HAL_ETH_RxLinkCallback:0000000000000054 $d
     /tmp/ccJW5Vt8.s:1704   .text.HAL_ETH_TxFreeCallback:0000000000000000 $t
     /tmp/ccJW5Vt8.s:1710   .text.HAL_ETH_TxFreeCallback:0000000000000000 HAL_ETH_TxFreeCallback
     /tmp/ccJW5Vt8.s:1732   .text.ethernetif_notify_conn_changed:0000000000000000 $t
ARM GAS  /tmp/ccJW5Vt8.s 			page 114


     /tmp/ccJW5Vt8.s:1738   .text.ethernetif_notify_conn_changed:0000000000000000 ethernetif_notify_conn_changed
     /tmp/ccJW5Vt8.s:1817   .data.LAN8742_IOCtx:0000000000000000 LAN8742_IOCtx
     /tmp/ccJW5Vt8.s:1778   .bss.LAN8742:0000000000000000 LAN8742
     /tmp/ccJW5Vt8.s:1791   .bss.TxConfig:0000000000000000 TxConfig
     /tmp/ccJW5Vt8.s:1798   .bss.heth:0000000000000000 heth
     /tmp/ccJW5Vt8.s:1771   .TxDecripSection:0000000000000000 DMATxDscrTab
     /tmp/ccJW5Vt8.s:1764   .RxDecripSection:0000000000000000 DMARxDscrTab
     /tmp/ccJW5Vt8.s:1828   .rodata.memp_RX_POOL:0000000000000000 memp_RX_POOL
     /tmp/ccJW5Vt8.s:1804   .bss.memp_memory_RX_POOL_base:0000000000000000 memp_memory_RX_POOL_base
     /tmp/ccJW5Vt8.s:1760   .RxDecripSection:0000000000000000 $d
     /tmp/ccJW5Vt8.s:1767   .TxDecripSection:0000000000000000 $d
     /tmp/ccJW5Vt8.s:1774   .bss.LAN8742:0000000000000000 $d
     /tmp/ccJW5Vt8.s:1784   .bss.RxAllocStatus:0000000000000000 RxAllocStatus
     /tmp/ccJW5Vt8.s:1785   .bss.RxAllocStatus:0000000000000000 $d
     /tmp/ccJW5Vt8.s:1787   .bss.TxConfig:0000000000000000 $d
     /tmp/ccJW5Vt8.s:1794   .bss.heth:0000000000000000 $d
     /tmp/ccJW5Vt8.s:1801   .bss.memp_memory_RX_POOL_base:0000000000000000 $d
     /tmp/ccJW5Vt8.s:1807   .bss.memp_tab_RX_POOL:0000000000000000 $d
     /tmp/ccJW5Vt8.s:1810   .bss.memp_tab_RX_POOL:0000000000000000 memp_tab_RX_POOL
     /tmp/ccJW5Vt8.s:1813   .data.LAN8742_IOCtx:0000000000000000 $d
     /tmp/ccJW5Vt8.s:1824   .rodata.memp_RX_POOL:0000000000000000 $d

UNDEFINED SYMBOLS
HAL_ETH_ReadData
memset
HAL_ETH_Transmit
memp_free_pool
HAL_GetTick
HAL_ETH_SetMDIOClockRange
HAL_ETH_ReadPHYRegister
HAL_ETH_WritePHYRegister
pbuf_free
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_GPIO_DeInit
HAL_NVIC_DisableIRQ
LAN8742_GetLinkState
HAL_ETH_Stop
netif_set_down
netif_set_link_down
HAL_ETH_GetMACConfig
HAL_ETH_SetMACConfig
HAL_ETH_Start
netif_set_up
netif_set_link_up
HAL_ETH_Init
memp_init_pool
LAN8742_RegisterBusIO
LAN8742_Init
Error_Handler
printf
etharp_output
memp_malloc_pool
pbuf_alloced_custom
